{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = ({\n  dep,\n  initialOpenedNodes,\n  handleNodeClick\n}) => {\n  _s();\n\n  const [openedNodes, setOpenedNodes] = useState(initialOpenedNodes);\n  useEffect(() => {\n    if (initialOpenedNodes) {\n      setOpenedNodes(initialOpenedNodes);\n    }\n  }, [initialOpenedNodes]);\n\n  const openParentNodes = (id, nodes) => {\n    let currentNodes = { ...openedNodes\n    };\n\n    const findAndOpenParent = subclasses => {\n      for (let node of subclasses) {\n        if (node.department_tree_to_json.id === id) {\n          currentNodes[node.department_tree_to_json.id] = true;\n          return true;\n        }\n\n        if (node.department_tree_to_json.Subclasses && findAndOpenParent(node.department_tree_to_json.Subclasses)) {\n          currentNodes[node.department_tree_to_json.id] = true;\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    findAndOpenParent(nodes);\n    setOpenedNodes(currentNodes);\n  };\n\n  useEffect(() => {\n    // Assuming you want to open parent nodes for department id 21\n    openParentNodes(21, dep);\n  }, [dep]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const label = /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${node.department_tree_to_json.id}`,\n                className: \"level1\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: node.department_tree_to_json.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 45\n              }, this),\n              defaultCollapsed: false // Первый уровень всегда раскрыт\n              ,\n              onClick: () => handleNodeClick(node.department_tree_to_json.id),\n              children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 64,\n                    columnNumber: 57\n                  }, this)\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 53\n                }, this),\n                defaultCollapsed: !openedNodes[departments.id],\n                onClick: () => handleNodeClick(departments.id),\n                children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments1.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments1.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 75,\n                      columnNumber: 65\n                    }, this)\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 61\n                  }, this),\n                  defaultCollapsed: !openedNodes[departments1.id],\n                  onClick: () => handleNodeClick(departments1.id),\n                  children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 65\n                    }, this)\n                  }, departments2.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 61\n                  }, this))\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 53\n                }, this))\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 45\n              }, this))\n            }, `${node.department_tree_to_json.Name}|${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 37\n            }, this);\n\n            return label;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"GftRvRVy+Trw+Mu5YGMvaJTDRzQ=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","initialOpenedNodes","handleNodeClick","openedNodes","setOpenedNodes","openParentNodes","id","nodes","currentNodes","findAndOpenParent","subclasses","node","department_tree_to_json","Subclasses","length","map","i","label","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\nconst Sidebar = ({ dep, initialOpenedNodes, handleNodeClick }) => {\r\n    const [openedNodes, setOpenedNodes] = useState(initialOpenedNodes);\r\n\r\n    useEffect(() => {\r\n        if (initialOpenedNodes) {\r\n            setOpenedNodes(initialOpenedNodes);\r\n        }\r\n    }, [initialOpenedNodes]);\r\n\r\n    const openParentNodes = (id, nodes) => {\r\n        let currentNodes = { ...openedNodes };\r\n        const findAndOpenParent = (subclasses) => {\r\n            for (let node of subclasses) {\r\n                if (node.department_tree_to_json.id === id) {\r\n                    currentNodes[node.department_tree_to_json.id] = true;\r\n                    return true;\r\n                }\r\n                if (node.department_tree_to_json.Subclasses && findAndOpenParent(node.department_tree_to_json.Subclasses)) {\r\n                    currentNodes[node.department_tree_to_json.id] = true;\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        findAndOpenParent(nodes);\r\n        setOpenedNodes(currentNodes);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Assuming you want to open parent nodes for department id 21\r\n        openParentNodes(21, dep);\r\n    }, [dep]);\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => {\r\n                                const label = (\r\n                                    <TreeView\r\n                                        key={`${node.department_tree_to_json.Name}|${i}`}\r\n                                        nodeLabel={(\r\n                                            <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                                <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                            </Link>\r\n                                        )}\r\n                                        defaultCollapsed={false}  // Первый уровень всегда раскрыт\r\n                                        onClick={() => handleNodeClick(node.department_tree_to_json.id)}\r\n                                    >\r\n                                        {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                            <TreeView\r\n                                                nodeLabel={(\r\n                                                    <Link to={`/department/${departments.id}`} className='depsUser' key={departments.id}>\r\n                                                        <span className=\"node\">{departments.Name}</span>\r\n                                                    </Link>\r\n                                                )}\r\n                                                key={departments.id}\r\n                                                defaultCollapsed={!openedNodes[departments.id]}\r\n                                                onClick={() => handleNodeClick(departments.id)}\r\n                                            >\r\n                                                {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                    <TreeView\r\n                                                        nodeLabel={(\r\n                                                            <Link to={`/department/${departments1.id}`} className='depsUser' key={departments1.id}>\r\n                                                                <span className=\"node\">{departments1.Name}</span>\r\n                                                            </Link>\r\n                                                        )}\r\n                                                        key={departments1.id}\r\n                                                        defaultCollapsed={!openedNodes[departments1.id]}\r\n                                                        onClick={() => handleNodeClick(departments1.id)}\r\n                                                    >\r\n                                                        {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                            <Link to={`/department/${departments2.id}`} className='depsUser' key={departments2.id}>\r\n                                                                <div style={{ paddingBottom: '8px' }}>{departments2.Name}</div>\r\n                                                            </Link>\r\n                                                        ))}\r\n                                                    </TreeView>\r\n                                                ))}\r\n                                            </TreeView>\r\n                                        ))}\r\n                                    </TreeView>\r\n                                );\r\n\r\n                                return label;\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}