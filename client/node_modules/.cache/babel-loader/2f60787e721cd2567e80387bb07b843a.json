{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = username => {\n  _s();\n\n  if (!!~document.location.href.indexOf('/profiley/')) {\n    console.log('username=', username.username);\n  } else {}\n\n  const [user, setUser] = useState([]);\n  const [dep, setDep] = useState([]);\n  const [openPath, setOpenPath] = useState([]);\n  const localUse = JSON.parse(localStorage.getItem('user'));\n  useEffect(() => {\n    const fetchUser = async () => {\n      const res = await axios.get('/api/user/' + username.username);\n      setUser(res.data.department_id);\n    };\n\n    fetchUser();\n\n    const findPathToNode = (tree, id) => {\n      let path = [];\n\n      const findNode = (node, id, currentPath) => {\n        if (node.id === id) {\n          path = [...currentPath, node.id];\n          return true;\n        }\n\n        if (node.Subclasses && node.Subclasses.length > 0) {\n          for (let subclass of node.Subclasses) {\n            if (findNode(subclass, id, [...currentPath, node.id])) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n\n      for (let node of tree) {\n        if (findNode(node.department_tree_to_json, id, [])) {\n          break;\n        }\n      }\n\n      return path;\n    };\n\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n\n      if (res.data[0].department_tree_to_json.length === 0) {\n        setDep([]);\n      } else {\n        setDep(res.data);\n        const idToOpen = parseInt(localUse.departmentId); // замените вашим ID\n\n        const path = findPathToNode(res.data, idToOpen);\n        console.log('Path to node:', path); // Отладочный вывод\n\n        setOpenPath(path);\n      }\n    };\n\n    getDeps();\n  }, [username.username]);\n\n  const isNodeOpen = id => openPath.includes(id);\n\n  const toggleNode = id => {\n    if (isNodeOpen(id)) {\n      setOpenPath(openPath.filter(nodeId => nodeId !== id));\n    } else {\n      setOpenPath([...openPath, id]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => /*#__PURE__*/_jsxDEV(TreeView, {\n            nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 41\n            }, this),\n            collapsed: !isNodeOpen(node.department_tree_to_json.id),\n            onClick: () => toggleNode(node.department_tree_to_json.id),\n            children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${departments.id}`,\n                className: \"depsUser\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: departments.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 53\n                }, this)\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 49\n              }, this),\n              collapsed: !isNodeOpen(departments.id),\n              onClick: () => toggleNode(departments.id),\n              children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments1.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments1.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 61\n                  }, this)\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 57\n                }, this),\n                collapsed: !isNodeOpen(departments1.id),\n                onClick: () => toggleNode(departments1.id),\n                children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments2.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      paddingBottom: '8px'\n                    },\n                    children: departments2.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 61\n                  }, this)\n                }, departments2.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 57\n                }, this))\n              }, departments1.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 49\n              }, this))\n            }, departments.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 41\n            }, this))\n          }, node.department_tree_to_json.Name + '|' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"840P5QGtqB3nww0ktPznGeQmGBE=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","useParams","axios","useEffect","useState","TreeView","Sidebar","username","document","location","href","indexOf","console","log","user","setUser","dep","setDep","openPath","setOpenPath","localUse","JSON","parse","localStorage","getItem","fetchUser","res","get","data","department_id","findPathToNode","tree","id","path","findNode","node","currentPath","Subclasses","length","subclass","department_tree_to_json","getDeps","idToOpen","parseInt","departmentId","isNodeOpen","includes","toggleNode","filter","nodeId","map","i","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\n\r\nconst Sidebar = (username) => {\r\n    if(!!~document.location.href.indexOf('/profiley/')){\r\n        console.log('username=',username.username)\r\n    }else{\r\n\r\n    }\r\n\r\n\r\n    const [user, setUser] = useState([]);\r\n    const [dep, setDep] = useState([]);\r\n    const [openPath, setOpenPath] = useState([]);\r\n    const localUse = JSON.parse(localStorage.getItem('user'));\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n\r\n            const res = await axios.get('/api/user/' + username.username)\r\n            setUser(res.data.department_id)\r\n\r\n\r\n        }\r\n        fetchUser()\r\n\r\n\r\n\r\n        const findPathToNode = (tree, id) => {\r\n            let path = [];\r\n            const findNode = (node, id, currentPath) => {\r\n                if (node.id === id) {\r\n                    path = [...currentPath, node.id];\r\n                    return true;\r\n                }\r\n                if (node.Subclasses && node.Subclasses.length > 0) {\r\n                    for (let subclass of node.Subclasses) {\r\n                        if (findNode(subclass, id, [...currentPath, node.id])) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            for (let node of tree) {\r\n                if (findNode(node.department_tree_to_json, id, [])) {\r\n                    break;\r\n                }\r\n            }\r\n            return path;\r\n        };\r\n\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            if (res.data[0].department_tree_to_json.length === 0) {\r\n                setDep([]);\r\n            } else {\r\n                setDep(res.data);\r\n                const idToOpen = parseInt(localUse.departmentId); // замените вашим ID\r\n                const path = findPathToNode(res.data, idToOpen);\r\n                console.log('Path to node:', path); // Отладочный вывод\r\n                setOpenPath(path);\r\n            }\r\n        };\r\n        getDeps();\r\n    }, [username.username]);\r\n\r\n    const isNodeOpen = (id) => openPath.includes(id);\r\n\r\n    const toggleNode = (id) => {\r\n        if (isNodeOpen(id)) {\r\n            setOpenPath(openPath.filter(nodeId => nodeId !== id));\r\n        } else {\r\n            setOpenPath([...openPath, id]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => (\r\n                                <TreeView\r\n                                    nodeLabel={(\r\n                                        <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                            <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                        </Link>\r\n                                    )}\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    collapsed={!isNodeOpen(node.department_tree_to_json.id)}\r\n                                    onClick={() => toggleNode(node.department_tree_to_json.id)}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            nodeLabel={(\r\n                                                <Link to={`/department/${departments.id}`} className='depsUser' key={departments.id}>\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            )}\r\n                                            key={departments.id}\r\n                                            collapsed={!isNodeOpen(departments.id)}\r\n                                            onClick={() => toggleNode(departments.id)}\r\n                                        >\r\n                                            {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    nodeLabel={(\r\n                                                        <Link to={`/department/${departments1.id}`} className='depsUser' key={departments1.id}>\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    )}\r\n                                                    key={departments1.id}\r\n                                                    collapsed={!isNodeOpen(departments1.id)}\r\n                                                    onClick={() => toggleNode(departments1.id)}\r\n                                                >\r\n                                                    {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                        <Link to={`/department/${departments2.id}`} className='depsUser' key={departments2.id}>\r\n                                                            <div style={{ paddingBottom: '8px' }}>{departments2.Name}</div>\r\n                                                        </Link>\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}