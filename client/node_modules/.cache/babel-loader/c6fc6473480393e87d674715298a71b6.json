{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [openedNodes, setOpenedNodes] = useState({});\n  const initialNodeId = 21; // Здесь задайте ID узла, который нужно открыть по умолчанию\n\n  useEffect(() => {\n    const getDeps = async () => {\n      try {\n        const res = await axios.get('/api/department_tree_to_json/');\n\n        if (res.data && res.data.length > 0) {\n          setDep(res.data); // Создаем объект с открытыми узлами, включая заданный узел\n\n          const initialOpenedNodes = {};\n\n          const openNodesRecursively = (node, parentIsOpen) => {\n            const isOpen = parentIsOpen || node.id === initialNodeId;\n            initialOpenedNodes[node.id] = isOpen;\n\n            if (node.Subclasses) {\n              node.Subclasses.forEach(subNode => openNodesRecursively(subNode, isOpen));\n            }\n          };\n\n          res.data.forEach(node => openNodesRecursively(node.department_tree_to_json, false));\n          setOpenedNodes(initialOpenedNodes);\n        } else {\n          setDep([]);\n        }\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n\n    getDeps();\n  }, []);\n\n  const handleNodeClick = nodeId => {\n    const updatedNodes = { ...openedNodes\n    };\n    updatedNodes[nodeId] = !openedNodes[nodeId];\n    setOpenedNodes(updatedNodes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const label = /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${node.department_tree_to_json.id}`,\n                className: \"level1\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: node.department_tree_to_json.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 45\n              }, this),\n              defaultCollapsed: !openedNodes[node.department_tree_to_json.id],\n              onClick: () => handleNodeClick(node.department_tree_to_json.id),\n              children: node.department_tree_to_json.Subclasses.map((department, j) => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${department.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: department.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 53\n                }, this),\n                defaultCollapsed: !openedNodes[department.id],\n                onClick: () => handleNodeClick(department.id),\n                children: !!department.Subclasses && department.Subclasses.map((subDepartment, k) => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${subDepartment.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: subDepartment.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 65\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 61\n                  }, this),\n                  defaultCollapsed: !openedNodes[subDepartment.id],\n                  onClick: () => handleNodeClick(subDepartment.id),\n                  children: !!subDepartment.Subclasses && subDepartment.Subclasses.map((subSubDepartment, l) => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${subSubDepartment.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: subSubDepartment.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 65\n                    }, this)\n                  }, subSubDepartment.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 61\n                  }, this))\n                }, `${subDepartment.Name}|${k}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 53\n                }, this))\n              }, `${department.Name}|${j}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 45\n              }, this))\n            }, `${node.department_tree_to_json.Name}|${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 37\n            }, this);\n\n            return label;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"Y9j+hxTExfcR+k1oT8aQPG9SKts=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","openedNodes","setOpenedNodes","initialNodeId","getDeps","res","get","data","length","initialOpenedNodes","openNodesRecursively","node","parentIsOpen","isOpen","id","Subclasses","forEach","subNode","department_tree_to_json","error","console","handleNodeClick","nodeId","updatedNodes","map","i","label","Name","department","j","subDepartment","k","subSubDepartment","l","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [openedNodes, setOpenedNodes] = useState({});\r\n    const initialNodeId = 21; // Здесь задайте ID узла, который нужно открыть по умолчанию\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            try {\r\n                const res = await axios.get('/api/department_tree_to_json/');\r\n                if (res.data && res.data.length > 0) {\r\n                    setDep(res.data);\r\n\r\n                    // Создаем объект с открытыми узлами, включая заданный узел\r\n                    const initialOpenedNodes = {};\r\n                    const openNodesRecursively = (node, parentIsOpen) => {\r\n                        const isOpen = parentIsOpen || node.id === initialNodeId;\r\n                        initialOpenedNodes[node.id] = isOpen;\r\n                        if (node.Subclasses) {\r\n                            node.Subclasses.forEach(subNode => openNodesRecursively(subNode, isOpen));\r\n                        }\r\n                    };\r\n\r\n                    res.data.forEach(node => openNodesRecursively(node.department_tree_to_json, false));\r\n                    setOpenedNodes(initialOpenedNodes);\r\n                } else {\r\n                    setDep([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching departments:', error);\r\n            }\r\n        };\r\n\r\n        getDeps();\r\n    }, []);\r\n\r\n    const handleNodeClick = (nodeId) => {\r\n        const updatedNodes = { ...openedNodes };\r\n        updatedNodes[nodeId] = !openedNodes[nodeId];\r\n        setOpenedNodes(updatedNodes);\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => {\r\n                                const label = (\r\n                                    <TreeView\r\n                                        key={`${node.department_tree_to_json.Name}|${i}`}\r\n                                        nodeLabel={(\r\n                                            <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                                <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                            </Link>\r\n                                        )}\r\n                                        defaultCollapsed={!openedNodes[node.department_tree_to_json.id]}\r\n                                        onClick={() => handleNodeClick(node.department_tree_to_json.id)}\r\n                                    >\r\n                                        {node.department_tree_to_json.Subclasses.map((department, j) => (\r\n                                            <TreeView\r\n                                                key={`${department.Name}|${j}`}\r\n                                                nodeLabel={(\r\n                                                    <Link to={`/department/${department.id}`} className='depsUser'>\r\n                                                        <span className=\"node\">{department.Name}</span>\r\n                                                    </Link>\r\n                                                )}\r\n                                                defaultCollapsed={!openedNodes[department.id]}\r\n                                                onClick={() => handleNodeClick(department.id)}\r\n                                            >\r\n                                                {!!department.Subclasses && department.Subclasses.map((subDepartment, k) => (\r\n                                                    <TreeView\r\n                                                        key={`${subDepartment.Name}|${k}`}\r\n                                                        nodeLabel={(\r\n                                                            <Link to={`/department/${subDepartment.id}`} className='depsUser'>\r\n                                                                <span className=\"node\">{subDepartment.Name}</span>\r\n                                                            </Link>\r\n                                                        )}\r\n                                                        defaultCollapsed={!openedNodes[subDepartment.id]}\r\n                                                        onClick={() => handleNodeClick(subDepartment.id)}\r\n                                                    >\r\n                                                        {!!subDepartment.Subclasses && subDepartment.Subclasses.map((subSubDepartment, l) => (\r\n                                                            <Link to={`/department/${subSubDepartment.id}`} className='depsUser' key={subSubDepartment.id}>\r\n                                                                <div style={{ paddingBottom: '8px' }}>{subSubDepartment.Name}</div>\r\n                                                            </Link>\r\n                                                        ))}\r\n                                                    </TreeView>\r\n                                                ))}\r\n                                            </TreeView>\r\n                                        ))}\r\n                                    </TreeView>\r\n                                );\r\n\r\n                                return label;\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}