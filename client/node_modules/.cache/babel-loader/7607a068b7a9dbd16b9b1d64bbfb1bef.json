{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const departmentId = '15'; // Получаем входящий параметр\n\n  const [dep, setDep] = useState([]);\n  const [openNodes, setOpenNodes] = useState({}); // Состояние для хранения открытых узлов\n\n  useEffect(() => {\n    const getDeps = async () => {\n      try {\n        const res = await axios.get('/api/department_tree_to_json/');\n\n        if (res.data[0].department_tree_to_json.length === 0) {\n          setDep([]);\n        } else {\n          setDep(res.data);\n          const initialOpenNodes = getInitialOpenNodes(res.data, departmentId);\n          setOpenNodes(initialOpenNodes); // Инициализация открытых узлов\n        }\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n\n    getDeps();\n  }, [departmentId]);\n\n  const getInitialOpenNodes = (data, departmentId) => {\n    const openNodes = {};\n\n    const openNodeRecursive = nodes => {\n      nodes.forEach(node => {\n        const treeNode = node.department_tree_to_json;\n\n        if (treeNode) {\n          if (treeNode.id === departmentId || treeNode.Subclasses && treeNode.Subclasses.some(sub => sub.id === departmentId)) {\n            openNodes[treeNode.id] = true;\n          }\n\n          if (treeNode.Subclasses) {\n            openNodeRecursive(treeNode.Subclasses);\n          }\n        }\n      });\n    };\n\n    openNodeRecursive(data);\n    return openNodes;\n  };\n\n  const handleToggle = id => {\n    setOpenNodes(prevOpenNodes => ({ ...prevOpenNodes,\n      [id]: !prevOpenNodes[id]\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const treeNode = node.department_tree_to_json;\n            if (!treeNode) return null; // Пропустить узлы без данных\n\n            const label = /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${treeNode.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: treeNode.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this);\n\n            return /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: label,\n              collapsed: !openNodes[treeNode.id],\n              onClick: () => handleToggle(treeNode.id),\n              children: treeNode.Subclasses && treeNode.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 57\n                  }, this)\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 53\n                }, this),\n                collapsed: !openNodes[departments.id],\n                onClick: () => handleToggle(departments.id),\n                children: departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments1.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments1.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 65\n                    }, this)\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 61\n                  }, this),\n                  collapsed: !openNodes[departments1.id],\n                  onClick: () => handleToggle(departments1.id),\n                  children: departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 65\n                    }, this)\n                  }, departments2.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 61\n                  }, this))\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 53\n                }, this))\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 45\n              }, this))\n            }, treeNode.Name + '|' + i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"5Cftb3bdwgxv5RmnsNZtDMLcAq4=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","useParams","Sidebar","departmentId","dep","setDep","openNodes","setOpenNodes","getDeps","res","get","data","department_tree_to_json","length","initialOpenNodes","getInitialOpenNodes","error","console","openNodeRecursive","nodes","forEach","node","treeNode","id","Subclasses","some","sub","handleToggle","prevOpenNodes","map","i","label","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\nimport { useParams } from \"react-router\";\r\n\r\n\r\nconst Sidebar = () => {\r\n    const  departmentId  = '15' // Получаем входящий параметр\r\n    const [dep, setDep] = useState([]);\r\n    const [openNodes, setOpenNodes] = useState({}); // Состояние для хранения открытых узлов\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            try {\r\n                const res = await axios.get('/api/department_tree_to_json/');\r\n                if (res.data[0].department_tree_to_json.length === 0) {\r\n                    setDep([]);\r\n                } else {\r\n                    setDep(res.data);\r\n                    const initialOpenNodes = getInitialOpenNodes(res.data, departmentId);\r\n                    setOpenNodes(initialOpenNodes); // Инициализация открытых узлов\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching departments:', error);\r\n            }\r\n        };\r\n        getDeps();\r\n    }, [departmentId]);\r\n\r\n    const getInitialOpenNodes = (data, departmentId) => {\r\n        const openNodes = {};\r\n        const openNodeRecursive = (nodes) => {\r\n            nodes.forEach(node => {\r\n                const treeNode = node.department_tree_to_json;\r\n                if (treeNode) {\r\n                    if (treeNode.id === departmentId || (treeNode.Subclasses && treeNode.Subclasses.some(sub => sub.id === departmentId))) {\r\n                        openNodes[treeNode.id] = true;\r\n                    }\r\n                    if (treeNode.Subclasses) {\r\n                        openNodeRecursive(treeNode.Subclasses);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        openNodeRecursive(data);\r\n        return openNodes;\r\n    };\r\n\r\n    const handleToggle = (id) => {\r\n        setOpenNodes(prevOpenNodes => ({\r\n            ...prevOpenNodes,\r\n            [id]: !prevOpenNodes[id],\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => {\r\n                                const treeNode = node.department_tree_to_json;\r\n                                if (!treeNode) return null; // Пропустить узлы без данных\r\n\r\n                                const label = (\r\n                                    <Link to={`/department/${treeNode.id}`} className='level1'>\r\n                                        <span className=\"node\">{treeNode.Name}</span>\r\n                                    </Link>\r\n                                );\r\n\r\n                                return (\r\n                                    <TreeView\r\n                                        key={treeNode.Name + '|' + i}\r\n                                        nodeLabel={label}\r\n                                        collapsed={!openNodes[treeNode.id]}\r\n                                        onClick={() => handleToggle(treeNode.id)}\r\n                                    >\r\n                                        {treeNode.Subclasses && treeNode.Subclasses.map((departments) => (\r\n                                            <TreeView\r\n                                                nodeLabel={(\r\n                                                    <Link to={`/department/${departments.id}`} className='depsUser' key={departments.id}>\r\n                                                        <span className=\"node\">{departments.Name}</span>\r\n                                                    </Link>\r\n                                                )}\r\n                                                key={departments.id}\r\n                                                collapsed={!openNodes[departments.id]}\r\n                                                onClick={() => handleToggle(departments.id)}\r\n                                            >\r\n                                                {departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                    <TreeView\r\n                                                        nodeLabel={(\r\n                                                            <Link to={`/department/${departments1.id}`} className='depsUser' key={departments1.id}>\r\n                                                                <span className=\"node\">{departments1.Name}</span>\r\n                                                            </Link>\r\n                                                        )}\r\n                                                        key={departments1.id}\r\n                                                        collapsed={!openNodes[departments1.id]}\r\n                                                        onClick={() => handleToggle(departments1.id)}\r\n                                                    >\r\n                                                        {departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                            <Link to={`/department/${departments2.id}`} className='depsUser' key={departments2.id}>\r\n                                                                <div style={{ paddingBottom: '8px' }}>{departments2.Name}</div>\r\n                                                            </Link>\r\n                                                        ))}\r\n                                                    </TreeView>\r\n                                                ))}\r\n                                            </TreeView>\r\n                                        ))}\r\n                                    </TreeView>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}