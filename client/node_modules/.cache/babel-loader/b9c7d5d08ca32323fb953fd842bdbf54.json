{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport './Sidebar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState([]); // Загрузка всех департаментов\n\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n      setDep(res.data);\n    };\n\n    getDeps();\n  }, []);\n\n  const handleNodeClick = nodeId => {\n    const isNodeAlreadyExpanded = expandedNodes.includes(nodeId);\n\n    if (isNodeAlreadyExpanded) {\n      // Если узел уже раскрыт, закрываем его и все его дочерние узлы\n      setExpandedNodes(expandedNodes.filter(id => id !== nodeId));\n    } else {\n      // Если узел не раскрыт, добавляем его в список раскрытых узлов\n      setExpandedNodes([...expandedNodes, nodeId]);\n    }\n  };\n\n  const isNodeExpanded = nodeId => {\n    return expandedNodes.includes(nodeId);\n  };\n\n  const renderTree = node => {\n    const nodeId = node.department_tree_to_json.id;\n\n    const label = /*#__PURE__*/_jsxDEV(Link, {\n      to: `/department/${nodeId}`,\n      className: \"level1\",\n      onClick: () => handleNodeClick(nodeId),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"node\",\n        children: node.department_tree_to_json.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n\n    const isExpanded = isNodeExpanded(nodeId);\n    return /*#__PURE__*/_jsxDEV(TreeView, {\n      nodeLabel: label,\n      defaultCollapsed: !isExpanded,\n      children: node.department_tree_to_json.Subclasses.map(subNode => {\n        return renderTree(subNode);\n      })\n    }, nodeId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map(node => renderTree(node))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"ZpimOrPpLGNUPieBCqJXMYhomOs=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","useEffect","useState","Link","axios","TreeView","Sidebar","dep","setDep","expandedNodes","setExpandedNodes","getDeps","res","get","data","handleNodeClick","nodeId","isNodeAlreadyExpanded","includes","filter","id","isNodeExpanded","renderTree","node","department_tree_to_json","label","Name","isExpanded","Subclasses","map","subNode"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css';\r\nimport './Sidebar.css';\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [expandedNodes, setExpandedNodes] = useState([]);\r\n\r\n    // Загрузка всех департаментов\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            setDep(res.data);\r\n        };\r\n\r\n        getDeps();\r\n    }, []);\r\n\r\n    const handleNodeClick = (nodeId) => {\r\n        const isNodeAlreadyExpanded = expandedNodes.includes(nodeId);\r\n        if (isNodeAlreadyExpanded) {\r\n            // Если узел уже раскрыт, закрываем его и все его дочерние узлы\r\n            setExpandedNodes(expandedNodes.filter((id) => id !== nodeId));\r\n        } else {\r\n            // Если узел не раскрыт, добавляем его в список раскрытых узлов\r\n            setExpandedNodes([...expandedNodes, nodeId]);\r\n        }\r\n    };\r\n\r\n    const isNodeExpanded = (nodeId) => {\r\n        return expandedNodes.includes(nodeId);\r\n    };\r\n\r\n    const renderTree = (node) => {\r\n        const nodeId = node.department_tree_to_json.id;\r\n\r\n        const label = (\r\n            <Link to={`/department/${nodeId}`} className=\"level1\" onClick={() => handleNodeClick(nodeId)}>\r\n                <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n            </Link>\r\n        );\r\n\r\n        const isExpanded = isNodeExpanded(nodeId);\r\n\r\n        return (\r\n            <TreeView key={nodeId} nodeLabel={label} defaultCollapsed={!isExpanded}>\r\n                {node.department_tree_to_json.Subclasses.map((subNode) => {\r\n                    return renderTree(subNode);\r\n                })}\r\n            </TreeView>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebarWrapper\">\r\n                <div className=\"tree\">\r\n                    <div className=\"treeWrapper\">{dep.map((node) => renderTree(node))}</div>\r\n                </div>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}