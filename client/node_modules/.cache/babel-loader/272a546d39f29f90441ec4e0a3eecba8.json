{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localUser = JSON.parse(localStorage.getItem('user'));\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n      setDep(res.data);\n    };\n\n    getDeps();\n  }, []);\n\n  const openSubclassById = () => {\n    const deps = 17;\n    const updatedDep = dep.map(node => {\n      const updatedNode = { ...node\n      };\n      updatedNode.department_tree_to_json.Subclasses.forEach(subclass => {\n        if (subclass.id === deps) {\n          subclass.isCollapsed = false;\n        }\n      });\n      return updatedNode;\n    });\n    setDep(updatedDep);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const label = /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 33\n            }, this);\n\n            return /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: label,\n              defaultCollapsed: false,\n              children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 53\n                  }, this)\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 49\n                }, this),\n                defaultCollapsed: departments.isCollapsed,\n                onClick: () => openSubclassById(departments.id),\n                children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments1.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments1.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 75,\n                      columnNumber: 61\n                    }, this)\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 57\n                  }, this),\n                  defaultCollapsed: departments1.isCollapsed,\n                  onClick: () => openSubclassById(departments1.id),\n                  children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 61\n                    }, this)\n                  }, departments2.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 57\n                  }, this))\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 49\n                }, this))\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 41\n              }, this))\n            }, node.department_tree_to_json.Name + '|' + i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"mSPW/vQ+uKiKIAEbhbmzJOV4CzE=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","useEffect","useState","Link","axios","TreeView","localUser","JSON","parse","localStorage","getItem","Sidebar","dep","setDep","getDeps","res","get","data","openSubclassById","deps","updatedDep","map","node","updatedNode","department_tree_to_json","Subclasses","forEach","subclass","id","isCollapsed","i","label","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Sidebar.css';\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css';\r\nconst localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            setDep(res.data);\r\n        };\r\n        getDeps();\r\n    }, []);\r\n\r\n    const openSubclassById = () => {\r\n        const deps =17\r\n        const updatedDep = dep.map((node) => {\r\n            const updatedNode = { ...node };\r\n            updatedNode.department_tree_to_json.Subclasses.forEach((subclass) => {\r\n                if (subclass.id === deps) {\r\n                    subclass.isCollapsed = false;\r\n                }\r\n            });\r\n            return updatedNode;\r\n        });\r\n        setDep(updatedDep);\r\n    };\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebarWrapper\">\r\n                <div className=\"tree\">\r\n                    <div className=\"treeWrapper\">\r\n                        {dep.map((node, i) => {\r\n                            const label = (\r\n                                <Link to={`/department/${node.department_tree_to_json.id}`} className=\"level1\">\r\n                                    <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                </Link>\r\n                            );\r\n                            return (\r\n                                <TreeView\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    nodeLabel={label}\r\n                                    defaultCollapsed={false}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            nodeLabel={\r\n                                                <Link\r\n                                                    to={`/department/${departments.id}`}\r\n                                                    className=\"depsUser\"\r\n                                                    key={departments.id}\r\n                                                >\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            }\r\n                                            key={departments.id}\r\n                                            defaultCollapsed={departments.isCollapsed}\r\n                                            onClick={() => openSubclassById(departments.id)}\r\n                                        >\r\n                                            {!!departments.Subclasses &&\r\n                                            departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    nodeLabel={\r\n                                                        <Link\r\n                                                            to={`/department/${departments1.id}`}\r\n                                                            className=\"depsUser\"\r\n                                                            key={departments1.id}\r\n                                                        >\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    }\r\n                                                    key={departments1.id}\r\n                                                    defaultCollapsed={departments1.isCollapsed}\r\n                                                    onClick={() => openSubclassById(departments1.id)}\r\n                                                >\r\n                                                    {!!departments1.Subclasses &&\r\n                                                    departments1.Subclasses.map((departments2) => (\r\n                                                        <Link\r\n                                                            to={`/department/${departments2.id}`}\r\n                                                            className=\"depsUser\"\r\n                                                            key={departments2.id}\r\n                                                        >\r\n                                                            <div style={{ paddingBottom: '8px' }}>\r\n                                                                {departments2.Name}\r\n                                                            </div>\r\n                                                        </Link>\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}