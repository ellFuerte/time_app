{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = ({\n  deps,\n  targetDepartmentId\n}) => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState([]);\n  useEffect(() => {\n    const hasId = obj => obj && obj.id;\n\n    const hasSubclasses = obj => obj && obj.Subclasses && obj.Subclasses.length > 0;\n\n    const shouldExpandNode = node => hasId(node.department_tree_to_json) && (node.department_tree_to_json.id === targetDepartmentId || hasSubclasses(node.department_tree_to_json) && node.department_tree_to_json.Subclasses.some(sub => shouldExpandNode(sub))); // загрузка всех департаментов\n\n\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n\n      if (res.data[0].department_tree_to_json.length === 0) {\n        setDep([]);\n      } else {\n        setDep(res.data);\n      }\n    };\n\n    const initialExpandedNodes = dep.reduce((acc, node) => {\n      if (shouldExpandNode(node)) {\n        acc.push(node.department_tree_to_json.id);\n      }\n\n      return acc;\n    }, []);\n    setExpandedNodes(initialExpandedNodes);\n    getDeps();\n  }, [dep, targetDepartmentId]);\n\n  const handleNodeClick = nodeId => {\n    setExpandedNodes(prevExpandedNodes => {\n      if (prevExpandedNodes.includes(nodeId)) {\n        return prevExpandedNodes.filter(id => id !== nodeId);\n      } else {\n        return [...prevExpandedNodes, nodeId];\n      }\n    });\n  };\n\n  const renderTree = node => {\n    const isExpanded = expandedNodes.includes(node.department_tree_to_json.id);\n    return /*#__PURE__*/_jsxDEV(TreeView, {\n      nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/department/${node.department_tree_to_json.id}`,\n        className: \"level1\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node\",\n          children: node.department_tree_to_json.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this),\n      defaultCollapsed: !isExpanded,\n      onClick: () => handleNodeClick(node.department_tree_to_json.id),\n      children: node.department_tree_to_json.Subclasses && node.department_tree_to_json.Subclasses.map(sub => renderTree(sub))\n    }, node.department_tree_to_json.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map(node => renderTree(node))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"ZpimOrPpLGNUPieBCqJXMYhomOs=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","deps","targetDepartmentId","dep","setDep","expandedNodes","setExpandedNodes","hasId","obj","id","hasSubclasses","Subclasses","length","shouldExpandNode","node","department_tree_to_json","some","sub","getDeps","res","get","data","initialExpandedNodes","reduce","acc","push","handleNodeClick","nodeId","prevExpandedNodes","includes","filter","renderTree","isExpanded","Name","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\nconst Sidebar = ({deps,targetDepartmentId }) => {\r\n\r\n    const [dep, setDep] = useState([])\r\n    const [expandedNodes, setExpandedNodes] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const hasId = (obj) => obj && obj.id;\r\n        const hasSubclasses = (obj) => obj && obj.Subclasses && obj.Subclasses.length > 0;\r\n\r\n        const shouldExpandNode = (node) => hasId(node.department_tree_to_json) && (\r\n            node.department_tree_to_json.id === targetDepartmentId ||\r\n            (hasSubclasses(node.department_tree_to_json) && node.department_tree_to_json.Subclasses.some(sub => shouldExpandNode(sub)))\r\n        );\r\n// загрузка всех департаментов\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/')\r\n            if(res.data[0].department_tree_to_json.length===0){\r\n                setDep([])\r\n            }else {\r\n                setDep(res.data)\r\n            }\r\n        }\r\n        const initialExpandedNodes = dep.reduce((acc, node) => {\r\n            if (shouldExpandNode(node)) {\r\n                acc.push(node.department_tree_to_json.id);\r\n            }\r\n            return acc;\r\n        }, []);\r\n        setExpandedNodes(initialExpandedNodes);\r\n        getDeps()\r\n    }, [dep, targetDepartmentId])\r\n\r\n    const handleNodeClick = (nodeId) => {\r\n        setExpandedNodes((prevExpandedNodes) => {\r\n            if (prevExpandedNodes.includes(nodeId)) {\r\n                return prevExpandedNodes.filter(id => id !== nodeId);\r\n            } else {\r\n                return [...prevExpandedNodes, nodeId];\r\n            }\r\n        });\r\n    };\r\n\r\n    const renderTree = (node) => {\r\n        const isExpanded = expandedNodes.includes(node.department_tree_to_json.id);\r\n        return (\r\n            <TreeView\r\n                key={node.department_tree_to_json.id}\r\n                nodeLabel={\r\n                    <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                        <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                    </Link>\r\n                }\r\n                defaultCollapsed={!isExpanded}\r\n                onClick={() => handleNodeClick(node.department_tree_to_json.id)}\r\n            >\r\n                {node.department_tree_to_json.Subclasses &&\r\n                node.department_tree_to_json.Subclasses.map(sub => renderTree(sub))}\r\n            </TreeView>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                <div className=\"tree\">\r\n                    <div className=\"treeWrapper\">\r\n                        {dep.map(node => renderTree(node))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}