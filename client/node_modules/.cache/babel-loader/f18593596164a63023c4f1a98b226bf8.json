{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [openNodes, setOpenNodes] = useState([]);\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n      console.log('log=', res.data[0].department_tree_to_json);\n\n      if (res.data[0].department_tree_to_json.length === 0) {\n        setDep([]);\n      } else {\n        setDep(res.data); // Находим id, до которого нужно открыть уровни\n\n        const targetId = 7; // Это можно получить из URL или другого источника\n        // Функция для открытия всех родительских узлов до указанного id\n\n        const openNodesUntilTarget = (tree, targetId) => {\n          let openNodes = [];\n\n          const findAndOpenNode = (node, targetId) => {\n            console.log('node.department_tree_to_json.id=', node.department_tree_to_json.id);\n\n            if (node.department_tree_to_json.id === targetId) {\n              openNodes.push(node.department_tree_to_json.id);\n              return true;\n            }\n\n            for (let child of node.department_tree_to_json.Subclasses || []) {\n              if (findAndOpenNode(child, targetId)) {\n                openNodes.push(node.department_tree_to_json.id);\n                return true;\n              }\n            }\n\n            return false;\n          };\n\n          for (let node of tree) {\n            findAndOpenNode(node, targetId);\n          }\n\n          return openNodes;\n        };\n\n        setOpenNodes(openNodesUntilTarget(res.data, targetId));\n      }\n    };\n\n    getDeps();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => /*#__PURE__*/_jsxDEV(TreeView, {\n            nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this),\n            defaultCollapsed: !openNodes.includes(node.department_tree_to_json.id),\n            children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${departments.id}`,\n                className: \"depsUser\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: departments.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 49\n              }, this),\n              defaultCollapsed: !openNodes.includes(departments.id),\n              children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments1.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments1.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 57\n                }, this),\n                defaultCollapsed: !openNodes.includes(departments1.id),\n                children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 69\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 65\n                  }, this),\n                  defaultCollapsed: !openNodes.includes(departments2.id)\n                }, departments2.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 57\n                }, this))\n              }, departments1.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 49\n              }, this))\n            }, departments.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 41\n            }, this))\n          }, node.department_tree_to_json.Name + '|' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"d7g2+aKK1qbBQngv3JMF1xmhkuM=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","openNodes","setOpenNodes","getDeps","res","get","console","log","data","department_tree_to_json","length","targetId","openNodesUntilTarget","tree","findAndOpenNode","node","id","push","child","Subclasses","map","i","Name","includes","departments","departments1","departments2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [openNodes, setOpenNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            console.log('log=',res.data[0].department_tree_to_json)\r\n            if (res.data[0].department_tree_to_json.length === 0) {\r\n                setDep([]);\r\n            } else {\r\n                setDep(res.data);\r\n\r\n                // Находим id, до которого нужно открыть уровни\r\n                const targetId = 7; // Это можно получить из URL или другого источника\r\n\r\n                // Функция для открытия всех родительских узлов до указанного id\r\n                const openNodesUntilTarget = (tree, targetId) => {\r\n                    let openNodes = [];\r\n\r\n                    const findAndOpenNode = (node, targetId) => {\r\n                        console.log('node.department_tree_to_json.id=',node.department_tree_to_json.id)\r\n                        if (node.department_tree_to_json.id === targetId) {\r\n                            openNodes.push(node.department_tree_to_json.id);\r\n                            return true;\r\n                        }\r\n\r\n\r\n                        for (let child of node.department_tree_to_json.Subclasses || []) {\r\n                            if (findAndOpenNode(child, targetId)) {\r\n                                openNodes.push(node.department_tree_to_json.id);\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    for (let node of tree) {\r\n                        findAndOpenNode(node, targetId);\r\n                    }\r\n\r\n                    return openNodes;\r\n                };\r\n\r\n                setOpenNodes(openNodesUntilTarget(res.data, targetId));\r\n            }\r\n        };\r\n\r\n        getDeps();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => (\r\n                                <TreeView\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    nodeLabel={(\r\n                                        <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                            <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                        </Link>\r\n                                    )}\r\n                                    defaultCollapsed={!openNodes.includes(node.department_tree_to_json.id)}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            key={departments.id}\r\n                                            nodeLabel={(\r\n                                                <Link to={`/department/${departments.id}`} className='depsUser'>\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            )}\r\n                                            defaultCollapsed={!openNodes.includes(departments.id)}\r\n                                        >\r\n                                            {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    key={departments1.id}\r\n                                                    nodeLabel={(\r\n                                                        <Link to={`/department/${departments1.id}`} className='depsUser'>\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    )}\r\n                                                    defaultCollapsed={!openNodes.includes(departments1.id)}\r\n                                                >\r\n                                                    {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                        <TreeView\r\n                                                            key={departments2.id}\r\n                                                            nodeLabel={(\r\n                                                                <Link to={`/department/${departments2.id}`} className='depsUser'>\r\n                                                                    <span className=\"node\">{departments2.Name}</span>\r\n                                                                </Link>\r\n                                                            )}\r\n                                                            defaultCollapsed={!openNodes.includes(departments2.id)}\r\n                                                        />\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}