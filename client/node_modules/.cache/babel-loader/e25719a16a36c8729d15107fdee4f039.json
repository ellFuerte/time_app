{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\pages\\\\ReportsHistory\\\\ReportsHistory.jsx\",\n    _s = $RefreshSig$();\n\nimport Topbar from \"../../components/Topbar/Topbar\";\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport RepostsInfo from \"../../components/ReportsInfo/RepostsInfo\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReportsHistory() {\n  _s();\n\n  const [sortConfig, setSortConfig] = useState({\n    key: 'user_name',\n    direction: 'ascending'\n  });\n  const [sortConfig1, setSortConfig1] = useState({\n    key: 'workstart',\n    direction: 'ascending'\n  });\n  const [sortConfig2, setSortConfig2] = useState({\n    key: 'workend',\n    direction: 'ascending'\n  });\n  const [sortConfig3, setSortConfig3] = useState({\n    key: 'worklong',\n    direction: 'ascending'\n  });\n  const [sortConfig4, setSortConfig4] = useState({\n    key: 'comment',\n    direction: 'ascending'\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(30);\n  const lastPostIndex = currentPage * postsPerPage;\n  const firstPostIndex = lastPostIndex - postsPerPage;\n  const [isOpen, setIsOpen] = useState(false);\n  const [error, setError] = useState('');\n  const historyStartWork = useRef(null);\n  const historyEndWork = useRef(null);\n  const [isFilter, setIsFilter] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const currentlyPosts = posts.slice(firstPostIndex, lastPostIndex);\n  const username = useParams();\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  const handleClick = async () => {\n    const start = historyStartWork.current.value;\n    const end = historyEndWork.current.value;\n\n    if (start === \"\" || end === \"\") {\n      setError('Введите дату');\n    } else {\n      if (start !== '' || end !== '') {\n        setError('Выберите дату');\n      }\n\n      if (end < start) {\n        setError('Конечная дата меньше начальной');\n      } else {\n        const filter = {\n          startdate: historyStartWork.current.value,\n          enddate: historyEndWork.current.value\n        };\n        setError('');\n\n        const fill = async () => {\n          const res = await axios.post('/api/post/Reports', filter);\n          setPosts(res.data);\n          setError('');\n          setIsOpen(true);\n        };\n\n        fill();\n      }\n    }\n  };\n\n  const handleClickCancel = async () => {\n    setError('');\n    setIsFilter(false);\n    historyStartWork.current.value = '';\n    historyEndWork.current.value = '';\n  };\n\n  const requestSort = key => {\n    if (historyStartWork.current.value !== '' && historyEndWork.current.value !== '') {\n      let direction = 'ascending';\n\n      if (sortConfig.key === key && sortConfig.direction === 'ascending' || sortConfig1.key === key && sortConfig1.direction === 'ascending' || sortConfig2.key === key && sortConfig2.direction === 'ascending' || sortConfig3.key === key && sortConfig3.direction === 'ascending' || sortConfig4.key === key && sortConfig4.direction === 'ascending') {\n        direction = 'descending';\n      }\n\n      setSortConfig({\n        key,\n        direction\n      });\n      setSortConfig1({\n        key,\n        direction\n      });\n      setSortConfig2({\n        key,\n        direction\n      });\n      setSortConfig3({\n        key,\n        direction\n      });\n      setSortConfig4({\n        key,\n        direction\n      });\n    }\n  };\n\n  const sortedPosts = useMemo(() => {\n    const sortablePosts = [...posts];\n\n    if (sortConfig !== null) {\n      sortablePosts.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n\n        return 0;\n      });\n    }\n\n    return sortablePosts;\n  }, [posts, sortConfig]);\n  const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Reports\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ReportsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"ReportsMainText\",\n          children: \"\\u041E\\u0442\\u0447\\u0435\\u0442 \\u043F\\u043E \\u0438\\u0441\\u0442\\u043E\\u0440\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"errorHistoryInfo\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          placeholder: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\",\n          className: \"ModalInput\",\n          ref: historyStartWork,\n          style: {\n            'marginRight': '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          placeholder: \"\\u041A\\u043E\\u043D\\u0435\\u0446 \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\",\n          className: \"ModalInput\",\n          ref: historyEndWork,\n          style: {\n            'marginRight': '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filterButton\",\n          onClick: handleClick,\n          children: \"\\u043E\\u043A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filterButton\",\n          onClick: handleClickCancel,\n          children: \"\\u0441\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"historyinfoNumber\",\n            onClick: () => requestSort('user_name'),\n            children: [\"\\u0424\\u0418\\u041E \", sortConfig.key === 'user_name' && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"user_name\",\n              children: sortConfig.direction === 'ascending' ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"historyinfoNumber\",\n            onClick: () => requestSort('workstart'),\n            children: [\"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \", sortConfig1.key === 'workstart' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: sortConfig1.direction === 'ascending' ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"historyinfoNumber\",\n            onClick: () => requestSort('workend'),\n            children: [\"\\u041A\\u043E\\u043D\\u0435\\u0446 \", sortConfig2.key === 'workend' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: sortConfig2.direction === 'ascending' ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"historyinfoNumber\",\n            onClick: () => requestSort('worklong'),\n            children: [\"\\u0414\\u043B\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \", sortConfig3.key === 'worklong' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: sortConfig3.direction === 'ascending' ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"historyinfoNumber\",\n            onClick: () => requestSort('comment'),\n            children: [\"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439 \", sortConfig4.key === 'comment' && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: sortConfig4.direction === 'ascending' ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), currentPosts.map((posts, id) => /*#__PURE__*/_jsxDEV(RepostsInfo, {\n          posts: posts,\n          username: username\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 57\n        }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n          postsPerPage: postsPerPage,\n          totalPosts: posts.length,\n          paginate: paginate,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ReportsHistory, \"CynEG7OXBhGCzf9moDK7hx6tBzs=\", false, function () {\n  return [useParams];\n});\n\n_c = ReportsHistory;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReportsHistory\");","map":{"version":3,"sources":["D:/time_app/client/src/pages/ReportsHistory/ReportsHistory.jsx"],"names":["Topbar","React","useMemo","useRef","useState","useParams","axios","RepostsInfo","Pagination","ReportsHistory","sortConfig","setSortConfig","key","direction","sortConfig1","setSortConfig1","sortConfig2","setSortConfig2","sortConfig3","setSortConfig3","sortConfig4","setSortConfig4","currentPage","setCurrentPage","postsPerPage","lastPostIndex","firstPostIndex","isOpen","setIsOpen","error","setError","historyStartWork","historyEndWork","isFilter","setIsFilter","posts","setPosts","currentlyPosts","slice","username","indexOfLastPost","indexOfFirstPost","paginate","pageNumber","handleClick","start","current","value","end","filter","startdate","enddate","fill","res","post","data","handleClickCancel","requestSort","sortedPosts","sortablePosts","sort","a","b","currentPosts","map","id","length"],"mappings":"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","sourcesContent":["import Topbar from \"../../components/Topbar/Topbar\";\r\n\r\nimport React, {useMemo, useRef, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport RepostsInfo from \"../../components/ReportsInfo/RepostsInfo\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\n\r\nexport default function ReportsHistory() {\r\n    const [sortConfig, setSortConfig] = useState({ key: 'user_name', direction: 'ascending' });\r\n    const [sortConfig1, setSortConfig1] = useState({ key: 'workstart', direction: 'ascending' });\r\n    const [sortConfig2, setSortConfig2] = useState({ key: 'workend', direction: 'ascending' });\r\n    const [sortConfig3, setSortConfig3] = useState({ key: 'worklong', direction: 'ascending' });\r\n    const [sortConfig4, setSortConfig4] = useState({ key: 'comment', direction: 'ascending' });\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postsPerPage] = useState(30)\r\n\r\n    const lastPostIndex = currentPage * postsPerPage\r\n    const firstPostIndex = lastPostIndex - postsPerPage\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const historyStartWork = useRef(null)\r\n    const historyEndWork = useRef(null)\r\n    const [isFilter, setIsFilter] = useState(false)\r\n    const [posts, setPosts] = useState([])\r\n    const currentlyPosts = posts.slice(firstPostIndex, lastPostIndex)\r\n    const username = useParams()\r\n\r\n\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber)\r\n\r\n\r\n    const handleClick = async () => {\r\n        const start = historyStartWork.current.value\r\n        const end = historyEndWork.current.value\r\n        if (start === \"\" || end === \"\") {\r\n            setError('Введите дату')\r\n        } else {\r\n            if (start !== '' || end !== '') {\r\n                setError('Выберите дату')\r\n            }\r\n            if (end < start) {\r\n                setError('Конечная дата меньше начальной')\r\n            } else {\r\n\r\n                const filter = {\r\n                    startdate: historyStartWork.current.value,\r\n                    enddate: historyEndWork.current.value,\r\n                }\r\n                setError('')\r\n\r\n                const fill = async () => {\r\n                    const res = await axios.post('/api/post/Reports', filter)\r\n                    setPosts(res.data)\r\n                    setError('')\r\n                    setIsOpen(true)\r\n                }\r\n                fill()\r\n            }\r\n        }\r\n    }\r\n    const handleClickCancel = async () => {\r\n        setError('')\r\n        setIsFilter(false)\r\n        historyStartWork.current.value = ''\r\n        historyEndWork.current.value = ''\r\n    }\r\n\r\n\r\n    const requestSort = (key) => {\r\n        if (historyStartWork.current.value !== '' && historyEndWork.current.value !== '') {\r\n            let direction = 'ascending';\r\n            if (sortConfig.key === key && sortConfig.direction === 'ascending' ||\r\n                sortConfig1.key === key && sortConfig1.direction === 'ascending' ||\r\n                sortConfig2.key === key && sortConfig2.direction === 'ascending' ||\r\n                sortConfig3.key === key && sortConfig3.direction === 'ascending' ||\r\n                sortConfig4.key === key && sortConfig4.direction === 'ascending'\r\n            ) {\r\n                direction = 'descending';\r\n            }\r\n            setSortConfig({ key, direction });\r\n            setSortConfig1({ key, direction });\r\n            setSortConfig2({ key, direction });\r\n            setSortConfig3({ key, direction });\r\n            setSortConfig4({ key, direction });\r\n        }\r\n    }\r\n\r\n    const sortedPosts = useMemo(() => {\r\n        const sortablePosts = [...posts];\r\n        if (sortConfig !== null) {\r\n            sortablePosts.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortablePosts;\r\n    }, [posts, sortConfig]);\r\n\r\n    const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    return (\r\n        <>\r\n            <Topbar/>\r\n            <div className='Reports'>\r\n                <div className=\"ReportsContainer\">\r\n                    <h2 className='ReportsMainText'>Отчет по истории</h2>\r\n\r\n                    <hr/>\r\n                    {error && <div className='errorHistoryInfo'>{error}</div>}\r\n                    <br/>\r\n                    <input\r\n                        type='date'\r\n                        placeholder=\"Начало работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyStartWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    />\r\n                    <input\r\n                        type='date'\r\n                        placeholder=\"Конец работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyEndWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    />\r\n                    <button className=\"filterButton\" onClick={handleClick}>ок</button>\r\n                    <button className=\"filterButton\" onClick={handleClickCancel}>сбросить</button>\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n                    <br/>\r\n                    <tr>\r\n\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('user_name')}>\r\n                            ФИО {sortConfig.key === 'user_name' && (\r\n                            <span className='user_name'>{sortConfig.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('workstart')}>\r\n                            Начало {sortConfig1.key === 'workstart' && (\r\n                            <span>{sortConfig1.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('workend')}>\r\n                            Конец {sortConfig2.key === 'workend' && (\r\n                            <span>{sortConfig2.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('worklong')}>\r\n                            Длительность {sortConfig3.key === 'worklong' && (\r\n                            <span>{sortConfig3.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('comment')}>\r\n                            Комментарий {sortConfig4.key === 'comment' && (\r\n                            <span>{sortConfig4.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        currentPosts.map((posts, id) => <RepostsInfo key={id} posts={posts} username={username}/>)\r\n                    }\r\n\r\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}\r\n                                currentPage={currentPage}/>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}