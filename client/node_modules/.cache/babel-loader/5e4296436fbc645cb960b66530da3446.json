{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState([]); // ID департамента, который должен быть открыт по умолчанию\n\n  const idDepartament = 17; // Загрузка всех департаментов\n\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n      setDep(res.data); // Открываем узел с нужным ID при загрузке\n\n      setExpandedNodes([idDepartament.toString()]);\n    };\n\n    getDeps();\n  }, []);\n\n  const handleNodeToggle = nodeId => {\n    if (expandedNodes.includes(nodeId)) {\n      setExpandedNodes(expandedNodes.filter(id => id !== nodeId));\n    } else {\n      setExpandedNodes([...expandedNodes, nodeId]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const isExpanded = expandedNodes.includes(node.department_tree_to_json.id.toString());\n\n            const label = /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this);\n\n            return /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: label,\n              collapsed: !isExpanded,\n              onClick: () => handleNodeToggle(node.department_tree_to_json.id.toString()),\n              children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 53\n                  }, this)\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 49\n                }, this),\n                defaultCollapsed: true,\n                children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments1.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments1.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 82,\n                      columnNumber: 61\n                    }, this)\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 57\n                  }, this),\n                  defaultCollapsed: true,\n                  children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 61\n                    }, this)\n                  }, departments2.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 57\n                  }, this))\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 49\n                }, this))\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 41\n              }, this))\n            }, node.department_tree_to_json.Name + '|' + i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"ZpimOrPpLGNUPieBCqJXMYhomOs=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","useEffect","useState","Link","axios","TreeView","Sidebar","dep","setDep","expandedNodes","setExpandedNodes","idDepartament","getDeps","res","get","data","toString","handleNodeToggle","nodeId","includes","filter","id","map","node","i","isExpanded","department_tree_to_json","label","Name","Subclasses","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './Sidebar.css';\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css';\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [expandedNodes, setExpandedNodes] = useState([]);\r\n\r\n    // ID департамента, который должен быть открыт по умолчанию\r\n    const idDepartament = 17;\r\n\r\n    // Загрузка всех департаментов\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            setDep(res.data);\r\n\r\n            // Открываем узел с нужным ID при загрузке\r\n            setExpandedNodes([idDepartament.toString()]);\r\n        };\r\n\r\n        getDeps();\r\n    }, []);\r\n\r\n    const handleNodeToggle = (nodeId) => {\r\n        if (expandedNodes.includes(nodeId)) {\r\n            setExpandedNodes(expandedNodes.filter((id) => id !== nodeId));\r\n        } else {\r\n            setExpandedNodes([...expandedNodes, nodeId]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebarWrapper\">\r\n                <div className=\"tree\">\r\n                    <div className=\"treeWrapper\">\r\n                        {dep.map((node, i) => {\r\n                            const isExpanded = expandedNodes.includes(node.department_tree_to_json.id.toString());\r\n                            const label = (\r\n                                <Link\r\n                                    to={`/department/${node.department_tree_to_json.id}`}\r\n                                    className=\"level1\"\r\n                                >\r\n                                    <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                </Link>\r\n                            );\r\n\r\n                            return (\r\n                                <TreeView\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    nodeLabel={label}\r\n                                    collapsed={!isExpanded}\r\n                                    onClick={() => handleNodeToggle(node.department_tree_to_json.id.toString())}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            nodeLabel={(\r\n                                                <Link\r\n                                                    to={`/department/${departments.id}`}\r\n                                                    className=\"depsUser\"\r\n                                                    key={departments.id}\r\n                                                >\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            )}\r\n                                            key={departments.id}\r\n                                            defaultCollapsed={true}\r\n                                        >\r\n                                            {!!departments.Subclasses &&\r\n                                            departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    nodeLabel={(\r\n                                                        <Link\r\n                                                            to={`/department/${departments1.id}`}\r\n                                                            className=\"depsUser\"\r\n                                                            key={departments1.id}\r\n                                                        >\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    )}\r\n                                                    key={departments1.id}\r\n                                                    defaultCollapsed={true}\r\n                                                >\r\n                                                    {!!departments1.Subclasses &&\r\n                                                    departments1.Subclasses.map((departments2) => (\r\n                                                        <Link\r\n                                                            to={`/department/${departments2.id}`}\r\n                                                            className=\"depsUser\"\r\n                                                            key={departments2.id}\r\n                                                        >\r\n                                                            <div style={{ paddingBottom: '8px' }}>\r\n                                                                {departments2.Name}\r\n                                                            </div>\r\n                                                        </Link>\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}