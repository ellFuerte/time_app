{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [openedNodes, setOpenedNodes] = useState({});\n  useEffect(() => {\n    const getDeps = async () => {\n      try {\n        const res = await axios.get('/api/department_tree_to_json/');\n\n        if (res.data && res.data.length > 0) {\n          setDep(res.data); // Инициализируем открытые узлы\n\n          let initialOpenedNodes = {};\n          res.data.forEach(node => {\n            initialOpenedNodes[node.department_tree_to_json.id] = true; // Установим, что все узлы открыты изначально\n\n            node.department_tree_to_json.Subclasses.forEach(department => {\n              initialOpenedNodes[department.id] = true;\n\n              if (department.Subclasses) {\n                department.Subclasses.forEach(subdepartment => {\n                  initialOpenedNodes[subdepartment.id] = true;\n                });\n              }\n            });\n          });\n          setOpenedNodes(initialOpenedNodes);\n        } else {\n          setDep([]);\n        }\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n\n    getDeps();\n  }, []); // Пустой массив зависимостей означает, что useEffect будет вызываться только при монтировании компонента\n\n  const handleNodeClick = nodeId => {\n    const updatedNodes = { ...openedNodes\n    };\n    updatedNodes[nodeId] = !openedNodes[nodeId];\n    setOpenedNodes(updatedNodes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => {\n            const label = /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this);\n\n            return /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: label,\n              defaultCollapsed: !openedNodes[node.department_tree_to_json.id],\n              onClick: () => handleNodeClick(node.department_tree_to_json.id),\n              children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 57\n                  }, this)\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 53\n                }, this),\n                defaultCollapsed: !openedNodes[departments.id],\n                onClick: () => handleNodeClick(departments.id),\n                children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments1.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments1.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 86,\n                      columnNumber: 65\n                    }, this)\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 61\n                  }, this),\n                  defaultCollapsed: !openedNodes[departments1.id],\n                  onClick: () => handleNodeClick(departments1.id),\n                  children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        paddingBottom: '8px'\n                      },\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 65\n                    }, this)\n                  }, departments2.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 61\n                  }, this))\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 53\n                }, this))\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 45\n              }, this))\n            }, `${node.department_tree_to_json.Name}|${i}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"Y9j+hxTExfcR+k1oT8aQPG9SKts=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","openedNodes","setOpenedNodes","getDeps","res","get","data","length","initialOpenedNodes","forEach","node","department_tree_to_json","id","Subclasses","department","subdepartment","error","console","handleNodeClick","nodeId","updatedNodes","map","i","label","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [openedNodes, setOpenedNodes] = useState({});\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            try {\r\n                const res = await axios.get('/api/department_tree_to_json/');\r\n                if (res.data && res.data.length > 0) {\r\n                    setDep(res.data);\r\n\r\n                    // Инициализируем открытые узлы\r\n                    let initialOpenedNodes = {};\r\n                    res.data.forEach(node => {\r\n                        initialOpenedNodes[node.department_tree_to_json.id] = true; // Установим, что все узлы открыты изначально\r\n                        node.department_tree_to_json.Subclasses.forEach(department => {\r\n                            initialOpenedNodes[department.id] = true;\r\n                            if (department.Subclasses) {\r\n                                department.Subclasses.forEach(subdepartment => {\r\n                                    initialOpenedNodes[subdepartment.id] = true;\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                    setOpenedNodes(initialOpenedNodes);\r\n                } else {\r\n                    setDep([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching departments:', error);\r\n            }\r\n        };\r\n\r\n        getDeps();\r\n    }, []); // Пустой массив зависимостей означает, что useEffect будет вызываться только при монтировании компонента\r\n\r\n    const handleNodeClick = (nodeId) => {\r\n        const updatedNodes = { ...openedNodes };\r\n        updatedNodes[nodeId] = !openedNodes[nodeId];\r\n        setOpenedNodes(updatedNodes);\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => {\r\n                                const label = (\r\n                                    <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                        <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                    </Link>\r\n                                );\r\n\r\n                                return (\r\n                                    <TreeView\r\n                                        key={`${node.department_tree_to_json.Name}|${i}`}\r\n                                        nodeLabel={label}\r\n                                        defaultCollapsed={!openedNodes[node.department_tree_to_json.id]}\r\n                                        onClick={() => handleNodeClick(node.department_tree_to_json.id)}\r\n                                    >\r\n                                        {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                            <TreeView\r\n                                                nodeLabel={(\r\n                                                    <Link to={`/department/${departments.id}`} className='depsUser' key={departments.id}>\r\n                                                        <span className=\"node\">{departments.Name}</span>\r\n                                                    </Link>\r\n                                                )}\r\n                                                key={departments.id}\r\n                                                defaultCollapsed={!openedNodes[departments.id]}\r\n                                                onClick={() => handleNodeClick(departments.id)}\r\n                                            >\r\n                                                {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                    <TreeView\r\n                                                        nodeLabel={(\r\n                                                            <Link to={`/department/${departments1.id}`} className='depsUser' key={departments1.id}>\r\n                                                                <span className=\"node\">{departments1.Name}</span>\r\n                                                            </Link>\r\n                                                        )}\r\n                                                        key={departments1.id}\r\n                                                        defaultCollapsed={!openedNodes[departments1.id]}\r\n                                                        onClick={() => handleNodeClick(departments1.id)}\r\n                                                    >\r\n                                                        {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                            <Link to={`/department/${departments2.id}`} className='depsUser' key={departments2.id}>\r\n                                                                <div style={{ paddingBottom: '8px' }}>{departments2.Name}</div>\r\n                                                            </Link>\r\n                                                        ))}\r\n                                                    </TreeView>\r\n                                                ))}\r\n                                            </TreeView>\r\n                                        ))}\r\n                                    </TreeView>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}