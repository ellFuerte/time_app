{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [openNodes, setOpenNodes] = useState([]);\n  useEffect(() => {\n    const getDeps = async () => {\n      try {\n        const res = await axios.get('/api/department_tree_to_json/');\n\n        if (res.data && res.data.length > 0 && res.data[0].department_tree_to_json) {\n          const data = res.data[0].department_tree_to_json;\n          setDep(data); // Находим id, до которого нужно открыть уровни\n\n          const targetId = 21; // Это можно получить из URL или другого источника\n          // Функция для открытия всех родительских узлов до указанного id\n\n          const openNodesUntilTarget = (node, targetId) => {\n            let openNodes = [];\n\n            const findAndOpenNode = (node, targetId) => {\n              if (node.id === targetId) {\n                openNodes.push(node.id);\n                return true;\n              }\n\n              if (node.Subclasses && node.Subclasses.length > 0) {\n                for (let child of node.Subclasses) {\n                  if (findAndOpenNode(child, targetId)) {\n                    openNodes.push(node.id);\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            };\n\n            findAndOpenNode(node, targetId);\n            return openNodes;\n          };\n\n          setOpenNodes(openNodesUntilTarget(data, targetId));\n        } else {\n          setDep([]);\n        }\n      } catch (error) {\n        console.error('Error fetching department data:', error); // Handle error fetching data\n      }\n    };\n\n    getDeps();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => /*#__PURE__*/_jsxDEV(TreeView, {\n            nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 41\n            }, this),\n            defaultCollapsed: !openNodes.includes(node.department_tree_to_json.id),\n            children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${departments.id}`,\n                className: \"depsUser\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: departments.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 49\n              }, this),\n              defaultCollapsed: !openNodes.includes(departments.id),\n              children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments1.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments1.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 57\n                }, this),\n                defaultCollapsed: !openNodes.includes(departments1.id),\n                children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments2.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments2.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 69\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 65\n                  }, this),\n                  defaultCollapsed: !openNodes.includes(departments2.id)\n                }, departments2.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 57\n                }, this))\n              }, departments1.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 49\n              }, this))\n            }, departments.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 41\n            }, this))\n          }, node.department_tree_to_json.Name + '|' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"d7g2+aKK1qbBQngv3JMF1xmhkuM=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","openNodes","setOpenNodes","getDeps","res","get","data","length","department_tree_to_json","targetId","openNodesUntilTarget","node","findAndOpenNode","id","push","Subclasses","child","error","console","map","i","Name","includes","departments","departments1","departments2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [openNodes, setOpenNodes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            try {\r\n                const res = await axios.get('/api/department_tree_to_json/');\r\n                if (res.data && res.data.length > 0 && res.data[0].department_tree_to_json) {\r\n                    const data = res.data[0].department_tree_to_json;\r\n                    setDep(data);\r\n\r\n                    // Находим id, до которого нужно открыть уровни\r\n                    const targetId = 21; // Это можно получить из URL или другого источника\r\n\r\n                    // Функция для открытия всех родительских узлов до указанного id\r\n                    const openNodesUntilTarget = (node, targetId) => {\r\n                        let openNodes = [];\r\n\r\n                        const findAndOpenNode = (node, targetId) => {\r\n                            if (node.id === targetId) {\r\n                                openNodes.push(node.id);\r\n                                return true;\r\n                            }\r\n\r\n                            if (node.Subclasses && node.Subclasses.length > 0) {\r\n                                for (let child of node.Subclasses) {\r\n                                    if (findAndOpenNode(child, targetId)) {\r\n                                        openNodes.push(node.id);\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            return false;\r\n                        };\r\n\r\n                        findAndOpenNode(node, targetId);\r\n\r\n                        return openNodes;\r\n                    };\r\n\r\n                    setOpenNodes(openNodesUntilTarget(data, targetId));\r\n                } else {\r\n                    setDep([]);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching department data:', error);\r\n                // Handle error fetching data\r\n            }\r\n        };\r\n\r\n        getDeps();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => (\r\n                                <TreeView\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    nodeLabel={(\r\n                                        <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                            <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                        </Link>\r\n                                    )}\r\n                                    defaultCollapsed={!openNodes.includes(node.department_tree_to_json.id)}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            key={departments.id}\r\n                                            nodeLabel={(\r\n                                                <Link to={`/department/${departments.id}`} className='depsUser'>\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            )}\r\n                                            defaultCollapsed={!openNodes.includes(departments.id)}\r\n                                        >\r\n                                            {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    key={departments1.id}\r\n                                                    nodeLabel={(\r\n                                                        <Link to={`/department/${departments1.id}`} className='depsUser'>\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    )}\r\n                                                    defaultCollapsed={!openNodes.includes(departments1.id)}\r\n                                                >\r\n                                                    {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                        <TreeView\r\n                                                            key={departments2.id}\r\n                                                            nodeLabel={(\r\n                                                                <Link to={`/department/${departments2.id}`} className='depsUser'>\r\n                                                                    <span className=\"node\">{departments2.Name}</span>\r\n                                                                </Link>\r\n                                                            )}\r\n                                                            defaultCollapsed={!openNodes.includes(departments2.id)}\r\n                                                        />\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}