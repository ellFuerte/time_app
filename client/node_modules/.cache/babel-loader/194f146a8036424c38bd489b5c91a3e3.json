{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Staff\\\\Staff.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Employee from '../Employee/Employee';\nimport './Staff.css';\nimport { useParams } from 'react-router-dom';\nimport Modal from '../Templates/Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Staff() {\n  _s();\n\n  const [see_childs, setSee_child] = useState();\n  const [checked, setChecked] = useState(false);\n  const [statisticsWork, setStatisticsWork] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [UsersDep, setUsersDeps] = useState([]);\n  const [us, setUs] = useState([]);\n  const [user, setUser] = useState([]);\n  const [getUser, setGetUser] = useState([]);\n  const [deps, setDeps] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isJob, setIsJob] = useState(true);\n  const [isFetching, setIsFetching] = useState(false);\n  const [modalMain, setModalMain] = useState(false);\n  const departId = useParams().username;\n  const localUser = JSON.parse(localStorage.getItem('user'));\n  const depsId = useParams().username; // фильтр нужных департаментов\n\n  const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId);\n  let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id));\n  filterDeps.push(...currentDep);\n  useEffect(() => {\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // получение всех пользователей\n    const fetchUsers = async () => {\n      setIsFetching(true);\n      const res = await axios.get('/api/user');\n      res.data.sort((a, b) => a.user_name.localeCompare(b.user_name));\n      let filterUsers = filterUsersFoo(res.data);\n      setUsers(filterUsers);\n      setIsFetching(false);\n    }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n    //Вывод статистики для админов\n\n\n    const get_statistics_all_users = async () => {\n      if (localUser.isAdmin === true) {\n        const getUsers = {\n          id: localUser._id\n        };\n        const res = await axios.post('/api/get_statistics_all_users', getUsers);\n        console.log('res=', res.data);\n        /*                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                          let all_users = filterUsersFoo(all)\r\n                          if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                            alert('Нет не одного пользователя в работе')\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                            alert('Сегодня все в работе')\r\n                            window.location.href = `/department/${localUser.departmentId}`\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                            alert('Вчера все работали')\r\n                            window.location.href = `/department/${localUser.departmentId}`\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_today/')) {\r\n                            alert('Нет болеющих сегодня')\r\n                            window.location.href = `/department/${localUser.departmentId}`\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_yesterday')) {\r\n                            alert('Вчера не было сотрудников на больничном')\r\n                            window.location.href = `/department/${localUser.main_department}`\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                            alert('На сегодня нет сотрудников в отпуске')\r\n                            window.location.href = `/department/${localUser.main_department}`\r\n                        }\r\n                        if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                            alert('Вчера не было сотрудников в отпуске')\r\n                            window.location.href = `/department/${localUser.main_department}`\r\n                        }\r\n                        if (!!~document.location.href.indexOf('/all_users/')) {\r\n                                setIsJob(isJob)\r\n                                setStatisticsWork(all_users)\r\n                        }\r\n                        if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                            if(res.data[0].get_statistics_all_users[0]['not_working_today']===null){\r\n                              }else{\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['not_working_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                          if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                            if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null) {\r\n                              } else {\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                          if (!!~document.location.href.indexOf('/sick_today/')) {\r\n                            if(res.data[0].get_statistics_all_users[0]['sick_today']===null)\r\n                            {\r\n                              }else{\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['sick_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                          if (!!~document.location.href.indexOf('/sick_yesterday/')) {\r\n                            if(res.data[0].get_statistics_all_users[0]['sick_yesterday']===null)\r\n                            {\r\n                              }else{\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['sick_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                          if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                            if(res.data[0].get_statistics_all_users[0]['vacation_today']===null)\r\n                            {\r\n                              }else{\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['vacation_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                          if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                            if(res.data[0].get_statistics_all_users[0]['vacation_yesterday']===null)\r\n                            {\r\n                              }else{\r\n                                setIsJob(isJob)\r\n                                const sort = res.data[0].get_statistics_all_users[0]['vacation_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                setStatisticsWork(filterUsersFoo(sort))\r\n                            }\r\n                        }\r\n                    }*/\n      }\n    };\n\n    const see = async () => {\n      const user = await axios.get('/api/user/' + localUser._id);\n      setChecked(user.data.see_child);\n      setSee_child(user.data.see_child);\n    }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    const child = async () => {\n      const info = {\n        depsId: depsId\n      };\n      const addchild = await axios.post('/api/get_users_by_dep/', info);\n      const dep_users = addchild.data[0]['get_users_by_dep'];\n\n      if (dep_users === null) {\n        setUs([]);\n      } else {\n        dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        const filterUsers = filterUsersFoo(dep_users);\n        setUs(filterUsers);\n      }\n    };\n\n    if (user.main_department === departId) {\n      setUsers([]);\n    } else {\n      setGetUser([]);\n      fetchUsers();\n      setIsOpen(false);\n    }\n\n    if (departId && !isOpen) {\n      setIsJob(isJob);\n    } else {\n      setIsJob(!isJob);\n    }\n\n    child();\n    get_statistics_all_users();\n    see();\n  }, [departId]); ///////////////////////////////////////////////////////////////////////////////////////////////////\n  //Сортировка пользователей по статусам\n\n  function filterUsersFoo(users) {\n    return users.filter(user => user.status === 1).concat(users.filter(user => user.status === 2)).concat(users.filter(user => user.status === 3)).concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4)).concat(users.filter(user => user.status === 4));\n  } // добавление дочерних по checkbox\n\n\n  const clickcheckbox = async () => {\n    setChecked(!checked);\n    const info = {\n      userId: localUser._id,\n      ischeked: !checked\n    };\n    await axios.post('/api/child/', info);\n    const inf = {\n      depsId: depsId\n    };\n    const res = await axios.post('/api/get_users_by_dep/', inf);\n    const dep_users = res.data[0]['get_users_by_dep'];\n\n    if (dep_users === null) {\n      setUs([]);\n    } else {\n      dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n      let filterUsers = filterUsersFoo(dep_users);\n      setUs(filterUsers);\n    }\n\n    if (checked === true) {\n      setIsJob(!isJob);\n    }\n\n    if (!checked === false) {\n      setIsJob(isJob);\n    }\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // обновляем main department по кнопке изменить\n\n\n  const handleModalClick = async () => {\n    const add = {\n      id: localUser._id,\n      depsId: depsId\n    };\n    const res = await axios.put('/api/user', add);\n    setModalMain(false);\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // функция get_users_by_dep\n\n\n  const get_users_by_dep = async () => {\n    if (checked === true) {\n      setUs([]);\n    } else {}\n\n    if (isJob) {\n      const info = {\n        depsId: depsId\n      };\n      const res = await axios.post('/api/get_users_by_dep/', info);\n      const dep_users = res.data[0]['get_users_by_dep'];\n\n      if (dep_users === null) {} else {\n        dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        let filterUsers = filterUsersFoo(dep_users);\n        console.log('filterUsers=', filterUsers);\n        setUsersDeps(filterUsers);\n        setIsOpen(true);\n        setIsJob(!isJob);\n      }\n    }\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"staff\",\n    children: [departId && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [checked === true || !isJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = `/department/${departId}`,\n        className: \"btnStaff\",\n        children: \"\\u0421\\u043A\\u0440\\u044B\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: get_users_by_dep,\n        className: \"btnStaff\",\n        style: {\n          width: '155px'\n        },\n        children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalMain(true),\n        className: \"btnStaff\",\n        style: {\n          float: 'right'\n        },\n        children: \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u0433\\u043B\\u0430\\u0432\\u043D\\u043E\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employeeWrapper\",\n      children: [isFetching && checked === false ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isFetching\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 23\n      }, this) : users.length === 0 && getUser.length !== 0 ? '' : !!departId && !checked ? !isOpen ? users.filter(user => user.department_id === departId).map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 107\n      }, this)) : '' : '', !departId ? statisticsWork.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 56\n      }, this)) : '', checked ? us.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 48\n      }, this)) : '', !!isOpen ? UsersDep.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 52\n      }, this)) : \"\", !!getUser ? getUser.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 51\n      }, this)) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: modalMain,\n      setActive: setModalMain,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"modalLoginBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: clickcheckbox,\n            checked: checked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButton\",\n          type: \"submit\",\n          disabled: isFetching,\n          onClick: handleModalClick,\n          children: \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u0433\\u043B\\u0430\\u0432\\u043D\\u044B\\u043C \\u0434\\u0435\\u043F\\u0430\\u0440\\u0442\\u0430\\u043C\\u0435\\u043D\\u0442\\u043E\\u043C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Staff, \"sTF3Yb+fbQDsUt6GLWbO8VPgfoE=\", false, function () {\n  return [useParams, useParams];\n});\n\n_c = Staff;\n\nvar _c;\n\n$RefreshReg$(_c, \"Staff\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Staff/Staff.jsx"],"names":["useEffect","useState","axios","Employee","useParams","Modal","Staff","see_childs","setSee_child","checked","setChecked","statisticsWork","setStatisticsWork","users","setUsers","UsersDep","setUsersDeps","us","setUs","user","setUser","getUser","setGetUser","deps","setDeps","isOpen","setIsOpen","isJob","setIsJob","isFetching","setIsFetching","modalMain","setModalMain","departId","username","localUser","JSON","parse","localStorage","getItem","depsId","currentDep","filter","dep","_id","departmentId","filterDeps","find","i","dep_id","push","fetchUsers","res","get","data","sort","a","b","user_name","localeCompare","filterUsers","filterUsersFoo","get_statistics_all_users","isAdmin","getUsers","id","post","console","log","see","see_child","child","info","addchild","dep_users","main_department","status","concat","clickcheckbox","userId","ischeked","inf","handleModalClick","add","put","get_users_by_dep","window","location","href","width","float","length","department_id","map"],"mappings":"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","sourcesContent":["import {useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport {useParams} from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n    const [see_childs, setSee_child] = useState()\r\n    const [checked, setChecked] = useState(false)\r\n    const [statisticsWork, setStatisticsWork] = useState([])\r\n    const [users, setUsers] = useState([])\r\n    const [UsersDep, setUsersDeps] = useState([])\r\n    const [us, setUs] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [getUser, setGetUser] = useState([])\r\n    const [deps, setDeps] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isJob, setIsJob] = useState(true)\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [modalMain, setModalMain] = useState(false)\r\n    const departId = useParams().username\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const depsId = useParams().username\r\n\r\n    // фильтр нужных департаментов\r\n    const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n    let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    filterDeps.push(...currentDep)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // получение всех пользователей\r\n        const fetchUsers = async () => {\r\n            setIsFetching(true)\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(res.data)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n\r\n        }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        //Вывод статистики для админов\r\n        const get_statistics_all_users = async () => {\r\n            if (localUser.isAdmin === true) {\r\n                const getUsers = {\r\n                    id: localUser._id\r\n                }\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n                console.log('res=',res.data)\r\n                /*                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n\r\n                                let all_users = filterUsersFoo(all)\r\n\r\n                                if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                                    alert('Нет не одного пользователя в работе')\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                                    alert('Сегодня все в работе')\r\n                                    window.location.href = `/department/${localUser.departmentId}`\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                                    alert('Вчера все работали')\r\n                                    window.location.href = `/department/${localUser.departmentId}`\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_today/')) {\r\n                                    alert('Нет болеющих сегодня')\r\n                                    window.location.href = `/department/${localUser.departmentId}`\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_yesterday')) {\r\n                                    alert('Вчера не было сотрудников на больничном')\r\n                                    window.location.href = `/department/${localUser.main_department}`\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                                    alert('На сегодня нет сотрудников в отпуске')\r\n                                    window.location.href = `/department/${localUser.main_department}`\r\n                                }\r\n                                if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                                    alert('Вчера не было сотрудников в отпуске')\r\n                                    window.location.href = `/department/${localUser.main_department}`\r\n                                }\r\n                                if (!!~document.location.href.indexOf('/all_users/')) {\r\n                                        setIsJob(isJob)\r\n                                        setStatisticsWork(all_users)\r\n                                }\r\n                                if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                                    if(res.data[0].get_statistics_all_users[0]['not_working_today']===null){\r\n\r\n                                    }else{\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['not_working_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n\r\n                                if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                                    if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null) {\r\n\r\n                                    } else {\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n\r\n                                if (!!~document.location.href.indexOf('/sick_today/')) {\r\n                                    if(res.data[0].get_statistics_all_users[0]['sick_today']===null)\r\n                                    {\r\n\r\n                                    }else{\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['sick_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n\r\n                                if (!!~document.location.href.indexOf('/sick_yesterday/')) {\r\n                                    if(res.data[0].get_statistics_all_users[0]['sick_yesterday']===null)\r\n                                    {\r\n\r\n                                    }else{\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['sick_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n\r\n                                if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                                    if(res.data[0].get_statistics_all_users[0]['vacation_today']===null)\r\n                                    {\r\n\r\n                                    }else{\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['vacation_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n\r\n                                if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                                    if(res.data[0].get_statistics_all_users[0]['vacation_yesterday']===null)\r\n                                    {\r\n\r\n                                    }else{\r\n                                        setIsJob(isJob)\r\n                                        const sort = res.data[0].get_statistics_all_users[0]['vacation_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                                        setStatisticsWork(filterUsersFoo(sort))\r\n                                    }\r\n                                }\r\n                            }*/\r\n            }\r\n        }\r\n\r\n\r\n\r\n        const see = async () => {\r\n            const user = await axios.get('/api/user/' + localUser._id)\r\n            setChecked(user.data.see_child)\r\n            setSee_child(user.data.see_child)\r\n\r\n        }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const child = async () => {\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const addchild = await axios.post('/api/get_users_by_dep/', info)\r\n\r\n            const dep_users = addchild.data[0]['get_users_by_dep']\r\n            if (dep_users === null) {\r\n                setUs([])\r\n            } else {\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                const filterUsers = filterUsersFoo(dep_users)\r\n                setUs(filterUsers)\r\n            }\r\n        }\r\n\r\n        if (user.main_department === departId) {\r\n            setUsers([])\r\n\r\n        } else {\r\n            setGetUser([])\r\n            fetchUsers()\r\n            setIsOpen(false)\r\n        }\r\nif(departId && !isOpen){\r\n    setIsJob(isJob)\r\n}else{\r\n    setIsJob(!isJob)\r\n}\r\n        child()\r\n        get_statistics_all_users()\r\n        see()\r\n\r\n    }, [departId])\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Сортировка пользователей по статусам\r\n    function filterUsersFoo(users) {\r\n        return users.filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n            .concat(users.filter(user => user.status === 4))\r\n    }\r\n\r\n\r\n    // добавление дочерних по checkbox\r\n    const clickcheckbox = async () => {\r\n        setChecked(!checked);\r\n\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: !checked\r\n        };\r\n        await axios.post('/api/child/', info);\r\n\r\n        const inf = {\r\n            depsId: depsId\r\n        };\r\n        const res = await axios.post('/api/get_users_by_dep/', inf);\r\n        const dep_users = res.data[0]['get_users_by_dep'];\r\n\r\n        if (dep_users === null) {\r\n            setUs([]);\r\n        } else {\r\n            dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n            let filterUsers = filterUsersFoo(dep_users);\r\n            setUs(filterUsers);\r\n        }\r\n        if(checked===true) {\r\n            setIsJob(!isJob)\r\n        }\r\n        if(!checked===false){\r\n            setIsJob(isJob)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // обновляем main department по кнопке изменить\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: depsId\r\n        }\r\n        const res = await axios.put('/api/user', add)\r\n        setModalMain(false)\r\n\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // функция get_users_by_dep\r\n    const get_users_by_dep = async () => {\r\n    if(checked===true){\r\n        setUs([])\r\n    }else{\r\n\r\n    }\r\n        if (isJob) {\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(dep_users)\r\n                console.log('filterUsers=',filterUsers)\r\n                setUsersDeps(filterUsers)\r\n                setIsOpen(true)\r\n                setIsJob(!isJob)\r\n            }\r\n        }\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <div className='staff'>\r\n            {departId && <>\r\n                {checked === true || !isJob ? (\r\n                <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\">\r\n                    Скрыть дочерние\r\n                </button>\r\n            ) : (\r\n                <button onClick={get_users_by_dep} className=\"btnStaff\" style={{width: '155px'}}>\r\n                    Показать дочерние\r\n                </button>\r\n            )}\r\n                <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать\r\n                    главной\r\n                </button>\r\n            </>}\r\n\r\n            <div className=\"employeeWrapper\">\r\n                {isFetching && checked===false\r\n                    ? <div className='isFetching'>Загрузка...</div>\r\n                    : users.length === 0 && getUser.length !== 0\r\n                        ? ''\r\n                        : !!departId  && !checked\r\n                            ? !isOpen\r\n                                ? users.filter(user => user.department_id === departId).map((user, id) => <Employee\r\n                                    key={id} user={user}/>)\r\n                                : ''\r\n                            : ''\r\n                }\r\n\r\n                {!departId\r\n                    ? statisticsWork.map((user, id) => <Employee key={id} user={user} />)\r\n                    :''\r\n\r\n                }\r\n\r\n\r\n                {\r\n                    checked\r\n                        ? us.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n\r\n                {\r\n                    !!isOpen\r\n                        ?\r\n                        UsersDep.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n                {\r\n                    !!getUser\r\n                        ?\r\n                        getUser.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr/>\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        {\r\n                            <input\r\n                            type='checkbox'\r\n                            onChange={clickcheckbox}\r\n                            checked={checked}\r\n                        />\r\n                        }Добавить дочерние</label>\r\n                    <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n                        Сделать главным департаментом\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}