{"ast":null,"code":"/*import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n  const [users, setUsers] = useState([])\r\n  const [user, setUser] = useState([])\r\n  const [deps, setDeps] = useState([])\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const departId = useParams().username\r\n  const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n  const [modalActive, setModalActive] = useState(false)\r\n  const [modalMain, setModalMain] = useState(false)\r\n  const changedArr = []\r\n  const [isModalFetching, setIsModalFetching] = useState(false)\r\n\r\n  for(let i=0; i<localUser.checkedDeps?.length; i++){\r\n    changedArr.push(localUser.checkedDeps[i])\r\n  }\r\n\r\n  // ставит галочки в модалке\r\n  function addChecked(deps){\r\n    for(let i=0; i < deps.length; i++){\r\n      for(let j=0; j < localUser.checkedDeps?.length; j++){\r\n        if(deps[i]._id === localUser.checkedDeps[j]){\r\n          deps[i].checked = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // фильтр нужных департаментов\r\n  const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n  let filterDeps = deps.filter(dep => currentDep[0].children.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n  filterDeps.push(...currentDep)\r\n\r\n  // фильтр нужных людей\r\n  const usersFilter = users.filter(user => filterDeps.find(f => f._id === user.departmentId))\r\n  const usersFilterDeps = users.filter(user => localUser.checkedDeps?.find(f => f === user.departmentId))\r\n  const depsFilterDeps = deps.filter(dep => localUser.checkedDeps?.find(f => f === dep._id))\r\n\r\n  const isLockDeps = localUser.checkedDeps !== null && localUser.checkedDeps?.length > 0\r\n\r\n  let addChildrenArr = []\r\n\r\n  useEffect(() => {\r\n    // получение всех пользователей\r\n    const fetchUsers = async () => {\r\n      setIsFetching(true)\r\n      const res = await axios.get('/api/users/allusers/1')\r\n      res.data.sort((a, b) => a.username.localeCompare(b.username))\r\n      let filterUsers = filterUsersFoo(res.data)\r\n      setUsers(filterUsers)\r\n      setIsFetching(false)\r\n    }\r\n\r\n    // получение данных о себе\r\n    const fetchUser = async () => {\r\n      const res = await axios.get('/api/users/'+localUser._id)\r\n      setUser(res.data)\r\n      setIsFetching(false)\r\n    }\r\n\r\n    // получение и фильтр департаментов\r\n    const getDeps = async () => {\r\n      setIsModalFetching(true)\r\n      const res = await axios.get('/api/departments/')\r\n      addChecked(res.data)\r\n\r\n      for(let i = 0; i < res.data.length-1; i++){\r\n        for(let j = i+1; j < res.data.length; j++){\r\n          if(res.data[i].children.find(k => k === res.data[j].dep_id && k !== res.data[i].dep_id)){\r\n            if(res.data[j].margin ){\r\n              res.data[j].margin += 10\r\n            } else {\r\n              res.data[j].margin = 10\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      let newArr = res.data.filter(d => d.dep_id !== 7)\r\n      newArr.push(res.data[6])\r\n\r\n      setDeps(newArr)\r\n      setIsModalFetching(false)\r\n    }\r\n\r\n    getDeps()\r\n    fetchUser()\r\n    setIsOpen(false)\r\n    fetchUsers()\r\n  }, [departId])\r\n\r\n  // фильтр пользователей по статусу\r\n  function filterUsersFoo(users){\r\n    return users.filter(user => user.status === 1)\r\n    .concat(users.filter(user => user.status === 2))\r\n    .concat(users.filter(user => user.status === 3))\r\n    .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n    .concat(users.filter(user => user.status === 4))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if(departId){\r\n      setIsOpen(true)\r\n    }else{\r\n      setModalActive(true)\r\n    }\r\n  }\r\n\r\n  // добавляем/удаляем департамент в модалке\r\n  const handlePush = e => {\r\n    if (e.target.checked) {\r\n      changedArr.push(e.target.value)\r\n    }else{\r\n      const index = changedArr.indexOf(e.target.value)\r\n      changedArr.splice(index, 1)\r\n      delete e.target.checked\r\n    }\r\n  }\r\n\r\n  // добавление дочерних\r\n  const handleAddChildren = e => {\r\n    if (e.target.checked) {\r\n      const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n      addChildrenArr = deps.filter(dep => currentDep[0].children.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    }else{\r\n      addChildrenArr = []\r\n    }\r\n  }\r\n\r\n  // обновляем данные модального окна\r\n  const handleModalClick = async (e) => {\r\n    e.preventDefault()\r\n\r\n    let newInfo\r\n\r\n    if(departId){\r\n      addChildrenArr = addChildrenArr.map(i => i._id)\r\n      newInfo= {\r\n        userId: user._id,\r\n        checkedDeps: [departId, ...addChildrenArr]\r\n      }\r\n    }else{\r\n      newInfo= {\r\n        userId: user._id,\r\n        checkedDeps: changedArr\r\n      }\r\n    }\r\n\r\n    try {\r\n      await axios.put('/api/users/'+localUser._id, newInfo)\r\n      if(user._id === localUser._id){\r\n        localStorage.setItem('user', JSON.stringify({...user, ...newInfo}))\r\n      }\r\n      window.location.reload()\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='staff'>\r\n      { !departId && <div className='changeDepsContainer'>\r\n        <div><span className='changeDeps' onClick={handleClick}>Изменить</span></div>\r\n      </div>}\r\n      {departId && <>\r\n        <button onClick={handleClick} className='btnStaff'>Показать дочерние</button>\r\n        <button onClick={() => setIsOpen(false)} className='btnStaff'>Скрыть дочерние</button>\r\n        <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать главной</button>\r\n      </>}\r\n      <div className=\"employeeWrapper\">\r\n        {isFetching\r\n          ? <div className='isFetching'>Загрузка...</div>\r\n          : users.length === 0 \r\n            ? <div className='emptyStaff'>Спиcок пуст</div> \r\n            : departId \r\n              ? !isOpen \r\n                ? users.filter(user => user.departmentId === departId).map((user, id) => <Employee key={id} user={user}/>)\r\n                : usersFilter.map((user, id) => <Employee key={id} user={user}/>)\r\n              : isLockDeps \r\n                ? usersFilterDeps.map((user, id) => <Employee key={id} user={user}/>) \r\n                : users.map((user, id) => <Employee key={id} user={user}/>) \r\n        }\r\n      </div>\r\n      <Modal active={modalActive} setActive={setModalActive}>\r\n        <h1>Изменение информации:</h1>\r\n        <hr/>\r\n        <form className=\"modalLoginBox\">\r\n          {isModalFetching \r\n            ?<div>Загрузка</div>\r\n            : deps.map((dep, id) => <label key={id} htmlFor={dep.departmentName} style={{paddingLeft: `${dep.margin}px`}}>\r\n            <input\r\n              type='checkbox'\r\n              value={dep._id}\r\n              id={dep.departmentName}\r\n              name={dep.departmentName}\r\n              onChange={handlePush}\r\n              checked={dep.checked}\r\n            />{dep.departmentName}</label>)\r\n          }\r\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n            Изменить\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n      <Modal active={modalMain} setActive={setModalMain}>\r\n        <h1>Изменение информации:</h1>\r\n        <hr/>\r\n        <form className=\"modalLoginBox\">\r\n          <label>\r\n            <input\r\n              type='checkbox'\r\n              onChange={handleAddChildren}\r\n            />Добавить дочерние</label>\r\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n            Изменить\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}*/","map":{"version":3,"sources":["D:/Download/time_app/client/src/components/Staff/Staff.jsx"],"names":[],"mappingssourcesContent":["/*import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n  const [users, setUsers] = useState([])\r\n  const [user, setUser] = useState([])\r\n  const [deps, setDeps] = useState([])\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const departId = useParams().username\r\n  const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n  const [modalActive, setModalActive] = useState(false)\r\n  const [modalMain, setModalMain] = useState(false)\r\n  const changedArr = []\r\n  const [isModalFetching, setIsModalFetching] = useState(false)\r\n\r\n  for(let i=0; i<localUser.checkedDeps?.length; i++){\r\n    changedArr.push(localUser.checkedDeps[i])\r\n  }\r\n\r\n  // ставит галочки в модалке\r\n  function addChecked(deps){\r\n    for(let i=0; i < deps.length; i++){\r\n      for(let j=0; j < localUser.checkedDeps?.length; j++){\r\n        if(deps[i]._id === localUser.checkedDeps[j]){\r\n          deps[i].checked = true\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // фильтр нужных департаментов\r\n  const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n  let filterDeps = deps.filter(dep => currentDep[0].children.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n  filterDeps.push(...currentDep)\r\n\r\n  // фильтр нужных людей\r\n  const usersFilter = users.filter(user => filterDeps.find(f => f._id === user.departmentId))\r\n  const usersFilterDeps = users.filter(user => localUser.checkedDeps?.find(f => f === user.departmentId))\r\n  const depsFilterDeps = deps.filter(dep => localUser.checkedDeps?.find(f => f === dep._id))\r\n\r\n  const isLockDeps = localUser.checkedDeps !== null && localUser.checkedDeps?.length > 0\r\n\r\n  let addChildrenArr = []\r\n\r\n  useEffect(() => {\r\n    // получение всех пользователей\r\n    const fetchUsers = async () => {\r\n      setIsFetching(true)\r\n      const res = await axios.get('/api/users/allusers/1')\r\n      res.data.sort((a, b) => a.username.localeCompare(b.username))\r\n      let filterUsers = filterUsersFoo(res.data)\r\n      setUsers(filterUsers)\r\n      setIsFetching(false)\r\n    }\r\n\r\n    // получение данных о себе\r\n    const fetchUser = async () => {\r\n      const res = await axios.get('/api/users/'+localUser._id)\r\n      setUser(res.data)\r\n      setIsFetching(false)\r\n    }\r\n\r\n    // получение и фильтр департаментов\r\n    const getDeps = async () => {\r\n      setIsModalFetching(true)\r\n      const res = await axios.get('/api/departments/')\r\n      addChecked(res.data)\r\n\r\n      for(let i = 0; i < res.data.length-1; i++){\r\n        for(let j = i+1; j < res.data.length; j++){\r\n          if(res.data[i].children.find(k => k === res.data[j].dep_id && k !== res.data[i].dep_id)){\r\n            if(res.data[j].margin ){\r\n              res.data[j].margin += 10\r\n            } else {\r\n              res.data[j].margin = 10\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      let newArr = res.data.filter(d => d.dep_id !== 7)\r\n      newArr.push(res.data[6])\r\n\r\n      setDeps(newArr)\r\n      setIsModalFetching(false)\r\n    }\r\n\r\n    getDeps()\r\n    fetchUser()\r\n    setIsOpen(false)\r\n    fetchUsers()\r\n  }, [departId])\r\n\r\n  // фильтр пользователей по статусу\r\n  function filterUsersFoo(users){\r\n    return users.filter(user => user.status === 1)\r\n    .concat(users.filter(user => user.status === 2))\r\n    .concat(users.filter(user => user.status === 3))\r\n    .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n    .concat(users.filter(user => user.status === 4))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if(departId){\r\n      setIsOpen(true)\r\n    }else{\r\n      setModalActive(true)\r\n    }\r\n  }\r\n\r\n  // добавляем/удаляем департамент в модалке\r\n  const handlePush = e => {\r\n    if (e.target.checked) {\r\n      changedArr.push(e.target.value)\r\n    }else{\r\n      const index = changedArr.indexOf(e.target.value)\r\n      changedArr.splice(index, 1)\r\n      delete e.target.checked\r\n    }\r\n  }\r\n\r\n  // добавление дочерних\r\n  const handleAddChildren = e => {\r\n    if (e.target.checked) {\r\n      const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n      addChildrenArr = deps.filter(dep => currentDep[0].children.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    }else{\r\n      addChildrenArr = []\r\n    }\r\n  }\r\n\r\n  // обновляем данные модального окна\r\n  const handleModalClick = async (e) => {\r\n    e.preventDefault()\r\n\r\n    let newInfo\r\n\r\n    if(departId){\r\n      addChildrenArr = addChildrenArr.map(i => i._id)\r\n      newInfo= {\r\n        userId: user._id,\r\n        checkedDeps: [departId, ...addChildrenArr]\r\n      }\r\n    }else{\r\n      newInfo= {\r\n        userId: user._id,\r\n        checkedDeps: changedArr\r\n      }\r\n    }\r\n\r\n    try {\r\n      await axios.put('/api/users/'+localUser._id, newInfo)\r\n      if(user._id === localUser._id){\r\n        localStorage.setItem('user', JSON.stringify({...user, ...newInfo}))\r\n      }\r\n      window.location.reload()\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='staff'>\r\n      { !departId && <div className='changeDepsContainer'>\r\n        <div><span className='changeDeps' onClick={handleClick}>Изменить</span></div>\r\n      </div>}\r\n      {departId && <>\r\n        <button onClick={handleClick} className='btnStaff'>Показать дочерние</button>\r\n        <button onClick={() => setIsOpen(false)} className='btnStaff'>Скрыть дочерние</button>\r\n        <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать главной</button>\r\n      </>}\r\n      <div className=\"employeeWrapper\">\r\n        {isFetching\r\n          ? <div className='isFetching'>Загрузка...</div>\r\n          : users.length === 0 \r\n            ? <div className='emptyStaff'>Спиcок пуст</div> \r\n            : departId \r\n              ? !isOpen \r\n                ? users.filter(user => user.departmentId === departId).map((user, id) => <Employee key={id} user={user}/>)\r\n                : usersFilter.map((user, id) => <Employee key={id} user={user}/>)\r\n              : isLockDeps \r\n                ? usersFilterDeps.map((user, id) => <Employee key={id} user={user}/>) \r\n                : users.map((user, id) => <Employee key={id} user={user}/>) \r\n        }\r\n      </div>\r\n      <Modal active={modalActive} setActive={setModalActive}>\r\n        <h1>Изменение информации:</h1>\r\n        <hr/>\r\n        <form className=\"modalLoginBox\">\r\n          {isModalFetching \r\n            ?<div>Загрузка</div>\r\n            : deps.map((dep, id) => <label key={id} htmlFor={dep.departmentName} style={{paddingLeft: `${dep.margin}px`}}>\r\n            <input\r\n              type='checkbox'\r\n              value={dep._id}\r\n              id={dep.departmentName}\r\n              name={dep.departmentName}\r\n              onChange={handlePush}\r\n              checked={dep.checked}\r\n            />{dep.departmentName}</label>)\r\n          }\r\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n            Изменить\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n      <Modal active={modalMain} setActive={setModalMain}>\r\n        <h1>Изменение информации:</h1>\r\n        <hr/>\r\n        <form className=\"modalLoginBox\">\r\n          <label>\r\n            <input\r\n              type='checkbox'\r\n              onChange={handleAddChildren}\r\n            />Добавить дочерние</label>\r\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n            Изменить\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}*/\r\n"]},"metadata":{},"sourceType":"module"}