{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport TreeView from 'react-treeview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [expandedNodes, setExpandedNodes] = useState([]); // загрузка всех департаментов\n\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n      setDep(res.data);\n    };\n\n    getDeps();\n  }, []);\n\n  const toggleNode = nodeId => {\n    if (expandedNodes.includes(nodeId)) {\n      setExpandedNodes(expandedNodes.filter(id => id !== nodeId));\n    } else {\n      setExpandedNodes([...expandedNodes, nodeId]);\n    }\n  };\n\n  const renderTree = node => /*#__PURE__*/_jsxDEV(TreeView, {\n    nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n      to: `/department/${node.department_tree_to_json.id}`,\n      className: \"level1\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"node\",\n        children: node.department_tree_to_json.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this),\n    collapsed: !expandedNodes.includes(node.department_tree_to_json.id),\n    onClick: () => toggleNode(node.department_tree_to_json.id),\n    children: node.department_tree_to_json.Subclasses.map(department => /*#__PURE__*/_jsxDEV(TreeView, {\n      nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/department/${department.id}`,\n        className: \"depsUser\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node\",\n          children: department.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this),\n      collapsed: !expandedNodes.includes(department.id),\n      onClick: () => toggleNode(department.id),\n      children: department.Subclasses.map(department1 => /*#__PURE__*/_jsxDEV(TreeView, {\n        nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/department/${department1.id}`,\n          className: \"depsUser\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"node\",\n            children: department1.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 33\n        }, this),\n        collapsed: !expandedNodes.includes(department1.id),\n        onClick: () => toggleNode(department1.id),\n        children: department1.Subclasses.map(department2 => /*#__PURE__*/_jsxDEV(Link, {\n          to: `/department/${department2.id}`,\n          className: \"depsUser\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [expandedNodes.includes(department2.id) ? /*#__PURE__*/_jsxDEV(FiMinus, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 83\n            }, this) : /*#__PURE__*/_jsxDEV(FiPlus, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 97\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                paddingLeft: '4px'\n              },\n              children: department2.Name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this)\n        }, department2.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }, this))\n      }, department1.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this))\n    }, department.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this))\n  }, node.department_tree_to_json.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map(node => renderTree(node))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"ZpimOrPpLGNUPieBCqJXMYhomOs=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","useState","useEffect","Link","axios","TreeView","Sidebar","dep","setDep","expandedNodes","setExpandedNodes","getDeps","res","get","data","toggleNode","nodeId","includes","filter","id","renderTree","node","department_tree_to_json","Name","Subclasses","map","department","department1","department2","display","alignItems","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport TreeView from 'react-treeview';\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [expandedNodes, setExpandedNodes] = useState([]);\r\n\r\n    // загрузка всех департаментов\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            setDep(res.data);\r\n        };\r\n        getDeps();\r\n    }, []);\r\n\r\n    const toggleNode = nodeId => {\r\n        if (expandedNodes.includes(nodeId)) {\r\n            setExpandedNodes(expandedNodes.filter(id => id !== nodeId));\r\n        } else {\r\n            setExpandedNodes([...expandedNodes, nodeId]);\r\n        }\r\n    };\r\n\r\n    const renderTree = node => (\r\n        <TreeView\r\n            key={node.department_tree_to_json.id}\r\n            nodeLabel={\r\n                <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                    <span className='node'>{node.department_tree_to_json.Name}</span>\r\n                </Link>\r\n            }\r\n            collapsed={!expandedNodes.includes(node.department_tree_to_json.id)}\r\n            onClick={() => toggleNode(node.department_tree_to_json.id)}\r\n        >\r\n            {node.department_tree_to_json.Subclasses.map(department => (\r\n                <TreeView\r\n                    key={department.id}\r\n                    nodeLabel={\r\n                        <Link to={`/department/${department.id}`} className='depsUser'>\r\n                            <span className='node'>{department.Name}</span>\r\n                        </Link>\r\n                    }\r\n                    collapsed={!expandedNodes.includes(department.id)}\r\n                    onClick={() => toggleNode(department.id)}\r\n                >\r\n                    {department.Subclasses.map(department1 => (\r\n                        <TreeView\r\n                            key={department1.id}\r\n                            nodeLabel={\r\n                                <Link to={`/department/${department1.id}`} className='depsUser'>\r\n                                    <span className='node'>{department1.Name}</span>\r\n                                </Link>\r\n                            }\r\n                            collapsed={!expandedNodes.includes(department1.id)}\r\n                            onClick={() => toggleNode(department1.id)}\r\n                        >\r\n                            {department1.Subclasses.map(department2 => (\r\n                                <Link to={`/department/${department2.id}`} className='depsUser' key={department2.id}>\r\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                        {expandedNodes.includes(department2.id) ? <FiMinus /> : <FiPlus />}\r\n                                        <span style={{ paddingLeft: '4px' }}>{department2.Name}</span>\r\n                                    </div>\r\n                                </Link>\r\n                            ))}\r\n                        </TreeView>\r\n                    ))}\r\n                </TreeView>\r\n            ))}\r\n        </TreeView>\r\n    );\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className='sidebarWrapper'>\r\n                <div className='tree'>\r\n                    <div className='treeWrapper'>\r\n                        {dep.map(node => renderTree(node))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}