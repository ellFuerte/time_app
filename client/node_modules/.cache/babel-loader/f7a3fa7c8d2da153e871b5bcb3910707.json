{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Staff\\\\Staff.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Employee from '../Employee/Employee';\nimport './Staff.css';\nimport { useParams } from 'react-router-dom';\nimport Modal from '../Templates/Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Staff() {\n  _s();\n\n  const [see_childs, setSee_child] = useState();\n  const [checked, setChecked] = useState(false);\n  const [statisticsWork, setStatisticsWork] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [UsersDep, setUsersDeps] = useState([]);\n  const [us, setUs] = useState([]);\n  const [user, setUser] = useState([]);\n  const [getUser, setGetUser] = useState([]);\n  const [deps, setDeps] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isJob, setIsJob] = useState(true);\n  const [isFetching, setIsFetching] = useState(false);\n  const [modalMain, setModalMain] = useState(false);\n  const departId = useParams().username;\n  const localUser = JSON.parse(localStorage.getItem('user'));\n  const depsId = useParams().username; // фильтр нужных департаментов\n\n  const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId);\n  let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id));\n  filterDeps.push(...currentDep);\n  useEffect(() => {\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // получение всех пользователей\n\n    /*        const fetchUsers = async () => {\r\n                const res = await axios.get('/api/user')\r\n                res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(res.data)\r\n                setUsers(filterUsers)\r\n                setIsFetching(false)\r\n    \r\n    \r\n            }*/\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    //Вывод статистики для админов\n\n    /* const get_statistics_all_users = async () => {\r\n         if (localUser.isAdmin === true) {\r\n             const getUsers = {\r\n                 id: localUser._id\r\n             }\r\n             const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n             const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n               let all_users = filterUsersFoo(all)\r\n               if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                 alert('Нет не одного пользователя в работе')\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                 alert('Сегодня все в работе')\r\n                 window.location.href = `/department/${localUser.departmentId}`\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                 alert('Вчера все работали')\r\n                 window.location.href = `/department/${localUser.departmentId}`\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_today/')) {\r\n                 alert('Нет болеющих сегодня')\r\n                 window.location.href = `/department/${localUser.departmentId}`\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_yesterday')) {\r\n                 alert('Вчера не было сотрудников на больничном')\r\n                 window.location.href = `/department/${localUser.main_department}`\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                 alert('На сегодня нет сотрудников в отпуске')\r\n                 window.location.href = `/department/${localUser.main_department}`\r\n             }\r\n             if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                 alert('Вчера не было сотрудников в отпуске')\r\n                 window.location.href = `/department/${localUser.main_department}`\r\n             }\r\n             if (!!~document.location.href.indexOf('/all_users/')) {\r\n                 setStatisticsWork(all_users)\r\n             }\r\n             if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                 if(res.data[0].get_statistics_all_users[0]['not_working_today']===null){\r\n                   }else{\r\n                     const sort = res.data[0].get_statistics_all_users[0]['not_working_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n               if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                 if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null) {\r\n                   } else {\r\n                     const sort = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n               if (!!~document.location.href.indexOf('/sick_today/')) {\r\n                 if(res.data[0].get_statistics_all_users[0]['sick_today']===null)\r\n                 {\r\n                   }else{\r\n                     const sort = res.data[0].get_statistics_all_users[0]['sick_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n               if (!!~document.location.href.indexOf('/sick_yesterday/')) {\r\n                 if(res.data[0].get_statistics_all_users[0]['sick_yesterday']===null)\r\n                 {\r\n                   }else{\r\n                     const sort = res.data[0].get_statistics_all_users[0]['sick_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n               if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                 if(res.data[0].get_statistics_all_users[0]['vacation_today']===null)\r\n                 {\r\n                   }else{\r\n                     const sort = res.data[0].get_statistics_all_users[0]['vacation_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n               if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                 if(res.data[0].get_statistics_all_users[0]['vacation_yesterday']===null)\r\n                 {\r\n                   }else{\r\n                     const sort = res.data[0].get_statistics_all_users[0]['vacation_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                     setStatisticsWork(filterUsersFoo(sort))\r\n                 }\r\n             }\r\n         }\r\n     }*/\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // функция показывает нажата ли галочка показать дочернии\n    const see = async () => {\n      const user = await axios.get('/api/user/' + localUser._id);\n      setChecked(user.data.see_child);\n    }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    const get_users_by_users = async () => {\n      setIsFetching(true);\n      const getUsers = {\n        id: localUser._id\n      };\n      const res = await axios.post('/api/get_users_by_users', getUsers);\n      const users_users = res.data[0]['get_users_by_users'];\n      users_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n      let filterUsers = filterUsersFoo(users_users);\n      setUsers(filterUsers);\n      setIsFetching(false);\n    };\n\n    const child = async () => {\n      const info = {\n        depsId: depsId\n      };\n      const addchild = await axios.post('/api/get_users_by_dep/', info);\n      const dep_users = addchild.data[0]['get_users_by_dep'];\n\n      if (dep_users === null) {\n        setUs([]);\n      } else {\n        dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        const filterUsers = filterUsersFoo(dep_users);\n        setUs(filterUsers);\n      }\n    };\n\n    if (user.main_department === departId) {\n      setUsers([]);\n    } else {\n      setGetUser([]);\n      fetchUsers();\n      setIsOpen(false);\n    }\n\n    child();\n    /*  get_statistics_all_users()*/\n\n    see();\n  }, [departId]); ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // фильтр пользователей по статусу\n\n  function filterUsersFoo(users) {\n    return users.filter(user => user.status === 1).concat(users.filter(user => user.status === 2)).concat(users.filter(user => user.status === 3)).concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4)).concat(users.filter(user => user.status === 4));\n  } ///////////////////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // добавление дочерних по checkbox\n\n\n  const clickcheckbox = async () => {\n    setChecked(!checked);\n    const info = {\n      userId: localUser._id,\n      ischeked: !checked\n    };\n    await axios.post('/api/child/', info);\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // обновляем main department по кнопке изменить\n\n\n  const handleModalClick = async () => {\n    const add = {\n      id: localUser._id,\n      depsId: depsId\n    };\n    const res = await axios.put('/api/user', add);\n    setModalMain(false);\n  }; ///////////////////////////////////////////////////////////////////////////////////////////////////\n  // функция get_users_by_dep\n\n  /* const get_users_by_dep = async () => {\r\n   if(checked===true){\r\n       setUs([])\r\n   }else{\r\n     }\r\n       if (isJob) {\r\n           const info = {\r\n               depsId: depsId\r\n           }\r\n           const res = await axios.post('/api/get_users_by_dep/', info)\r\n           const dep_users = res.data[0]['get_users_by_dep']\r\n             if (dep_users === null) {\r\n             } else {\r\n               dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n               let filterUsers = filterUsersFoo(dep_users)\r\n               console.log('filterUsers=',filterUsers)\r\n               setUsersDeps(filterUsers)\r\n               setIsOpen(true)\r\n               setIsJob(!isJob)\r\n           }\r\n       }\r\n   }*/\n  ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"staff\",\n    children: [departId && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [isJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: get_users_by_dep,\n        className: \"btnStaff\",\n        style: {\n          width: '155px'\n        },\n        children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = `/department/${departId}`,\n        className: \"btnStaff\",\n        children: \"\\u0421\\u043A\\u0440\\u044B\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalMain(true),\n        className: \"btnStaff\",\n        style: {\n          float: 'right'\n        },\n        children: \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u0433\\u043B\\u0430\\u0432\\u043D\\u043E\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employeeWrapper\",\n      children: [isFetching ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"isFetching\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 23\n      }, this) : users.length === 0 && getUser.length !== 0 ? '' : !!departId && !checked ? !isOpen ? users.filter(user => user.department_id === departId).map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 107\n      }, this)) : '' : statisticsWork.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 64\n      }, this)), checked ? us.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 48\n      }, this)) : '', !!isOpen ? UsersDep.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 52\n      }, this)) : \"\", !!getUser ? getUser.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 51\n      }, this)) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: modalMain,\n      setActive: setModalMain,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"modalLoginBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: clickcheckbox,\n            checked: checked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 29\n          }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButton\",\n          type: \"submit\",\n          disabled: isFetching,\n          onClick: handleModalClick,\n          children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Staff, \"sTF3Yb+fbQDsUt6GLWbO8VPgfoE=\", false, function () {\n  return [useParams, useParams];\n});\n\n_c = Staff;\n\nvar _c;\n\n$RefreshReg$(_c, \"Staff\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Staff/Staff.jsx"],"names":["useEffect","useState","axios","Employee","useParams","Modal","Staff","see_childs","setSee_child","checked","setChecked","statisticsWork","setStatisticsWork","users","setUsers","UsersDep","setUsersDeps","us","setUs","user","setUser","getUser","setGetUser","deps","setDeps","isOpen","setIsOpen","isJob","setIsJob","isFetching","setIsFetching","modalMain","setModalMain","departId","username","localUser","JSON","parse","localStorage","getItem","depsId","currentDep","filter","dep","_id","departmentId","filterDeps","find","i","dep_id","push","see","get","data","see_child","get_users_by_users","getUsers","id","res","post","users_users","sort","a","b","user_name","localeCompare","filterUsers","filterUsersFoo","child","info","addchild","dep_users","main_department","fetchUsers","status","concat","clickcheckbox","userId","ischeked","handleModalClick","add","put","get_users_by_dep","width","window","location","href","float","length","department_id","map"],"mappings":";;;AAAA,SAAQA,SAAR,EAAkBC,QAAlB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,aAAP;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BP,QAAQ,EAA3C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,QAAD,EAAWC,YAAX,IAA2Bf,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACgB,EAAD,EAAKC,KAAL,IAAcjB,QAAQ,CAAC,EAAD,CAA5B;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC4B,UAAD,EAAaC,aAAb,IAA8B7B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMgC,QAAQ,GAAG7B,SAAS,GAAG8B,QAA7B;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAlB;AACA,QAAMC,MAAM,GAAGpC,SAAS,GAAG8B,QAA3B,CAhB4B,CAkB5B;;AACA,QAAMO,UAAU,GAAGlB,IAAI,CAACmB,MAAL,CAAYC,GAAG,IAAIV,QAAQ,GAAGU,GAAG,CAACC,GAAJ,KAAYX,QAAf,GAA0BU,GAAG,CAACC,GAAJ,KAAYT,SAAS,CAACU,YAA3E,CAAnB;AACA,MAAIC,UAAU,GAAGvB,IAAI,CAACmB,MAAL,CAAYC,GAAG,IAAIF,UAAU,CAACM,IAAX,CAAgBC,CAAC,IAAIA,CAAC,KAAKL,GAAG,CAACM,MAAV,IAAoBD,CAAC,KAAKP,UAAU,CAAC,CAAD,CAAV,CAAcQ,MAA7D,CAAnB,CAAjB;AACAH,EAAAA,UAAU,CAACI,IAAX,CAAgB,GAAGT,UAAnB;AAGAzC,EAAAA,SAAS,CAAC,MAAM;AAEpB;AACQ;;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;;AACD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAEQ;AACA,UAAMmD,GAAG,GAAG,YAAY;AACpB,YAAMhC,IAAI,GAAG,MAAMjB,KAAK,CAACkD,GAAN,CAAU,eAAejB,SAAS,CAACS,GAAnC,CAAnB;AACAlC,MAAAA,UAAU,CAACS,IAAI,CAACkC,IAAL,CAAUC,SAAX,CAAV;AAGH,KALD,CAvHY,CA8HpB;;;AAEQ,UAAMC,kBAAkB,GAAG,YAAY;AACnCzB,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAM0B,QAAQ,GAAG;AACbC,QAAAA,EAAE,EAAEtB,SAAS,CAACS;A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","sourcesContent":["import {useEffect,useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport {useParams} from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n    const [see_childs, setSee_child] = useState()\r\n    const [checked, setChecked] = useState(false)\r\n    const [statisticsWork, setStatisticsWork] = useState([])\r\n    const [users, setUsers] = useState([])\r\n    const [UsersDep, setUsersDeps] = useState([])\r\n    const [us, setUs] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [getUser, setGetUser] = useState([])\r\n    const [deps, setDeps] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isJob, setIsJob] = useState(true)\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [modalMain, setModalMain] = useState(false)\r\n    const departId = useParams().username\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const depsId = useParams().username\r\n\r\n    // фильтр нужных департаментов\r\n    const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n    let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    filterDeps.push(...currentDep)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // получение всех пользователей\r\n/*        const fetchUsers = async () => {\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(res.data)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n\r\n\r\n        }*/\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        //Вывод статистики для админов\r\n       /* const get_statistics_all_users = async () => {\r\n            if (localUser.isAdmin === true) {\r\n                const getUsers = {\r\n                    id: localUser._id\r\n                }\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n\r\n                let all_users = filterUsersFoo(all)\r\n\r\n                if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                    alert('Нет не одного пользователя в работе')\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                    alert('Сегодня все в работе')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    alert('Вчера все работали')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_today/')) {\r\n                    alert('Нет болеющих сегодня')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_yesterday')) {\r\n                    alert('Вчера не было сотрудников на больничном')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                    alert('На сегодня нет сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                    alert('Вчера не было сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (!!~document.location.href.indexOf('/all_users/')) {\r\n                    setStatisticsWork(all_users)\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                    if(res.data[0].get_statistics_all_users[0]['not_working_today']===null){\r\n\r\n                    }else{\r\n                        const sort = res.data[0].get_statistics_all_users[0]['not_working_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null) {\r\n\r\n                    } else {\r\n                        const sort = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/sick_today/')) {\r\n                    if(res.data[0].get_statistics_all_users[0]['sick_today']===null)\r\n                    {\r\n\r\n                    }else{\r\n                        const sort = res.data[0].get_statistics_all_users[0]['sick_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/sick_yesterday/')) {\r\n                    if(res.data[0].get_statistics_all_users[0]['sick_yesterday']===null)\r\n                    {\r\n\r\n                    }else{\r\n                        const sort = res.data[0].get_statistics_all_users[0]['sick_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                    if(res.data[0].get_statistics_all_users[0]['vacation_today']===null)\r\n                    {\r\n\r\n                    }else{\r\n                        const sort = res.data[0].get_statistics_all_users[0]['vacation_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                    if(res.data[0].get_statistics_all_users[0]['vacation_yesterday']===null)\r\n                    {\r\n\r\n                    }else{\r\n                        const sort = res.data[0].get_statistics_all_users[0]['vacation_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n            }\r\n        }*/\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        // функция показывает нажата ли галочка показать дочернии\r\n        const see = async () => {\r\n            const user = await axios.get('/api/user/' + localUser._id)\r\n            setChecked(user.data.see_child)\r\n\r\n\r\n        }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const get_users_by_users = async () => {\r\n            setIsFetching(true)\r\n            const getUsers = {\r\n                id: localUser._id\r\n            }\r\n            const res = await axios.post('/api/get_users_by_users', getUsers)\r\n            const users_users = res.data[0]['get_users_by_users']\r\n            users_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(users_users)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n        }\r\n        const child = async () => {\r\n\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const addchild = await axios.post('/api/get_users_by_dep/', info)\r\n\r\n            const dep_users = addchild.data[0]['get_users_by_dep']\r\n            if(dep_users===null){\r\n                setUs([])\r\n            }else{\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                const filterUsers = filterUsersFoo(dep_users)\r\n                setUs(filterUsers)\r\n            }\r\n\r\n        }\r\n\r\n        if (user.main_department === departId) {\r\n            setUsers([])\r\n        } else {\r\n            setGetUser([])\r\n            fetchUsers()\r\n            setIsOpen(false)\r\n        }\r\n        child()\r\n      /*  get_statistics_all_users()*/\r\n        see()\r\n    }, [departId])\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // фильтр пользователей по статусу\r\n    function filterUsersFoo(users) {\r\n        return users.filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n            .concat(users.filter(user => user.status === 4))\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // добавление дочерних по checkbox\r\n    const clickcheckbox = async () => {\r\n        setChecked(!checked)\r\n\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: !checked\r\n        }\r\n        await axios.post('/api/child/', info)\r\n\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // обновляем main department по кнопке изменить\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: depsId\r\n        }\r\n        const res = await axios.put('/api/user', add)\r\n        setModalMain(false)\r\n\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // функция get_users_by_dep\r\n   /* const get_users_by_dep = async () => {\r\n    if(checked===true){\r\n        setUs([])\r\n    }else{\r\n\r\n    }\r\n        if (isJob) {\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(dep_users)\r\n                console.log('filterUsers=',filterUsers)\r\n                setUsersDeps(filterUsers)\r\n                setIsOpen(true)\r\n                setIsJob(!isJob)\r\n            }\r\n        }\r\n    }*/\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <div className='staff'>\r\n            {departId && <>\r\n                {isJob ? <button onClick={get_users_by_dep} className=\"btnStaff\" style={{width: '155px'}}>Показать\r\n                        дочерние</button> :\r\n                    <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\">Скрыть\r\n                        дочерние</button>}\r\n                <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать\r\n                    главной\r\n                </button>\r\n            </>}\r\n\r\n            <div className=\"employeeWrapper\">\r\n                {isFetching\r\n                    ? <div className='isFetching'>Загрузка...</div>\r\n                    : users.length === 0 && getUser.length !== 0\r\n                        ? ''\r\n                        : !!departId  && !checked\r\n                            ? !isOpen\r\n                                ? users.filter(user => user.department_id === departId).map((user, id) => <Employee\r\n                                    key={id} user={user}/>)\r\n                                : ''\r\n                            : statisticsWork.map((user, id) => <Employee key={id} user={user} />)\r\n                }\r\n\r\n                {\r\n                    checked\r\n                        ? us.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n\r\n                {\r\n                    !!isOpen\r\n                        ?\r\n                        UsersDep.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n                {\r\n                    !!getUser\r\n                        ?\r\n                        getUser.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr/>\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        {\r\n                            <input\r\n                            type='checkbox'\r\n                            onChange={clickcheckbox}\r\n                            checked={checked}\r\n                        />\r\n                        }Добавить дочерние</label>\r\n                    <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n                        Изменить\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}