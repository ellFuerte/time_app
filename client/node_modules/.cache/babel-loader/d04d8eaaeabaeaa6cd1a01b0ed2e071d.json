{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const [selectedId, setSelectedId] = useState(null); // Состояние для хранения выбранного id\n\n  useEffect(() => {\n    const getDeps = async () => {\n      try {\n        const res = await axios.get('/api/department_tree_to_json/');\n\n        if (res.data[0].department_tree_to_json.length === 0) {\n          setDep([]);\n        } else {\n          setDep(res.data);\n        }\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n\n    getDeps();\n  }, []);\n  useEffect(() => {\n    // Проверяем, есть ли выбранный id, и обновляем состояние\n    if (selectedId !== null) {\n      // Обновляем состояние узлов так, чтобы выбранный узел был развернутым\n      const updatedDep = dep.map(node => ({ ...node,\n        isOpen: node.department_tree_to_json.id === selectedId // Помечаем узел как развернутый, если его id совпадает с выбранным id\n\n      }));\n      setDep(updatedDep);\n    }\n  }, [selectedId, dep]); // Зависимость от selectedId и dep\n\n  const handleNodeClick = id => {\n    setSelectedId(id); // Обновляем выбранный id при клике на узел\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length >= 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => /*#__PURE__*/_jsxDEV(TreeView, {\n            nodeLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level1\",\n              onClick: () => handleNodeClick(node.department_tree_to_json.id),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 41\n            }, this),\n            collapsed: !node.isOpen // Используем isOpen для определения развернутости узла\n            ,\n            children: node.department_tree_to_json.Subclasses.map(department => /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"depsUser\",\n                onClick: () => handleNodeClick(department.id),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: department.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 49\n              }, this),\n              collapsed: true,\n              children: !!department.Subclasses && department.Subclasses.map(subDepartment => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"depsUser\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    paddingBottom: '8px'\n                  },\n                  children: subDepartment.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 53\n                }, this)\n              }, subDepartment.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 49\n              }, this))\n            }, department.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 41\n            }, this))\n          }, node.department_tree_to_json.id + '|' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"IDWISzr75ddFmL0Tjutsi5aVlp4=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","selectedId","setSelectedId","getDeps","res","get","data","department_tree_to_json","length","error","console","updatedDep","map","node","isOpen","id","handleNodeClick","i","Name","Subclasses","department","subDepartment","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const [selectedId, setSelectedId] = useState(null); // Состояние для хранения выбранного id\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            try {\r\n                const res = await axios.get('/api/department_tree_to_json/');\r\n                if (res.data[0].department_tree_to_json.length === 0) {\r\n                    setDep([]);\r\n                } else {\r\n                    setDep(res.data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching departments:', error);\r\n            }\r\n        };\r\n        getDeps();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Проверяем, есть ли выбранный id, и обновляем состояние\r\n        if (selectedId !== null) {\r\n            // Обновляем состояние узлов так, чтобы выбранный узел был развернутым\r\n            const updatedDep = dep.map(node => ({\r\n                ...node,\r\n                isOpen: node.department_tree_to_json.id === selectedId // Помечаем узел как развернутый, если его id совпадает с выбранным id\r\n            }));\r\n            setDep(updatedDep);\r\n        }\r\n    }, [selectedId, dep]); // Зависимость от selectedId и dep\r\n\r\n    const handleNodeClick = (id) => {\r\n        setSelectedId(id); // Обновляем выбранный id при клике на узел\r\n    };\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length >= 1 ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => (\r\n                                <TreeView\r\n                                    key={node.department_tree_to_json.id + '|' + i}\r\n                                    nodeLabel={(\r\n                                        <div className='level1' onClick={() => handleNodeClick(node.department_tree_to_json.id)}>\r\n                                            <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                        </div>\r\n                                    )}\r\n                                    collapsed={!node.isOpen} // Используем isOpen для определения развернутости узла\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((department) => (\r\n                                        <TreeView\r\n                                            key={department.id}\r\n                                            nodeLabel={(\r\n                                                <div className='depsUser' onClick={() => handleNodeClick(department.id)}>\r\n                                                    <span className=\"node\">{department.Name}</span>\r\n                                                </div>\r\n                                            )}\r\n                                            collapsed={true}\r\n                                        >\r\n                                            {!!department.Subclasses && department.Subclasses.map((subDepartment) => (\r\n                                                <div className='depsUser' key={subDepartment.id}>\r\n                                                    <div style={{ paddingBottom: '8px' }}>{subDepartment.Name}</div>\r\n                                                </div>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}