{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [dep, setDep] = useState([]); // загрузка всех департаментов\n\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/department_tree_to_json/');\n\n      if (res.data[0].department_tree_to_json.length === 0) {\n        setDep([]);\n      } else {\n        setDep(res.data);\n      }\n    };\n\n    getDeps();\n  }, []);\n\n  function Sidebar({\n    dep,\n    targetDepartmentId\n  }) {\n    _s();\n\n    const [collapsedStates, setCollapsedStates] = useState({});\n    useEffect(() => {\n      // Функция для установки состояния collapsed для всех узлов на пути к целевому департаменту\n      const setCollapsedStateForDepartment = (departments, targetId, path = []) => {\n        for (const department of departments) {\n          if (department.department_tree_to_json.id === targetId) {\n            // Если нашли целевой департамент, устанавливаем collapsed = false для всех узлов на пути к нему\n            const newState = { ...collapsedStates\n            };\n            path.forEach(nodeId => newState[nodeId] = false);\n            setCollapsedStates(newState);\n            return;\n          }\n\n          if (department.department_tree_to_json.Subclasses) {\n            setCollapsedStateForDepartment(department.department_tree_to_json.Subclasses, targetId, [...path, department.department_tree_to_json.id]);\n          }\n        }\n      }; // Устанавливаем состояние collapsed для всех департаментов\n\n\n      setCollapsedStateForDepartment(dep, targetDepartmentId);\n    }, [dep, targetDepartmentId]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebarWrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"treeWrapper\",\n            children: dep.map((node, i) => {\n              const label = /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${node.department_tree_to_json.id}`,\n                className: \"level1\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: node.department_tree_to_json.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this);\n\n              return /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: label,\n                defaultCollapsed: !collapsedStates[node.department_tree_to_json.id],\n                children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n                  nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/department/${departments.id}`,\n                    className: \"depsUser\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"node\",\n                      children: departments.Name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 77,\n                      columnNumber: 57\n                    }, this)\n                  }, departments.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 53\n                  }, this),\n                  defaultCollapsed: !collapsedStates[departments.id],\n                  children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                    nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/department/${departments1.id}`,\n                      className: \"depsUser\",\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"node\",\n                        children: departments1.Name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 88,\n                        columnNumber: 65\n                      }, this)\n                    }, departments1.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 86,\n                      columnNumber: 61\n                    }, this),\n                    defaultCollapsed: !collapsedStates[departments1.id],\n                    children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                      to: `/department/${departments2.id}`,\n                      className: \"depsUser\",\n                      children: /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: {\n                          paddingBottom: '8px'\n                        },\n                        children: departments2.Name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 97,\n                        columnNumber: 65\n                      }, this)\n                    }, departments2.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 61\n                    }, this))\n                  }, departments1.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 53\n                  }, this))\n                }, departments.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 45\n                }, this))\n              }, node.department_tree_to_json.Name + '|' + i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(Sidebar, \"osfs2eoL7R8T8OyLSC9s9eWgBL0=\");\n};\n\n_s2(Sidebar, \"mSPW/vQ+uKiKIAEbhbmzJOV4CzE=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","getDeps","res","get","data","department_tree_to_json","length","targetDepartmentId","collapsedStates","setCollapsedStates","setCollapsedStateForDepartment","departments","targetId","path","department","id","newState","forEach","nodeId","Subclasses","map","node","i","label","Name","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([])\r\n    // загрузка всех департаментов\r\n    useEffect(() => {\r\n\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/')\r\n            if (res.data[0].department_tree_to_json.length === 0) {\r\n                setDep([])\r\n            } else {\r\n                setDep(res.data)\r\n            }\r\n        }\r\n        getDeps()\r\n    }, [])\r\n\r\n    function Sidebar({dep, targetDepartmentId}) {\r\n        const [collapsedStates, setCollapsedStates] = useState({});\r\n\r\n        useEffect(() => {\r\n            // Функция для установки состояния collapsed для всех узлов на пути к целевому департаменту\r\n            const setCollapsedStateForDepartment = (departments, targetId, path = []) => {\r\n                for (const department of departments) {\r\n                    if (department.department_tree_to_json.id === targetId) {\r\n                        // Если нашли целевой департамент, устанавливаем collapsed = false для всех узлов на пути к нему\r\n                        const newState = {...collapsedStates};\r\n                        path.forEach(nodeId => (newState[nodeId] = false));\r\n                        setCollapsedStates(newState);\r\n                        return;\r\n                    }\r\n                    if (department.department_tree_to_json.Subclasses) {\r\n                        setCollapsedStateForDepartment(\r\n                            department.department_tree_to_json.Subclasses,\r\n                            targetId,\r\n                            [...path, department.department_tree_to_json.id]\r\n                        );\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Устанавливаем состояние collapsed для всех департаментов\r\n            setCollapsedStateForDepartment(dep, targetDepartmentId);\r\n        }, [dep, targetDepartmentId]);\r\n\r\n        return (\r\n            <div className='sidebar'>\r\n                <div className=\"sidebarWrapper\">\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => {\r\n                                const label = (\r\n                                    <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                        <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                    </Link>\r\n                                );\r\n\r\n                                return (\r\n                                    <TreeView\r\n                                        key={node.department_tree_to_json.Name + '|' + i}\r\n                                        nodeLabel={label}\r\n                                        defaultCollapsed={!collapsedStates[node.department_tree_to_json.id]}\r\n                                    >\r\n                                        {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                            <TreeView\r\n                                                nodeLabel={(\r\n                                                    <Link to={`/department/${departments.id}`} className='depsUser'\r\n                                                          key={departments.id}>\r\n                                                        <span className=\"node\">{departments.Name}</span>\r\n                                                    </Link>\r\n                                                )}\r\n                                                key={departments.id}\r\n                                                defaultCollapsed={!collapsedStates[departments.id]}\r\n                                            >\r\n                                                {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                    <TreeView\r\n                                                        nodeLabel={(\r\n                                                            <Link to={`/department/${departments1.id}`}\r\n                                                                  className='depsUser' key={departments1.id}>\r\n                                                                <span className=\"node\">{departments1.Name}</span>\r\n                                                            </Link>\r\n                                                        )}\r\n                                                        key={departments1.id}\r\n                                                        defaultCollapsed={!collapsedStates[departments1.id]}\r\n                                                    >\r\n                                                        {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                            <Link to={`/department/${departments2.id}`}\r\n                                                                  className='depsUser' key={departments2.id}>\r\n                                                                <div\r\n                                                                    style={{paddingBottom: '8px'}}>{departments2.Name}</div>\r\n                                                            </Link>\r\n                                                        ))}\r\n                                                    </TreeView>\r\n                                                ))}\r\n                                            </TreeView>\r\n                                        ))}\r\n                                    </TreeView>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}