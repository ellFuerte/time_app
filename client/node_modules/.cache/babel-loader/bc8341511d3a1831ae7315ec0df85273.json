{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Staff\\\\Staff.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Employee from '../Employee/Employee';\nimport './Staff.css';\nimport { Link, useParams } from 'react-router-dom';\nimport Modal from '../Templates/Modal/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Staff() {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n  const [statisticsWork, setStatisticsWork] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [UsersDep, setUsersDeps] = useState([]);\n  const [us, setUs] = useState([]);\n  const [user, setUser] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isJob, setIsJob] = useState(true);\n  const [modalMain, setModalMain] = useState(false);\n  const localUser = JSON.parse(localStorage.getItem('user'));\n  const {\n    username: departId\n  } = useParams();\n  useEffect(() => {\n    const getStatisticsAllUsers = async () => {\n      if (localUser.isAdmin) {\n        const getUsers = {\n          id: localUser._id\n        };\n        const res = await axios.post('/api/get_statistics_all_users', getUsers);\n        const all = res.data[0].get_statistics_all_users[0].all_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        let allUsers = filterUsersFoo(all);\n        setStatisticsWork(allUsers);\n      }\n    };\n\n    const statusChild = async () => {\n      const res = await axios.get('/api/user/' + localUser._id);\n      setChecked(res.data.see_child);\n      setUser(res.data);\n    };\n\n    const fetchUsers = async () => {\n      const res = await axios.get('/api/user');\n      res.data.sort((a, b) => a.user_name.localeCompare(b.user_name));\n      let filteredUsers = filterUsersFoo(res.data);\n      setUsers(filteredUsers.filter(user => user.department_id === departId));\n    };\n\n    const getUsersByDepIsCheckedTrue = async () => {\n      const info = {\n        depsId: departId\n      };\n      const res = await axios.post('/api/get_users_by_dep/', info);\n      const depUsers = res.data[0].get_users_by_dep;\n\n      if (depUsers !== null) {\n        const sortedUsers = depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        const filteredUsers = filterUsersFoo(sortedUsers);\n        setUs(filteredUsers);\n      } else {\n        setUs([]);\n      }\n    };\n\n    setIsJob(true);\n\n    if (departId) {\n      fetchUsers();\n    }\n\n    if (checked) {\n      setUsers([]);\n      getUsersByDepIsCheckedTrue();\n    }\n\n    getStatisticsAllUsers();\n    statusChild();\n  }, [departId, checked, localUser._id]);\n\n  const filterUsersFoo = users => {\n    return users.filter(user => user.status === 1).concat(users.filter(user => user.status === 2)).concat(users.filter(user => user.status === 3)).concat(users.filter(user => ![1, 2, 3, 4].includes(user.status))).concat(users.filter(user => user.status === 4));\n  };\n\n  const clickCheckbox = async () => {\n    const newChecked = !checked;\n    setChecked(newChecked);\n    const info = {\n      userId: localUser._id,\n      ischeked: newChecked\n    };\n    await axios.post('/api/statusChild/', info);\n\n    if (newChecked) {\n      const inf = {\n        depsId: departId\n      };\n      const res = await axios.post('/api/get_users_by_dep/', inf);\n      const depUsers = res.data[0].get_users_by_dep;\n\n      if (depUsers !== null) {\n        depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        let filteredUsers = filterUsersFoo(depUsers);\n        setUs(filteredUsers);\n      } else {\n        setUs([]);\n      }\n    } else {\n      fetchUsers();\n    }\n  };\n\n  const handleModalClick = async () => {\n    const add = {\n      id: localUser._id,\n      depsId: departId\n    };\n    await axios.put('/api/user', add);\n    setModalMain(false);\n  };\n\n  const getUsersByDepIsOpen = async () => {\n    if (isJob) {\n      const info = {\n        depsId: departId\n      };\n      const res = await axios.post('/api/get_users_by_dep/', info);\n      const depUsers = res.data[0].get_users_by_dep;\n\n      if (depUsers !== null) {\n        depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\n        let filteredUsers = filterUsersFoo(depUsers);\n        setUsersDeps(filteredUsers);\n        setUsers([]);\n        setIsJob(false);\n        setIsOpen(true);\n      } else {\n        setUsersDeps([]);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"staff\",\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [isJob ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getUsersByDepIsOpen,\n        className: \"btnStaff\",\n        style: {\n          width: '155px'\n        },\n        children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.href = `/department/${departId}`,\n        className: \"btnStaff\",\n        children: \"\\u0421\\u043A\\u0440\\u044B\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalMain(true),\n        className: \"btnStaff\",\n        style: {\n          float: 'right'\n        },\n        children: \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u0433\\u043B\\u0430\\u0432\\u043D\\u043E\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), localUser.isAdmin && /*#__PURE__*/_jsxDEV(Link, {\n        to: `/VacanciesView/`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnStaff\",\n          children: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0432\\u0430\\u043A\\u0430\\u043D\\u0441\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 68\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"employeeWrapper\",\n      children: [checked && user.main_department === departId ? us.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 42\n      }, this)) : users.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 45\n      }, this)), isOpen && UsersDep.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 55\n      }, this)), !departId && statisticsWork.map((user, id) => /*#__PURE__*/_jsxDEV(Employee, {\n        user: user\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 64\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: modalMain,\n      setActive: setModalMain,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u0438:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"modalLoginBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onChange: clickCheckbox,\n            checked: checked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0434\\u043E\\u0447\\u0435\\u0440\\u043D\\u0438\\u0435\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ModalButtonDepartment\",\n          type: \"button\",\n          onClick: handleModalClick,\n          children: \"\\u0421\\u0434\\u0435\\u043B\\u0430\\u0442\\u044C \\u0433\\u043B\\u0430\\u0432\\u043D\\u044B\\u043C \\u0434\\u0435\\u043F\\u0430\\u0440\\u0442\\u0430\\u043C\\u0435\\u043D\\u0442\\u043E\\u043C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Staff, \"K+/k25w4do4lmoQNoGecFyKFzxc=\", false, function () {\n  return [useParams];\n});\n\n_c = Staff;\n\nvar _c;\n\n$RefreshReg$(_c, \"Staff\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Staff/Staff.jsx"],"names":["useEffect","useState","axios","Employee","Link","useParams","Modal","Staff","checked","setChecked","statisticsWork","setStatisticsWork","users","setUsers","UsersDep","setUsersDeps","us","setUs","user","setUser","isOpen","setIsOpen","isJob","setIsJob","modalMain","setModalMain","localUser","JSON","parse","localStorage","getItem","username","departId","getStatisticsAllUsers","isAdmin","getUsers","id","_id","res","post","all","data","get_statistics_all_users","all_users","sort","a","b","user_name","localeCompare","allUsers","filterUsersFoo","statusChild","get","see_child","fetchUsers","filteredUsers","filter","department_id","getUsersByDepIsCheckedTrue","info","depsId","depUsers","get_users_by_dep","sortedUsers","status","concat","includes","clickCheckbox","newChecked","userId","ischeked","inf","handleModalClick","add","put","getUsersByDepIsOpen","width","window","location","href","float","main_department","map"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Employee from '../Employee/Employee';\r\nimport './Staff.css';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Modal from '../Templates/Modal/Modal';\r\n\r\nexport default function Staff() {\r\n    const [checked, setChecked] = useState(false);\r\n    const [statisticsWork, setStatisticsWork] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [UsersDep, setUsersDeps] = useState([]);\r\n    const [us, setUs] = useState([]);\r\n    const [user, setUser] = useState([]);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isJob, setIsJob] = useState(true);\r\n    const [modalMain, setModalMain] = useState(false);\r\n    const localUser = JSON.parse(localStorage.getItem('user'));\r\n    const { username: departId } = useParams();\r\n\r\n    useEffect(() => {\r\n        const getStatisticsAllUsers = async () => {\r\n            if (localUser.isAdmin) {\r\n                const getUsers = { id: localUser._id };\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers);\r\n                const all = res.data[0].get_statistics_all_users[0].all_users.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n                let allUsers = filterUsersFoo(all);\r\n                setStatisticsWork(allUsers);\r\n            }\r\n        };\r\n\r\n        const statusChild = async () => {\r\n            const res = await axios.get('/api/user/' + localUser._id);\r\n            setChecked(res.data.see_child);\r\n            setUser(res.data);\r\n        };\r\n\r\n        const fetchUsers = async () => {\r\n            const res = await axios.get('/api/user');\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n            let filteredUsers = filterUsersFoo(res.data);\r\n            setUsers(filteredUsers.filter(user => user.department_id === departId));\r\n        };\r\n\r\n        const getUsersByDepIsCheckedTrue = async () => {\r\n            const info = { depsId: departId };\r\n            const res = await axios.post('/api/get_users_by_dep/', info);\r\n            const depUsers = res.data[0].get_users_by_dep;\r\n            if (depUsers !== null) {\r\n                const sortedUsers = depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n                const filteredUsers = filterUsersFoo(sortedUsers);\r\n                setUs(filteredUsers);\r\n            } else {\r\n                setUs([]);\r\n            }\r\n        };\r\n\r\n        setIsJob(true);\r\n        if (departId) {\r\n            fetchUsers();\r\n        }\r\n        if (checked) {\r\n            setUsers([]);\r\n            getUsersByDepIsCheckedTrue();\r\n        }\r\n\r\n        getStatisticsAllUsers();\r\n        statusChild();\r\n    }, [departId, checked, localUser._id]);\r\n\r\n    const filterUsersFoo = users => {\r\n        return users\r\n            .filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => ![1, 2, 3, 4].includes(user.status)))\r\n            .concat(users.filter(user => user.status === 4));\r\n    };\r\n\r\n    const clickCheckbox = async () => {\r\n        const newChecked = !checked;\r\n        setChecked(newChecked);\r\n\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: newChecked\r\n        };\r\n        await axios.post('/api/statusChild/', info);\r\n\r\n        if (newChecked) {\r\n            const inf = { depsId: departId };\r\n            const res = await axios.post('/api/get_users_by_dep/', inf);\r\n            const depUsers = res.data[0].get_users_by_dep;\r\n            if (depUsers !== null) {\r\n                depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n                let filteredUsers = filterUsersFoo(depUsers);\r\n                setUs(filteredUsers);\r\n            } else {\r\n                setUs([]);\r\n            }\r\n        } else {\r\n            fetchUsers();\r\n        }\r\n    };\r\n\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: departId\r\n        };\r\n        await axios.put('/api/user', add);\r\n        setModalMain(false);\r\n    };\r\n\r\n    const getUsersByDepIsOpen = async () => {\r\n        if (isJob) {\r\n            const info = { depsId: departId };\r\n            const res = await axios.post('/api/get_users_by_dep/', info);\r\n            const depUsers = res.data[0].get_users_by_dep;\r\n            if (depUsers !== null) {\r\n                depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n                let filteredUsers = filterUsersFoo(depUsers);\r\n                setUsersDeps(filteredUsers);\r\n                setUsers([]);\r\n                setIsJob(false);\r\n                setIsOpen(true);\r\n            } else {\r\n                setUsersDeps([]);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='staff'>\r\n            <>\r\n                {isJob ?\r\n                    <button onClick={getUsersByDepIsOpen} className=\"btnStaff\" style={{ width: '155px' }}>\r\n                        Показать дочерние\r\n                    </button>\r\n                    :\r\n                    <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\">\r\n                        Скрыть дочерние\r\n                    </button>\r\n                }\r\n                <button onClick={() => setModalMain(true)} className='btnStaff' style={{ float: 'right' }}>\r\n                    Сделать главной\r\n                </button>\r\n                {localUser.isAdmin && <Link to={`/VacanciesView/`}><button className=\"btnStaff\">Показать вакансии</button></Link>}\r\n            </>\r\n\r\n            <div className=\"employeeWrapper\">\r\n                {checked && user.main_department === departId ?\r\n                    us.map((user, id) => <Employee key={id} user={user} />) :\r\n                    users.map((user, id) => <Employee key={id} user={user} />)\r\n                }\r\n\r\n                {isOpen && UsersDep.map((user, id) => <Employee key={id} user={user} />)}\r\n\r\n                {!departId && statisticsWork.map((user, id) => <Employee key={id} user={user} />)}\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr />\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        <input\r\n                            type='checkbox'\r\n                            onChange={clickCheckbox}\r\n                            checked={checked}\r\n                        />\r\n                        Добавить дочерние\r\n                    </label>\r\n                    <button className=\"ModalButtonDepartment\" type=\"button\" onClick={handleModalClick}>\r\n                        Сделать главным департаментом\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}