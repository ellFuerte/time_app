{"ast":null,"code":"/*\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport {useParams} from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n    const [checked, setChecked] = useState(false)\r\n    const [childs, setSee_child] = useState()\r\n    const [statisticsWork, setStatisticsWork] = useState([])\r\n    const [users, setUsers] = useState([])\r\n    const [UsersDep, setUsersDeps] = useState([])\r\n    const [us, setUs] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [getUser, setGetUser] = useState([])\r\n    const [deps, setDeps] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isJob, setIsJob] = useState(true)\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [modalMain, setModalMain] = useState(false)\r\n    const changedArr = []\r\n    const departId = useParams().username\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const depsId = useParams().username\r\n    for (let i = 0; i < localUser.checkedDeps?.length; i++) {\r\n        changedArr.push(localUser.checkedDeps[i])\r\n\r\n    }\r\n\r\n\r\n    // фильтр нужных департаментов\r\n    const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n    let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    filterDeps.push(...currentDep)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // получение всех пользователей\r\n        const fetchUsers = async () => {\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(res.data)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        //Вывод статистики для админов\r\n        const get_statistics_all_users = async () => {\r\n            setIsFetching(true)\r\n            if (localUser.isAdmin === true) {\r\n                const getUsers = {\r\n                    id: localUser._id\r\n                }\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                const yesterday = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let working_yesterday = filterUsersFoo(yesterday)\r\n                let all_users = filterUsersFoo(all)\r\n                if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                    alert('Нет не одного пользователя в работе')\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                    alert('Сегодня все в работе')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    alert('Вчера все работали')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_leave_today/')) {\r\n                    alert('Нет болеющих сегодня')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_leave_yesterday')) {\r\n                    alert('Вчера не было сотрудников на больничном')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                    alert('На сегодня нет сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                    alert('Вчера не было сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (!!~document.location.href.indexOf('/all_users/')) {\r\n                    setStatisticsWork(all_users)\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['not_working_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    setStatisticsWork(working_yesterday)\r\n                }\r\n                if (!!~document.location.href.indexOf('/sick_leave_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['sick_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/sick_leave_yesterday/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['sick_yesterday'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['vacation_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['vacation_yesterday'])\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        // функция показывает нажата ли галочка показать дочернии\r\n        const see = async () => {\r\n            const user = await axios.get('/api/user/' + localUser._id)\r\n            const see_child = user.data.see_child\r\n            setSee_child(see_child)\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const child = async () => {\r\n\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const addchild = await axios.post('/api/get_users_by_dep/', info)\r\n\r\n            const dep_users = addchild.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUs(dep_users)\r\n            }\r\n\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const get_users_by_users = async () => {\r\n            setIsFetching(true)\r\n            const getUsers = {\r\n                id: localUser._id\r\n            }\r\n            const res = await axios.post('/api/get_users_by_users', getUsers)\r\n            const users_users = res.data[0]['get_users_by_users']\r\n            users_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(users_users)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n        }\r\n\r\n\r\n        if (user.main_department === departId) {\r\n            setUsers([])\r\n            get_users_by_users()\r\n        } else {\r\n            setGetUser([])\r\n            fetchUsers()\r\n            setIsOpen(false)\r\n        }\r\n\r\n        get_statistics_all_users()\r\n        child()\r\n        see()\r\n    }, [departId])\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // фильтр пользователей по статусу\r\n    function filterUsersFoo(users) {\r\n        return users.filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n            .concat(users.filter(user => user.status === 4))\r\n    }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // добавление дочерних по checkbox\r\n    const clickcheckbox = async () => {\r\n        setChecked(!checked)\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: !checked\r\n        }\r\n        await axios.post('/api/child/', info)\r\n\r\n        if (!checked === true) {\r\n\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUsers(dep_users)\r\n\r\n            }\r\n\r\n        } else {\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            setUsers(res.data)\r\n\r\n        }\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // обновляем main department по кнопке изменить\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: depsId\r\n        }\r\n        const res = await axios.put('/api/user', add)\r\n        setModalMain(false)\r\n\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // функция get_users_by_dep\r\n    const get_users_by_dep = async () => {\r\n\r\n        if (isJob) {\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUsers(dep_users)\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(dep_users)\r\n                setUsersDeps(filterUsers)\r\n                setIsOpen(true)\r\n                setIsJob(!isJob)\r\n            }\r\n        }\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <div className='staff'>\r\n            {departId && <>\r\n                {isJob ? <button onClick={get_users_by_dep} className=\"btnStaff\" style={{width: '155px'}}>Показать\r\n                        дочерние</button> :\r\n                    <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\">Скрыть\r\n                        дочерние</button>}\r\n                <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать\r\n                    главной\r\n                </button>\r\n            </>}\r\n\r\n            <div className=\"employeeWrapper\">\r\n                {isFetching\r\n                    ? <div className='isFetching'>Загрузка...</div>\r\n                    : departId\r\n                        ? users.filter(user => user.department_id === departId).map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n                {\r\n                    checked || childs === true\r\n                        ? us.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n                {\r\n                    !!isOpen\r\n                        ?\r\n                        UsersDep.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n                {\r\n                    !!getUser\r\n                        ?\r\n                        getUser.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr/>\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        <input\r\n                            checked={checked}\r\n                            type='checkbox'\r\n                            onChange={clickcheckbox}\r\n                        />Добавить дочерние</label>\r\n                    <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n                        Изменить\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}*/","map":{"version":3,"sources":["D:/time_app/client/src/components/Staff/Staff.jsx"],"names":[],"mappingssourcesContent":["\r\n\r\n\r\n\r\n/*\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport {useParams} from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\nexport default function Staff() {\r\n    const [checked, setChecked] = useState(false)\r\n    const [childs, setSee_child] = useState()\r\n    const [statisticsWork, setStatisticsWork] = useState([])\r\n    const [users, setUsers] = useState([])\r\n    const [UsersDep, setUsersDeps] = useState([])\r\n    const [us, setUs] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [getUser, setGetUser] = useState([])\r\n    const [deps, setDeps] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isJob, setIsJob] = useState(true)\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [modalMain, setModalMain] = useState(false)\r\n    const changedArr = []\r\n    const departId = useParams().username\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const depsId = useParams().username\r\n    for (let i = 0; i < localUser.checkedDeps?.length; i++) {\r\n        changedArr.push(localUser.checkedDeps[i])\r\n\r\n    }\r\n\r\n\r\n    // фильтр нужных департаментов\r\n    const currentDep = deps.filter(dep => departId ? dep._id === departId : dep._id === localUser.departmentId)\r\n    let filterDeps = deps.filter(dep => currentDep.find(i => i === dep.dep_id || i === currentDep[0].dep_id))\r\n    filterDeps.push(...currentDep)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // получение всех пользователей\r\n        const fetchUsers = async () => {\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(res.data)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n        //Вывод статистики для админов\r\n        const get_statistics_all_users = async () => {\r\n            setIsFetching(true)\r\n            if (localUser.isAdmin === true) {\r\n                const getUsers = {\r\n                    id: localUser._id\r\n                }\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                const yesterday = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let working_yesterday = filterUsersFoo(yesterday)\r\n                let all_users = filterUsersFoo(all)\r\n                if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                    alert('Нет не одного пользователя в работе')\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                    alert('Сегодня все в работе')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    alert('Вчера все работали')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_leave_today/')) {\r\n                    alert('Нет болеющих сегодня')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_leave_yesterday')) {\r\n                    alert('Вчера не было сотрудников на больничном')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                    alert('На сегодня нет сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                    alert('Вчера не было сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (!!~document.location.href.indexOf('/all_users/')) {\r\n                    setStatisticsWork(all_users)\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['not_working_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    setStatisticsWork(working_yesterday)\r\n                }\r\n                if (!!~document.location.href.indexOf('/sick_leave_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['sick_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/sick_leave_yesterday/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['sick_yesterday'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['vacation_today'])\r\n                }\r\n                if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                    setStatisticsWork(res.data[0].get_statistics_all_users[0]['vacation_yesterday'])\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        // функция показывает нажата ли галочка показать дочернии\r\n        const see = async () => {\r\n            const user = await axios.get('/api/user/' + localUser._id)\r\n            const see_child = user.data.see_child\r\n            setSee_child(see_child)\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const child = async () => {\r\n\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const addchild = await axios.post('/api/get_users_by_dep/', info)\r\n\r\n            const dep_users = addchild.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUs(dep_users)\r\n            }\r\n\r\n        }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        const get_users_by_users = async () => {\r\n            setIsFetching(true)\r\n            const getUsers = {\r\n                id: localUser._id\r\n            }\r\n            const res = await axios.post('/api/get_users_by_users', getUsers)\r\n            const users_users = res.data[0]['get_users_by_users']\r\n            users_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            let filterUsers = filterUsersFoo(users_users)\r\n            setUsers(filterUsers)\r\n            setIsFetching(false)\r\n        }\r\n\r\n\r\n        if (user.main_department === departId) {\r\n            setUsers([])\r\n            get_users_by_users()\r\n        } else {\r\n            setGetUser([])\r\n            fetchUsers()\r\n            setIsOpen(false)\r\n        }\r\n\r\n        get_statistics_all_users()\r\n        child()\r\n        see()\r\n    }, [departId])\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    // фильтр пользователей по статусу\r\n    function filterUsersFoo(users) {\r\n        return users.filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n            .concat(users.filter(user => user.status === 4))\r\n    }\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // добавление дочерних по checkbox\r\n    const clickcheckbox = async () => {\r\n        setChecked(!checked)\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: !checked\r\n        }\r\n        await axios.post('/api/child/', info)\r\n\r\n        if (!checked === true) {\r\n\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUsers(dep_users)\r\n\r\n            }\r\n\r\n        } else {\r\n            const res = await axios.get('/api/user')\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n            setUsers(res.data)\r\n\r\n        }\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // обновляем main department по кнопке изменить\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: depsId\r\n        }\r\n        const res = await axios.put('/api/user', add)\r\n        setModalMain(false)\r\n\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // функция get_users_by_dep\r\n    const get_users_by_dep = async () => {\r\n\r\n        if (isJob) {\r\n            const info = {\r\n                depsId: depsId\r\n            }\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n\r\n            if (dep_users === null) {\r\n\r\n            } else {\r\n                setUsers(dep_users)\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(dep_users)\r\n                setUsersDeps(filterUsers)\r\n                setIsOpen(true)\r\n                setIsJob(!isJob)\r\n            }\r\n        }\r\n    }\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <div className='staff'>\r\n            {departId && <>\r\n                {isJob ? <button onClick={get_users_by_dep} className=\"btnStaff\" style={{width: '155px'}}>Показать\r\n                        дочерние</button> :\r\n                    <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\">Скрыть\r\n                        дочерние</button>}\r\n                <button onClick={() => setModalMain(true)} className='btnStaff' style={{float: 'right'}}>Сделать\r\n                    главной\r\n                </button>\r\n            </>}\r\n\r\n            <div className=\"employeeWrapper\">\r\n                {isFetching\r\n                    ? <div className='isFetching'>Загрузка...</div>\r\n                    : departId\r\n                        ? users.filter(user => user.department_id === departId).map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n                {\r\n                    checked || childs === true\r\n                        ? us.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : ''\r\n                }\r\n\r\n                {\r\n                    !!isOpen\r\n                        ?\r\n                        UsersDep.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n                {\r\n                    !!getUser\r\n                        ?\r\n                        getUser.map((user, id) => <Employee key={id} user={user}/>)\r\n                        : \"\"\r\n                }\r\n\r\n\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr/>\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        <input\r\n                            checked={checked}\r\n                            type='checkbox'\r\n                            onChange={clickcheckbox}\r\n                        />Добавить дочерние</label>\r\n                    <button className=\"ModalButton\" type=\"submit\" disabled={isFetching} onClick={handleModalClick}>\r\n                        Изменить\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}*/\r\n"]},"metadata":{},"sourceType":"module"}