{"ast":null,"code":"var _jsxFileName = \"D:\\\\time_app\\\\client\\\\src\\\\components\\\\Sidebar\\\\Sidebar.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './Sidebar.css';\nimport TreeView from 'react-treeview';\nimport 'react-treeview/react-treeview.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Sidebar = () => {\n  _s();\n\n  const [dep, setDep] = useState([]);\n  const targetDepartmentId = 123; // Замените это значение на ваш ID департамента\n\n  useEffect(() => {\n    const getDeps = async () => {\n      var _res$data$;\n\n      const res = await axios.get('/api/department_tree_to_json/');\n      const data = ((_res$data$ = res.data[0]) === null || _res$data$ === void 0 ? void 0 : _res$data$.department_tree_to_json) || [];\n      setDep(data.length ? data : []);\n    };\n\n    getDeps();\n  }, []);\n\n  const findPathToDepartment = (tree, id) => {\n    if (!Array.isArray(tree)) return [];\n\n    for (let node of tree) {\n      if (node.department_tree_to_json.id === id) {\n        return [node];\n      }\n\n      if (Array.isArray(node.department_tree_to_json.Subclasses)) {\n        const path = findPathToDepartment(node.department_tree_to_json.Subclasses, id);\n\n        if (path.length > 0) {\n          return [node, ...path];\n        }\n      }\n    }\n\n    return [];\n  };\n\n  const pathToDepartment = findPathToDepartment(dep, targetDepartmentId);\n\n  const isNodeInPath = node => pathToDepartment.some(pathNode => pathNode.department_tree_to_json.id === node.department_tree_to_json.id);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebarWrapper\",\n      children: dep.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"treeWrapper\",\n          children: dep.map((node, i) => /*#__PURE__*/_jsxDEV(TreeView, {\n            nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/department/${node.department_tree_to_json.id}`,\n              className: \"level1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"node\",\n                children: node.department_tree_to_json.Name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 41\n            }, this),\n            defaultCollapsed: !isNodeInPath(node),\n            children: node.department_tree_to_json.Subclasses.map(departments => /*#__PURE__*/_jsxDEV(TreeView, {\n              nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/department/${departments.id}`,\n                className: \"depsUser\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"node\",\n                  children: departments.Name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 53\n                }, this)\n              }, departments.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 49\n              }, this),\n              defaultCollapsed: !isNodeInPath(departments),\n              children: !!departments.Subclasses && departments.Subclasses.map(departments1 => /*#__PURE__*/_jsxDEV(TreeView, {\n                nodeLabel: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments1.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"node\",\n                    children: departments1.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 61\n                  }, this)\n                }, departments1.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 57\n                }, this),\n                defaultCollapsed: !isNodeInPath(departments1),\n                children: !!departments1.Subclasses && departments1.Subclasses.map(departments2 => /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/department/${departments2.id}`,\n                  className: \"depsUser\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      paddingBottom: '8px'\n                    },\n                    children: departments2.Name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 61\n                  }, this)\n                }, departments2.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 57\n                }, this))\n              }, departments1.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 49\n              }, this))\n            }, departments.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 41\n            }, this))\n          }, node.department_tree_to_json.Name + '|' + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Sidebar, \"mSPW/vQ+uKiKIAEbhbmzJOV4CzE=\");\n\n_c = Sidebar;\nexport default Sidebar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"sources":["D:/time_app/client/src/components/Sidebar/Sidebar.jsx"],"names":["React","Link","axios","useEffect","useState","TreeView","Sidebar","dep","setDep","targetDepartmentId","getDeps","res","get","data","department_tree_to_json","length","findPathToDepartment","tree","id","Array","isArray","node","Subclasses","path","pathToDepartment","isNodeInPath","some","pathNode","map","i","Name","departments","departments1","departments2","paddingBottom"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport './Sidebar.css'\r\nimport TreeView from 'react-treeview';\r\nimport 'react-treeview/react-treeview.css'\r\n\r\n\r\nconst Sidebar = () => {\r\n    const [dep, setDep] = useState([]);\r\n    const targetDepartmentId = 123; // Замените это значение на ваш ID департамента\r\n\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            const data = res.data[0]?.department_tree_to_json || [];\r\n            setDep(data.length ? data : []);\r\n        };\r\n        getDeps();\r\n    }, []);\r\n\r\n    const findPathToDepartment = (tree, id) => {\r\n        if (!Array.isArray(tree)) return [];\r\n        for (let node of tree) {\r\n            if (node.department_tree_to_json.id === id) {\r\n                return [node];\r\n            }\r\n            if (Array.isArray(node.department_tree_to_json.Subclasses)) {\r\n                const path = findPathToDepartment(node.department_tree_to_json.Subclasses, id);\r\n                if (path.length > 0) {\r\n                    return [node, ...path];\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n\r\n    const pathToDepartment = findPathToDepartment(dep, targetDepartmentId);\r\n    const isNodeInPath = (node) => pathToDepartment.some(pathNode => pathNode.department_tree_to_json.id === node.department_tree_to_json.id);\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebarWrapper\">\r\n                {dep.length ? (\r\n                    <div className=\"tree\">\r\n                        <div className=\"treeWrapper\">\r\n                            {dep.map((node, i) => (\r\n                                <TreeView\r\n                                    nodeLabel={(\r\n                                        <Link to={`/department/${node.department_tree_to_json.id}`} className='level1'>\r\n                                            <span className=\"node\">{node.department_tree_to_json.Name}</span>\r\n                                        </Link>\r\n                                    )}\r\n                                    key={node.department_tree_to_json.Name + '|' + i}\r\n                                    defaultCollapsed={!isNodeInPath(node)}\r\n                                >\r\n                                    {node.department_tree_to_json.Subclasses.map((departments) => (\r\n                                        <TreeView\r\n                                            nodeLabel={(\r\n                                                <Link to={`/department/${departments.id}`} className='depsUser' key={departments.id}>\r\n                                                    <span className=\"node\">{departments.Name}</span>\r\n                                                </Link>\r\n                                            )}\r\n                                            key={departments.id}\r\n                                            defaultCollapsed={!isNodeInPath(departments)}\r\n                                        >\r\n                                            {!!departments.Subclasses && departments.Subclasses.map((departments1) => (\r\n                                                <TreeView\r\n                                                    nodeLabel={(\r\n                                                        <Link to={`/department/${departments1.id}`} className='depsUser' key={departments1.id}>\r\n                                                            <span className=\"node\">{departments1.Name}</span>\r\n                                                        </Link>\r\n                                                    )}\r\n                                                    key={departments1.id}\r\n                                                    defaultCollapsed={!isNodeInPath(departments1)}\r\n                                                >\r\n                                                    {!!departments1.Subclasses && departments1.Subclasses.map((departments2) => (\r\n                                                        <Link to={`/department/${departments2.id}`} className='depsUser' key={departments2.id}>\r\n                                                            <div style={{ paddingBottom: '8px' }}>{departments2.Name}</div>\r\n                                                        </Link>\r\n                                                    ))}\r\n                                                </TreeView>\r\n                                            ))}\r\n                                        </TreeView>\r\n                                    ))}\r\n                                </TreeView>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;"]},"metadata":{},"sourceType":"module"}