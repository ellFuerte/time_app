{"ast":null,"code":"/*import axios from 'axios'\nimport { useEffect, useRef, useState } from 'react'\nimport { Create, Delete } from '@material-ui/icons'\n\nimport Modal from '../Templates/Modal/Modal'\nimport './ProfileInfo.css'\n\nexport default function ProfileInfo({username}) {\n  const [user, setUser] = useState([])\n  const [isFetching, setIsFetching] = useState(false)\n  const [modalActive, setModalActive] = useState(false)\n  const [modalActivePass, setModalActivePass] = useState(false)\n  const [modalActiveResetPass, setModalActiveResetPass] = useState(false)\n  const [modalActiveDelete, setModalActiveDelete] = useState(false)\n  const [deps, setDeps] = useState([])\n  const [error, setError] = useState('')\n  const [posts, setPosts] = useState([])\n\n  const localUser = JSON.parse(localStorage.getItem('user'))\n\n  const modalName = useRef()\n  const modalDep = useRef()\n  const modalEmail = useRef()\n\n  const modalOldPass = useRef()\n  const modalNewPass = useRef()\n  const modalNewPassAgain = useRef()\n\n  const usersStatuses = {0: '', 1: 'start', 2: 'end', 3: 'vacation', 4: 'deleted'}\n  \n  function findStatus(k){\n    for(let i in usersStatuses){\n      if(i == k){\n        return usersStatuses[i]\n      }\n    }\n  }\n\n  // данные о пользователе\n  useEffect(() => {\n    setIsFetching(true)\n    const fetchUser = async () => {\n      const res = await axios.get('/api/user/'+username)\n      setUser(res.data)\n      setIsFetching(false)\n    }\n    fetchUser()\n  }, [username])\n\n  // все возможные департаменты\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/departments/')\n      setDeps(res.data)\n    }\n\n    getDeps()\n  }, [])\n\n  // данные о работе от последнего к первому\n  useEffect(() => {\n    setIsFetching(true)\n    const fetchUser = async () => {\n      const res = await axios.get('/api/post/profile/'+username)\n      setPosts(res.data.sort((p1, p2) => {\n        return new Date(p2.workStart) - new Date(p1.workStart)\n      }))\n      setIsFetching(false)\n    }\n    fetchUser()\n  }, [username])\n\n  // изменение данных пользователя\n  const handleClick = async (e) => {\n    e.preventDefault()\n\n    const newInfo= {\n      userId: user._id,\n      username: modalName.current.value || user.username,\n      email: modalEmail.current.value || user.email,\n      departmentId: modalDep.current.value || user.departmentId\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, newInfo)\n      if(user._id === localUser._id){\n        newInfo.password = localUser.password\n\n        localStorage.setItem('user', JSON.stringify({...user, ...newInfo}))\n      }\n      window.location.reload()\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // изменить пароль\n  const handleClickPassword = async (e) => {\n    e.preventDefault()\n    if(modalNewPass.current.value !== modalNewPassAgain.current.value){\n      setError('Новые пароли не совпадают')\n      return\n    }\n    const passwords = {\n      userId: user._id,\n      userPass: localUser.password,\n      oldPassword: modalOldPass.current.value,\n      newPassword: modalNewPass.current.value\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, passwords)\n      localStorage.clear()\n      window.location.reload()\n    } catch (error) {\n      setError('Старые пароли не совпадают')\n    }\n  }\n\n  // сбросить пароль\n  const handleResetPass = async (e) => {\n    e.preventDefault()\n\n    const resetPassword = {\n      userId: user._id,\n      newPassword: 'qwerty123'\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, resetPassword)\n      setModalActiveResetPass(false)\n    } catch (error) {\n      console.log('Ошибка');\n    }\n  }\n\n  // удалить пользователя\n  const handleDelete = async (e) => {\n    e.preventDefault()\n    setIsFetching(true)\n\n    const newPost = {\n      userId: username,\n      healthEnd: 1,\n      workEnd: new Date(Date.now()),\n      workTime: new Date(Date.now()) - new Date(posts[0].workStart)\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, {status:4, userId: user._id})\n      if(user.status === 1){\n        await axios.put(\"/api/post/\"+posts[0]._id, newPost)\n      }\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className='profileInfo'>\n      {isFetching\n      ? <div className='isFatching'>Загрузка...</div>\n      : <div className={'employeePI ' + (findStatus(user.status))}>\n          <div className='top'>\n            <span className='name'>\n              {user.username}\n              { localUser.isAdmin\n                ? <Create style={{fontSize:'medium', cursor:'pointer', marginLeft:'10px'}} onClick={() => setModalActive(true)}/> \n                : ''\n              }\n              {localUser.isAdmin \n                ? <Delete style={{cursor:'pointer', fontSize:'medium'}}  onClick={() => setModalActiveDelete(true)}/>\n                : <></>\n              }\n            </span>\n          </div>\n          <div className='email'>{user.email}</div>\n          {localUser._id === username && <div className='changePass' onClick={() => setModalActivePass(true)}>Изменить пароль</div>}\n          {(localUser._id !== username && localUser.isAdmin) && <div className='changePass' onClick={() => setModalActiveResetPass(true)}>Сбросить пароль</div>}\n        </div> \n      }\n      <Modal active={modalActive} setActive={setModalActive}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleClick}>\n          <input \n            placeholder=\"Name\"\n            className=\"ModalInput\"  \n            ref={modalName} \n          />\n          <select ref={modalDep}>\n            <option value=''>Отдел</option>\n            {deps.map((dep, id) => <option key={id} value={dep.id}>{dep.department_name}</option>)}\n          </select>\n          <input \n            placeholder=\"Email\" \n            type='email' \n            className=\"ModalInput\" \n            ref={modalEmail} \n            minLength='6'\n          />\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Изменить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActivePass} setActive={setModalActivePass}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        {error && <div className='modalError'>{error}</div>}\n        <form className=\"modalLoginBox\" onSubmit={handleClickPassword}>\n          <input \n            placeholder=\"Old Password\"\n            type='password' \n            className=\"ModalInput\"  \n            ref={modalOldPass} \n          />\n          <input \n            placeholder=\"New Password\" \n            type='password' \n            className=\"ModalInput\" \n            ref={modalNewPass} \n            minLength='6'\n          />\n          <input \n            placeholder=\"New Password Again\" \n            type='password' \n            className=\"ModalInput\" \n            ref={modalNewPassAgain} \n            minLength='6'\n          />\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Изменить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActiveResetPass} setActive={setModalActiveResetPass}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleResetPass}>\n          <h2>Новый пароль будет: qwerty123</h2>\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Сбросить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActiveDelete} setActive={setModalActiveDelete}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleDelete}>\n          <h2>Пользователь будет удален</h2>\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Удалить\n          </button>\n        </form>\n      </Modal>\n    </div>\n  )\n}*/","map":{"version":3,"sources":["D:/Download/time_app/client/src/components/ProfileInfo/ProfileInfo.jsx"],"names":[],"mappingssourcesContent":["/*import axios from 'axios'\nimport { useEffect, useRef, useState } from 'react'\nimport { Create, Delete } from '@material-ui/icons'\n\nimport Modal from '../Templates/Modal/Modal'\nimport './ProfileInfo.css'\n\nexport default function ProfileInfo({username}) {\n  const [user, setUser] = useState([])\n  const [isFetching, setIsFetching] = useState(false)\n  const [modalActive, setModalActive] = useState(false)\n  const [modalActivePass, setModalActivePass] = useState(false)\n  const [modalActiveResetPass, setModalActiveResetPass] = useState(false)\n  const [modalActiveDelete, setModalActiveDelete] = useState(false)\n  const [deps, setDeps] = useState([])\n  const [error, setError] = useState('')\n  const [posts, setPosts] = useState([])\n\n  const localUser = JSON.parse(localStorage.getItem('user'))\n\n  const modalName = useRef()\n  const modalDep = useRef()\n  const modalEmail = useRef()\n\n  const modalOldPass = useRef()\n  const modalNewPass = useRef()\n  const modalNewPassAgain = useRef()\n\n  const usersStatuses = {0: '', 1: 'start', 2: 'end', 3: 'vacation', 4: 'deleted'}\n  \n  function findStatus(k){\n    for(let i in usersStatuses){\n      if(i == k){\n        return usersStatuses[i]\n      }\n    }\n  }\n\n  // данные о пользователе\n  useEffect(() => {\n    setIsFetching(true)\n    const fetchUser = async () => {\n      const res = await axios.get('/api/user/'+username)\n      setUser(res.data)\n      setIsFetching(false)\n    }\n    fetchUser()\n  }, [username])\n\n  // все возможные департаменты\n  useEffect(() => {\n    const getDeps = async () => {\n      const res = await axios.get('/api/departments/')\n      setDeps(res.data)\n    }\n\n    getDeps()\n  }, [])\n\n  // данные о работе от последнего к первому\n  useEffect(() => {\n    setIsFetching(true)\n    const fetchUser = async () => {\n      const res = await axios.get('/api/post/profile/'+username)\n      setPosts(res.data.sort((p1, p2) => {\n        return new Date(p2.workStart) - new Date(p1.workStart)\n      }))\n      setIsFetching(false)\n    }\n    fetchUser()\n  }, [username])\n\n  // изменение данных пользователя\n  const handleClick = async (e) => {\n    e.preventDefault()\n\n    const newInfo= {\n      userId: user._id,\n      username: modalName.current.value || user.username,\n      email: modalEmail.current.value || user.email,\n      departmentId: modalDep.current.value || user.departmentId\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, newInfo)\n      if(user._id === localUser._id){\n        newInfo.password = localUser.password\n\n        localStorage.setItem('user', JSON.stringify({...user, ...newInfo}))\n      }\n      window.location.reload()\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  // изменить пароль\n  const handleClickPassword = async (e) => {\n    e.preventDefault()\n    if(modalNewPass.current.value !== modalNewPassAgain.current.value){\n      setError('Новые пароли не совпадают')\n      return\n    }\n    const passwords = {\n      userId: user._id,\n      userPass: localUser.password,\n      oldPassword: modalOldPass.current.value,\n      newPassword: modalNewPass.current.value\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, passwords)\n      localStorage.clear()\n      window.location.reload()\n    } catch (error) {\n      setError('Старые пароли не совпадают')\n    }\n  }\n\n  // сбросить пароль\n  const handleResetPass = async (e) => {\n    e.preventDefault()\n\n    const resetPassword = {\n      userId: user._id,\n      newPassword: 'qwerty123'\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, resetPassword)\n      setModalActiveResetPass(false)\n    } catch (error) {\n      console.log('Ошибка');\n    }\n  }\n\n  // удалить пользователя\n  const handleDelete = async (e) => {\n    e.preventDefault()\n    setIsFetching(true)\n\n    const newPost = {\n      userId: username,\n      healthEnd: 1,\n      workEnd: new Date(Date.now()),\n      workTime: new Date(Date.now()) - new Date(posts[0].workStart)\n    }\n\n    try {\n      await axios.put('/api/user/'+user._id, {status:4, userId: user._id})\n      if(user.status === 1){\n        await axios.put(\"/api/post/\"+posts[0]._id, newPost)\n      }\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className='profileInfo'>\n      {isFetching\n      ? <div className='isFatching'>Загрузка...</div>\n      : <div className={'employeePI ' + (findStatus(user.status))}>\n          <div className='top'>\n            <span className='name'>\n              {user.username}\n              { localUser.isAdmin\n                ? <Create style={{fontSize:'medium', cursor:'pointer', marginLeft:'10px'}} onClick={() => setModalActive(true)}/> \n                : ''\n              }\n              {localUser.isAdmin \n                ? <Delete style={{cursor:'pointer', fontSize:'medium'}}  onClick={() => setModalActiveDelete(true)}/>\n                : <></>\n              }\n            </span>\n          </div>\n          <div className='email'>{user.email}</div>\n          {localUser._id === username && <div className='changePass' onClick={() => setModalActivePass(true)}>Изменить пароль</div>}\n          {(localUser._id !== username && localUser.isAdmin) && <div className='changePass' onClick={() => setModalActiveResetPass(true)}>Сбросить пароль</div>}\n        </div> \n      }\n      <Modal active={modalActive} setActive={setModalActive}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleClick}>\n          <input \n            placeholder=\"Name\"\n            className=\"ModalInput\"  \n            ref={modalName} \n          />\n          <select ref={modalDep}>\n            <option value=''>Отдел</option>\n            {deps.map((dep, id) => <option key={id} value={dep.id}>{dep.department_name}</option>)}\n          </select>\n          <input \n            placeholder=\"Email\" \n            type='email' \n            className=\"ModalInput\" \n            ref={modalEmail} \n            minLength='6'\n          />\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Изменить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActivePass} setActive={setModalActivePass}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        {error && <div className='modalError'>{error}</div>}\n        <form className=\"modalLoginBox\" onSubmit={handleClickPassword}>\n          <input \n            placeholder=\"Old Password\"\n            type='password' \n            className=\"ModalInput\"  \n            ref={modalOldPass} \n          />\n          <input \n            placeholder=\"New Password\" \n            type='password' \n            className=\"ModalInput\" \n            ref={modalNewPass} \n            minLength='6'\n          />\n          <input \n            placeholder=\"New Password Again\" \n            type='password' \n            className=\"ModalInput\" \n            ref={modalNewPassAgain} \n            minLength='6'\n          />\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Изменить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActiveResetPass} setActive={setModalActiveResetPass}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleResetPass}>\n          <h2>Новый пароль будет: qwerty123</h2>\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Сбросить\n          </button>\n        </form>\n      </Modal>\n      <Modal active={modalActiveDelete} setActive={setModalActiveDelete}>\n        <h1>Изменение информации:</h1>\n        <hr/>\n        <form className=\"modalLoginBox\" onSubmit={handleDelete}>\n          <h2>Пользователь будет удален</h2>\n          <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\n            Удалить\n          </button>\n        </form>\n      </Modal>\n    </div>\n  )\n}*/\n"]},"metadata":{},"sourceType":"module"}