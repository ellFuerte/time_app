[{"D:\\time_app\\client\\src\\index.js":"1","D:\\time_app\\client\\src\\App.js":"2","D:\\time_app\\client\\src\\context\\AuthContext.js":"3","D:\\time_app\\client\\src\\context\\AuthReducer.js":"4","D:\\time_app\\client\\src\\pages\\Login\\Login.jsx":"5","D:\\time_app\\client\\src\\pages\\Error\\Error.jsx":"6","D:\\time_app\\client\\src\\pages\\MainPage\\MainPage.jsx":"7","D:\\time_app\\client\\src\\pages\\Profile\\Profile.jsx":"8","D:\\time_app\\client\\src\\pages\\Reports\\Reports.jsx":"9","D:\\time_app\\client\\src\\pages\\Department\\Department.jsx":"10","D:\\time_app\\client\\src\\pages\\Information\\Information.jsx":"11","D:\\time_app\\client\\src\\pages\\Register\\Register.jsx":"12","D:\\time_app\\client\\src\\components\\Staff\\Staff.jsx":"13","D:\\time_app\\client\\src\\components\\Templates\\Modal\\Modal.js":"14","D:\\time_app\\client\\src\\apiCalls.js":"15","D:\\time_app\\client\\src\\components\\Employee\\Employee.jsx":"16","D:\\time_app\\client\\src\\components\\Topbar\\Topbar.jsx":"17","D:\\time_app\\client\\src\\components\\Sidebar\\Sidebar.jsx":"18","D:\\time_app\\client\\src\\components\\Pagination\\Pagination.jsx":"19","D:\\time_app\\client\\src\\components\\Feed\\Feed.jsx":"20","D:\\time_app\\client\\src\\components\\ReportsInfo\\RepostsInfo.jsx":"21","D:\\time_app\\client\\src\\components\\Home\\Home.jsx":"22","D:\\time_app\\client\\src\\components\\Status\\Status.jsx":"23","D:\\time_app\\client\\src\\components\\SearchBlock\\SearchBlock.jsx":"24","D:\\time_app\\client\\src\\components\\ProfileInfo\\ProfileInfo.jsx":"25","D:\\time_app\\client\\src\\components\\VacationPost\\VacationPost.jsx":"26","D:\\time_app\\client\\src\\components\\InfoPost\\InfoPost.jsx":"27","D:\\time_app\\client\\src\\pages\\ReportsNominations\\ReportsNominations.jsx":"28","D:\\time_app\\client\\src\\pages\\ReportsHistory\\ReportsHistory.jsx":"29","D:\\time_app\\client\\src\\components\\RepostInfoNominations\\RepostInfoNominations.jsx":"30","D:\\time_app\\client\\src\\components\\MessagePost\\MessagePost.jsx":"31","D:\\time_app\\client\\src\\components\\VacanciesView\\VacanciesView.jsx":"32","D:\\time_app\\client\\src\\components\\VacanciesAdd\\VacanciesAdd.jsx":"33","D:\\time_app\\client\\src\\components\\VacanciesItem\\VacanciesItem.jsx":"34","D:\\time_app\\client\\src\\components\\Templates\\ModalVacancies\\ModalVacancies.js":"35","D:\\time_app\\client\\src\\components\\ProfileInfo\\Skills\\Skills.jsx":"36","D:\\time_app\\client\\src\\components\\VacanciesItem\\ModalVacanciesItem\\ModalVacanciesItem.jsx":"37","D:\\time_app\\client\\src\\components\\ProfileInfo\\HistoryInfo\\HistoryInfo.jsx":"38","D:\\time_app\\client\\src\\components\\Layout\\Layout.jsx":"39","D:\\time_app\\client\\src\\components\\ProfileInfo\\Editing\\Editing.jsx":"40","D:\\time_app\\client\\src\\components\\ProfileInfo\\DeleteUser\\DeleteUser.jsx":"41","D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\AdminPanel.jsx":"42","D:\\time_app\\client\\src\\components\\Topbar\\Statistics\\Statistics.jsx":"43","D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\Role\\Role.jsx":"44","D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\DictionarySkills\\DictionarySkills.jsx":"45","D:\\time_app\\client\\src\\components\\ProfileInfo\\ResetPassword\\ResetPassword.jsx":"46","D:\\time_app\\client\\src\\components\\ProfileInfo\\FinishTime\\FinishTime.jsx":"47","D:\\time_app\\client\\src\\components\\ProfileInfo\\AddNomination\\AddNomination.jsx":"48"},{"size":494,"mtime":1708337783335,"results":"49","hashOfConfig":"50"},{"size":4297,"mtime":1719419274301,"results":"51","hashOfConfig":"50"},{"size":698,"mtime":1719306892055,"results":"52","hashOfConfig":"50"},{"size":586,"mtime":1696771964865,"results":"53","hashOfConfig":"50"},{"size":2766,"mtime":1710059721184,"results":"54","hashOfConfig":"50"},{"size":183,"mtime":1719415379673,"results":"55","hashOfConfig":"50"},{"size":374,"mtime":1709721994586,"results":"56","hashOfConfig":"50"},{"size":263,"mtime":1719412642274,"results":"57","hashOfConfig":"50"},{"size":511,"mtime":1719385793851,"results":"58","hashOfConfig":"50"},{"size":174,"mtime":1719328765715,"results":"59","hashOfConfig":"50"},{"size":5384,"mtime":1719416872862,"results":"60","hashOfConfig":"50"},{"size":15491,"mtime":1719246877651,"results":"61","hashOfConfig":"50"},{"size":13226,"mtime":1719315236858,"results":"62","hashOfConfig":"50"},{"size":470,"mtime":1713782435586,"results":"63","hashOfConfig":"50"},{"size":356,"mtime":1709891427643,"results":"64","hashOfConfig":"50"},{"size":4647,"mtime":1719246746588,"results":"65","hashOfConfig":"50"},{"size":5987,"mtime":1719413058375,"results":"66","hashOfConfig":"50"},{"size":4095,"mtime":1715004114988,"results":"67","hashOfConfig":"50"},{"size":680,"mtime":1719330346769,"results":"68","hashOfConfig":"50"},{"size":665,"mtime":1719314668909,"results":"69","hashOfConfig":"50"},{"size":590,"mtime":1709748106040,"results":"70","hashOfConfig":"50"},{"size":591,"mtime":1719412704891,"results":"71","hashOfConfig":"50"},{"size":14182,"mtime":1718893610504,"results":"72","hashOfConfig":"50"},{"size":5674,"mtime":1719238985856,"results":"73","hashOfConfig":"50"},{"size":22477,"mtime":1719433841395,"results":"74","hashOfConfig":"50"},{"size":624,"mtime":1708595517171,"results":"75","hashOfConfig":"50"},{"size":674,"mtime":1709560718632,"results":"76","hashOfConfig":"50"},{"size":7647,"mtime":1719381728162,"results":"77","hashOfConfig":"50"},{"size":8258,"mtime":1719398505045,"results":"78","hashOfConfig":"50"},{"size":597,"mtime":1709739545086,"results":"79","hashOfConfig":"50"},{"size":292,"mtime":1710867462542,"results":"80","hashOfConfig":"50"},{"size":17019,"mtime":1719319311784,"results":"81","hashOfConfig":"50"},{"size":12317,"mtime":1717488171245,"results":"82","hashOfConfig":"50"},{"size":16107,"mtime":1719235070654,"results":"83","hashOfConfig":"50"},{"size":500,"mtime":1716138560934,"results":"84","hashOfConfig":"50"},{"size":11691,"mtime":1718528060001,"results":"85","hashOfConfig":"50"},{"size":11969,"mtime":1719243895494,"results":"86","hashOfConfig":"50"},{"size":13783,"mtime":1719423472893,"results":"87","hashOfConfig":"50"},{"size":424,"mtime":1719384259250,"results":"88","hashOfConfig":"50"},{"size":17310,"mtime":1719412411850,"results":"89","hashOfConfig":"50"},{"size":1295,"mtime":1719412411862,"results":"90","hashOfConfig":"50"},{"size":1414,"mtime":1719420949262,"results":"91","hashOfConfig":"50"},{"size":5357,"mtime":1719412491340,"results":"92","hashOfConfig":"50"},{"size":687,"mtime":1719420738838,"results":"93","hashOfConfig":"50"},{"size":732,"mtime":1719420896361,"results":"94","hashOfConfig":"50"},{"size":989,"mtime":1719422281182,"results":"95","hashOfConfig":"50"},{"size":1316,"mtime":1719423135898,"results":"96","hashOfConfig":"50"},{"size":3644,"mtime":1719433426093,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"187sy1y",{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\time_app\\client\\src\\index.js",[],["212","213"],"D:\\time_app\\client\\src\\App.js",["214","215","216"],"D:\\time_app\\client\\src\\context\\AuthContext.js",[],"D:\\time_app\\client\\src\\context\\AuthReducer.js",[],"D:\\time_app\\client\\src\\pages\\Login\\Login.jsx",["217"],"import {useContext, useRef, useEffect,useState} from 'react';\r\nimport {CircularProgress} from '@material-ui/core'\r\nimport {Link} from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport  loginCall  from '../../apiCalls';\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport './Login.css'\r\n\r\n\r\nexport default function Login() {\r\n\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    useEffect(async () => {\r\n        axios.get('/api/user')\r\n            .then(response => {\r\n                if (!response) {\r\n                    throw new Error('Сервер недоступен');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setServerError(true);\r\n                setErrorMessage('Ошибка: ' + error.message);\r\n            });\r\n    }, []);\r\n\r\n\r\n  const email = useRef()\r\n  const password = useRef()\r\n\r\n  const {isFetching, error, dispatch } = useContext(AuthContext)\r\n  const handleClick = (e) => {\r\n    e.preventDefault()\r\n    loginCall({email:email.current.value.toUpperCase(), password:password.current.value}, dispatch)\r\n  }\r\n\r\n  return (\r\n      <div className=\"login\">\r\n          {!errorMessage && error &&\r\n              <div className='error'>\r\n                  Неправильный логин или пароль\r\n              </div>}\r\n\r\n          {serverError &&\r\n              <div className='error'>\r\n                  Сервер недоступен\r\n              </div>\r\n          }\r\n\r\n\r\n\r\n      <div className=\"loginWrapper\">\r\n        <div className=\"loginCenter\">\r\n          <form className=\"loginBox\" onSubmit={handleClick}>\r\n            <input \r\n              placeholder=\"Email\"\r\n              className=\"loginInput\" \r\n              type='emailLogin'\r\n              ref={email} \r\n              required\r\n            />\r\n            <input \r\n              placeholder=\"Password\" \r\n              type='password' \r\n              className=\"loginInput\" \r\n              ref={password} \r\n              required\r\n              minLength='6'\r\n            />\r\n            <button  className=\"loginButton\" type=\"submit\" disabled={isFetching}>\r\n\r\n              {isFetching ? <CircularProgress style={{color:'white'}}/> : 'Войти'}\r\n\r\n            </button>\r\n\r\n            {/* <span className=\"loginForgot\">Забыли пароль?</span> */}\r\n            <Link to='/register' style={{width:'167%'}}>\r\n              <button className=\"loginRegisterButton\" disabled={isFetching}>\r\n                {isFetching ? <CircularProgress style={{color:'white'}}/> : 'Создать новый аккаунт'}\r\n              </button>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\time_app\\client\\src\\pages\\Error\\Error.jsx",[],"D:\\time_app\\client\\src\\pages\\MainPage\\MainPage.jsx",[],"D:\\time_app\\client\\src\\pages\\Profile\\Profile.jsx",[],"D:\\time_app\\client\\src\\pages\\Reports\\Reports.jsx",[],"D:\\time_app\\client\\src\\pages\\Department\\Department.jsx",[],"D:\\time_app\\client\\src\\pages\\Information\\Information.jsx",["218"],"import React from 'react'\r\nimport Topbar from '../../components/Topbar/Topbar'\r\nimport './Information.css'\r\n\r\n\r\nexport default function Information() {\r\n  return (\r\n    <>\r\n      <div className='information'>\r\n        <div className=\"informationContainer\">\r\n          <h2 className='infoMainText'>Информация</h2>\r\n          <div className='testInformation'>\r\n          <a className='divLinkInformation' href=\"https://sfera.vtb.ru/knowledge/pages?id=110481\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <h4>Нашли проблему или есть предложения по улучшению пишите в комментариях!</h4></a>\r\n          </div>\r\n          <hr />\r\n          <div className=\"infoContainer\">\r\n\r\n            <div className=\"infoText\">\r\n\r\n              <h3>Кнопка Начать/Закончить</h3>\r\n              <p>После нажатия на кнопку открывается модальное окно. В нем необходимо выбрать <b>\"здоров\"</b> или <b>\"болен\"</b>. Если выбрано <b>\"болен\"</b>, то нужно дополнительно написать причину в комментарии.</p>\r\n              <h3>Статусы</h3>\r\n              <p style={{marginTop: '10px'}}><b style={{color: 'green'}}>Зеленый</b> - пользователь приступил к работе.</p>\r\n              <p><b style={{color: 'red'}}>Красный</b> - пользователь закончил работу.</p>\r\n              <p><b style={{color: 'yellow'}}>Жёлтый</b> - пользователь на больничном.</p>\r\n              {/*<p><b>Белый</b> - пользователь еще не совершал никаких действий.</p>*/}\r\n              <p><b style={{color: 'dodgerblue'}}>Синий</b> - пользователь в отпуске/отгул.</p>\r\n              <p><b style={{color: 'chocolate'}}>Коричневый</b> - пользователь отсутствует по другой причине.</p>\r\n              <p><b style={{opacity: '0.5'}}>Прозрачный</b> - пользователь удален.</p>\r\n              <h3>Главная страница</h3>\r\n              <p>На галвной страницы отражаються все сотрудники вашего департамета/отдела/группы</p>\r\n\r\n              <h3>Моя страница</h3>\r\n              <p>На данной странице пользователь может изменить свой пароль, для этого надо нажать на надпись <b>\"Изменить пароль\"</b>. В модальном окне нужно ввести старый и новый пароль, если операция прошла успешно, модальное окно закроется.</p>\r\n              <p>Ниже на данной странице есть таблица с данными о работе. Можно дополнительно отфильтровать диапазон нужных дат.</p>\r\n              <p>При нажатии на кнопку <b>\"Отпуск/Больничный\"</b> откроется таблица с данными. Доболнительно появится кнопка <b>\"+\"</b>. При нажатии на нее открывается модальное окно, где можно добавить необходимую информацию. {/*Если текущая дата входит в выбранный диапазон, то автоматически меняется <b>статус</b>*/}.</p>\r\n              <h4>Информация для начальников</h4>\r\n              <p>Начальник на странице пользователя дополнительно может изменять информацию, удалять пользователей, сбрасывать пароль,закочить рабочее время сотрудника и добавлять отпуск/больничный.</p>\r\n              <p>Так же начальнику доступна статистика по сотрудникам и информация по отчётам</p>\r\n\r\n              <h3>Дерево</h3>\r\n              <p>Через дерево можно переходить на отделы. При нажатии на стрелочку появляется список служб,отделов или групп.</p>\r\n\r\n              <h3>Страница отдела</h3>\r\n              <p>На странице отдела можно увидеть все сотрудников данного отдела. При нажатии на кнопку <b>\"Сделать главной\"</b> в всплывающем окне можно изменить отображение дочерних департаментов а так же закрепить основной департамент.</p>\r\n\r\n              <h3>Восстановление пользователя</h3>\r\n              <p>Чтобы восстановить пользователя, нужно зайти под его УЗ и нажать кнопку \"Начать\".</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","D:\\time_app\\client\\src\\pages\\Register\\Register.jsx",[],"D:\\time_app\\client\\src\\components\\Staff\\Staff.jsx",["219","220","221"],"import {useEffect,useState,useRef} from 'react'\r\nimport axios from 'axios'\r\nimport Employee from '../Employee/Employee'\r\nimport './Staff.css'\r\nimport {Link, useParams} from 'react-router-dom'\r\nimport Modal from '../Templates/Modal/Modal'\r\n\r\n\r\n\r\nexport default function Staff() {\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    const [statisticsWork, setStatisticsWork] = useState([])\r\n    const [users, setUsers] = useState([])\r\n    const [UsersDep, setUsersDeps] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [isJob, setIsJob] = useState(true)\r\n    const [modalMain, setModalMain] = useState(false)\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const departId = useParams().username;\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Вывод статистики для админов\r\n        const get_statistics_all_users = async () => {\r\n\r\n            if (localUser.isAdmin === true) {\r\n                const getUsers = {\r\n                    id: localUser._id\r\n                }\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n                const all = res.data[0].get_statistics_all_users[0]['all_users'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n\r\n                let all_users = filterUsersFoo(all)\r\n\r\n                if (res.data[0].get_statistics_all_users[0]['all_users'] === null && !!~document.location.href.indexOf('/all_users/')) {\r\n                    alert('Нет не одного пользователя в работе')\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null && !!~document.location.href.indexOf('/not_working_today/')) {\r\n                    alert('Сегодня все в работе')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null && !!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    alert('Вчера все работали')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_today'] === null && !!~document.location.href.indexOf('/sick_today/')) {\r\n                    alert('Нет болеющих сегодня')\r\n                    window.location.href = `/department/${localUser.departmentId}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null && !!~document.location.href.indexOf('/sick_yesterday')) {\r\n                    alert('Вчера не было сотрудников на больничном')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null && !!~document.location.href.indexOf('/vacation_today')) {\r\n                    alert('На сегодня нет сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null && !!~document.location.href.indexOf('/vacation_yesterday')) {\r\n                    alert('Вчера не было сотрудников в отпуске')\r\n                    window.location.href = `/department/${localUser.main_department}`\r\n                }\r\n                if (!!~document.location.href.indexOf('/all_users/')) {\r\n                    setIsJob(isJob)\r\n                    setStatisticsWork(all_users)\r\n                }\r\n                if (!!~document.location.href.indexOf('/not_working_today/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['not_working_today'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['not_working_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/not_worked_yesterday/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['not_worked_yesterday'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['not_worked_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/sick_today/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['sick_today'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['sick_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/sick_yesterday/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['sick_yesterday'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['sick_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/vacation_today/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['vacation_today'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['vacation_today'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n\r\n                if (!!~document.location.href.indexOf('/vacation_yesterday/')) {\r\n                    if (res.data[0].get_statistics_all_users[0]['vacation_yesterday'] === null) {\r\n\r\n                    } else {\r\n                        setIsJob(isJob)\r\n                        const sort = res.data[0].get_statistics_all_users[0]['vacation_yesterday'].sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                        setStatisticsWork(filterUsersFoo(sort))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // функция показывает нажата ли галочка показать дочернии\r\n        const statusChild = async () => {\r\n            const user = await axios.get('/api/user/' + localUser._id)\r\n            setChecked(user.data.see_child)\r\n            setUser(user.data)\r\n        }\r\n\r\n        const fetchUsers = async () => {\r\n            const res = await axios.get('/api/user');\r\n            res.data.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n            const filteredUsers = filterUsersFoo(res.data);\r\n            return filteredUsers.filter(user => user.department_id === departId);\r\n        };\r\n\r\n        const getUsersByDepIsCheckedTrue = async () => {\r\n            const info = { depsId: departId };\r\n            const res = await axios.post('/api/get_users_by_dep/', info);\r\n            const depUsers = res.data[0].get_users_by_dep;\r\n            if (depUsers === null) {\r\n                return [];\r\n            } else {\r\n                const sortedUsers = depUsers.sort((a, b) => a.user_name.localeCompare(b.user_name));\r\n                const filteredUsers = filterUsersFoo(sortedUsers);\r\n                return filteredUsers;\r\n            }\r\n        };\r\n\r\n        const combineUsers = async () => {\r\n            try {\r\n                const users = await fetchUsers();\r\n                let combinedArray = [];\r\n\r\n                if (checked && user.main_department===departId) {\r\n                    setIsJob(false)\r\n                    const us = await getUsersByDepIsCheckedTrue();\r\n                    combinedArray = combinedArray.concat(us);\r\n                } else {\r\n                    combinedArray = users;\r\n                }\r\n\r\n                setUsers(combinedArray);\r\n            } catch (error) {\r\n                console.error('Ошибка при объединении пользователей:', error);\r\n            }\r\n        };\r\n\r\n        // Вызов функции combineUsers для получения и объединения пользователей\r\n        combineUsers();\r\n\r\n\r\n        setIsJob(true)\r\n\r\n        if(departId){\r\n            setUsersDeps([])\r\n        }\r\n        get_statistics_all_users()\r\n        statusChild()\r\n\r\n\r\n    }, [departId,user.main_department])\r\n\r\n\r\n\r\n\r\n    //Сортировка пользователей по статусам\r\n    function filterUsersFoo(users) {\r\n        return users.filter(user => user.status === 1)\r\n            .concat(users.filter(user => user.status === 2))\r\n            .concat(users.filter(user => user.status === 3))\r\n            .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n            .concat(users.filter(user => user.status === 4))\r\n    }\r\n\r\n\r\n    const clickcheckbox = async () => {\r\n        setChecked(!checked)\r\n        const info = {\r\n            userId: localUser._id,\r\n            ischeked: !checked\r\n        };\r\n        await axios.post('/api/statusChild/', info);\r\n\r\n    }\r\n\r\n    const handleModalClick = async () => {\r\n        const add = {\r\n            id: localUser._id,\r\n            depsId: departId\r\n        }\r\n        const res = await axios.put('/api/user', add)\r\n        setModalMain(false)\r\n    }\r\n\r\n\r\n\r\n    const get_users_by_depIsOpen = async () => {\r\n\r\n        if (isJob) {\r\n            const info = {\r\n                depsId: departId\r\n            }\r\n            const res = await axios.post('/api/get_users_by_dep/', info)\r\n            const dep_users = res.data[0]['get_users_by_dep']\r\n            if (dep_users !== null) {\r\n                dep_users.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n                let filterUsers = filterUsersFoo(dep_users)\r\n                setUsersDeps(filterUsers)\r\n                setUsers([])\r\n                setIsJob(!isJob)\r\n                setIsOpen(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className='staff'>\r\n            <>\r\n                {departId && (\r\n                    <>\r\n                        {isJob ?\r\n                            <button onClick={get_users_by_depIsOpen} className=\"btnStaff\" style={{ width: '155px' }}>\r\n                                Показать дочерние\r\n                            </button>\r\n                            :\r\n                            <button onClick={() => window.location.href = `/department/${departId}`} className=\"btnStaff\" disabled={checked && user.main_department === departId}>\r\n                                Скрыть дочерние\r\n                            </button>\r\n                        }\r\n                        <button onClick={() => setModalMain(true)} className='btnStaff' style={{ float: 'right' }}>Сделать главной</button>\r\n                        {localUser.isAdmin ? <Link to={`/VacanciesView/`}><button className=\"btnStaff\">Показать вакансии</button></Link> : ''}\r\n                    </>\r\n                )}\r\n            </>\r\n\r\n\r\n            <div className=\"employeeWrapper\">\r\n\r\n                {\r\n                    users.map((user, id) => <Employee key={id} user={user} />)\r\n                }\r\n\r\n                {isOpen ?\r\n                    UsersDep.map((user, id) => <Employee key={id} user={user} />)\r\n                    :''\r\n\r\n                }\r\n\r\n                {!departId\r\n                    ? statisticsWork.map((user, id) => <Employee key={id} user={user} />)\r\n                    :''\r\n\r\n                }\r\n            </div>\r\n            <Modal active={modalMain} setActive={setModalMain}>\r\n                <h1>Изменение информации:</h1>\r\n                <hr/>\r\n                <form className=\"modalLoginBox\">\r\n                    <label>\r\n                        <input\r\n                            type='checkbox'\r\n                            onChange={clickcheckbox}\r\n                            checked={checked}\r\n                        />\r\n                        Добавить дочерние</label>\r\n                    <button className=\"ModalButtonDepartment\" type=\"submit\" onClick={handleModalClick}>\r\n                        Сделать главным департаментом\r\n                    </button>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","D:\\time_app\\client\\src\\components\\Templates\\Modal\\Modal.js",[],"D:\\time_app\\client\\src\\apiCalls.js",[],"D:\\time_app\\client\\src\\components\\Employee\\Employee.jsx",["222","223","224"],"import {useHistory} from 'react-router-dom'\r\nimport {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport './Employee.css'\r\n\r\nexport default function Employee({user}) {\r\n  const history =useHistory()\r\n  const [nominations, setNominations] = useState([])\r\n  const [admin, setAdmin] = useState()\r\n  const [date, setDate] = useState('')\r\n  const [time, setTime] = useState('')\r\n  const [dateStart, setDateStart] = useState()\r\n  const [dateEnd, setDateEnd] = useState()\r\n\r\n  const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n  const usersStatuses = {\r\n    0: '',\r\n    1: 'start',\r\n    2: 'end',\r\n    3: 'sick_leave',\r\n    4: 'deleted',\r\n    5: 'vacation',\r\n    6: 'time_off',\r\n    7: 'other'\r\n  }\r\n\r\n  function findStatus(e) {\r\n    for (let i in usersStatuses) {\r\n      if (i == e) {\r\n        return usersStatuses[i]\r\n      }\r\n    }\r\n  }\r\n\r\n  // Проверка, если пользователь в отпуске или на больничном, то вывод даты начала и конца\r\n  useEffect(() => {\r\n\r\n    const fetchUser = async () => {\r\n      const users = await axios.get('/api/user/' + user.id)\r\n      const res = await axios.get('/api/vacation?id=' + user.id);\r\n      const post = await axios.get('/api/post?type=1&id=' + user.id);\r\n      setNominations(users.data.nomination_status)\r\n\r\n      if (users.data.isadmin !== true) {\r\n        setAdmin('');\r\n      } else {\r\n        setAdmin('*');\r\n      }\r\n\r\n\r\n      if (res.data.length === 0) {\r\n        setDateStart('')\r\n        setDateEnd('')\r\n      } else {\r\n        setDateStart(res.data[0].workdate)\r\n        setDateEnd(res.data[0].worked)\r\n      }\r\n\r\n\r\n\r\n      if (post.data.length === 0) {\r\n        setDate('')\r\n        setTime('')\r\n      } else {\r\n        setDate(post.data[0].workdate)\r\n        setTime(post.data[0].workend)\r\n      }\r\n    }\r\n\r\n      if (user.status === 1 || user.status === 2 || user.status === 3\r\n          || user.status === 5 || user.status === 6 || user.status === 7)\r\n      {\r\n        fetchUser()\r\n    }\r\n\r\n  }, [user.id])\r\n\r\n  const handleClick = () => {\r\n    history.push(`/profile/${user.id}`);\r\n  };\r\n\r\n\r\n  const images = {\r\n    '1': { src: '../images/1.png', title: 'Тучка' },\r\n    '2': { src: '../images/2.png', title: 'Аркадий Паровозов' },\r\n    '3': { src: '../images/3.png', title: 'И так сойдет' },\r\n    '4': { src: '../images/4.png', title: 'Портной' },\r\n    '5': { src: '../images/5.png', title: 'Мама обезьянка' },\r\n    '6': { src: '../images/6.png', title: 'Кот Матроскин' },\r\n    '7': { src: '../images/7.png', title: 'Крот' },\r\n    '8': { src: '../images/8.png', title: 'Птица говорун(голосуем только среди дежурных)' },\r\n    '9': { src: '../images/9.png', title: 'Хома(Голосуем среди коллег из внедрения)' },\r\n    '10': { src: '../images/10.png', title: 'Симка и нолик' }\r\n  };\r\n\r\n\r\n  return (\r\n      <>\r\n        <div onClick={handleClick} className='name'>\r\n        <div className=\"searchBlockContainer\">\r\n            <div className={'employee ' + (findStatus(user.status))}>\r\n              <div className=\"angry-grid\">\r\n                <div id=\"item-0\">\r\n                  <span className='searchName'>{user.user_name}{localUser.isAdmin ? admin : ''}</span>\r\n                </div>\r\n                <div id=\"item-1\">\r\n                  {user.status === 5 && <div className='vacationText'>Отпуск:{dateStart}-{dateEnd}</div>}\r\n                  {user.status === 6 && <div className='vacationText'>Отгул:{dateStart}-{dateEnd}</div>}\r\n                  {user.status === 7 && <div className='vacationText'>Другая причина:{dateStart}-{dateEnd}</div>}\r\n                  {user.status === 3 && <div className='vacationText'>Больничный:{dateStart}-{dateEnd}</div>}\r\n                  {user.status === 2 && <div className='vacationText'>{date} {time}</div>}\r\n                </div>\r\n                <div id=\"item-2\">\r\n                  {Object.keys(images).map((key, id) => (\r\n                      (user.nomination_status === key || user.nomination_status === parseInt(key) || nominations === key || nominations === parseInt(key)) &&\r\n                      <img\r\n                          key={id}\r\n                          src={images[key].src}\r\n                          title={images[key].title}\r\n                          alt={`Image for ${key}`}\r\n                      />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n  )\r\n}\r\n\r\n","D:\\time_app\\client\\src\\components\\Topbar\\Topbar.jsx",["225","226","227","228","229"],"import {ExitToApp} from '@material-ui/icons'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport {Link, useParams} from 'react-router-dom'\r\nimport Status from '../Status/Status'\r\nimport Modal from \"../Templates/Modal/Modal\";\r\nimport './Topbar.css'\r\nimport MessagePost from '../MessagePost/MessagePost'\r\nimport SearchBlock from \"../SearchBlock/SearchBlock\";\r\nimport Statistics from \"./Statistics/Statistics\";\r\n\r\n\r\nexport default function Topbar() {\r\n  const [user, setUser] = useState([])\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const [allUsers, setAllUsers] = useState([])\r\n  const [findUsers, setFindUsers] = useState([])\r\n  const [isBlock, setIsBlock] = useState(false)\r\n  const localUser = JSON.parse(localStorage.getItem('user'))\r\n  const departId = useParams().username\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const res = await axios.get('/api/user/')\r\n      setNotificationCount(res.data)\r\n      res.data.sort((a, b) => a.user_name.localeCompare(b.user_name))\r\n      let filterUsers = filterUser(res.data)\r\n      setAllUsers(filterUsers)\r\n\r\n    }\r\n\r\n    const typework = async () => {\r\n      const res = await axios.get('/api/typework_status/')\r\n    }\r\n\r\n\r\n    const fetchUserName = async () => {\r\n      const res = await axios.get('/api/user/' + localUser._id)\r\n      setUser(res.data)\r\n    }\r\n\r\n\r\n    typework()\r\n    fetchUserName()\r\n    fetchUser()\r\n\r\n  }, [])\r\n\r\n\r\n  function filterUser(users) {\r\n    return users.filter(user => user.status === 1)\r\n        .concat(users.filter(user => user.status === 2))\r\n        .concat(users.filter(user => user.status === 3))\r\n        .concat(users.filter(user => user.status !== 1 && user.status !== 2 && user.status !== 3 && user.status !== 4))\r\n        .concat(users.filter(user => user.status === 4))\r\n  }\r\n\r\n  // выход\r\n  const logOut = () => {\r\n    localStorage.clear()\r\n    window.location.reload()\r\n    window.location.href = '/'\r\n  }\r\n\r\n\r\n\r\n\r\n  //Поиск пользователя\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && e.target.value !== '') {\r\n      setFindUsers(allUsers.filter(user => {\r\n        return user.user_name.toLowerCase().includes(searchValue.toLowerCase())\r\n      }))\r\n      setIsBlock(true)\r\n    }\r\n  }\r\n  //Поиск пользователя\r\n  const handleClick = (e) => {\r\n    if (e.target.value !== '') {\r\n      setFindUsers(allUsers.filter(user => {\r\n        return user.user_name.toLowerCase().includes(searchValue.toLowerCase())\r\n      }))\r\n      setIsBlock(true)\r\n    }\r\n  }\r\n  if (user.main_department === departId) {\r\n  }\r\n\r\n\r\n\r\n  const [notificationCount, setNotificationCount] = useState(0);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const togglePopup = () => {\r\n    setIsOpen(!isOpen);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n      <div>\r\n        <div className='topbarContainer'>\r\n          <div className=\"topbarLeft\">\r\n            <Status/>\r\n          </div>\r\n          <Statistics/>\r\n          <div className=\"topbarRight\">\r\n            <div className=\"topbarLinks\">\r\n              <div>\r\n                <Link to={`/department/${user.main_department}`} className=\"topbarLink\">\r\n                  <img src={'../images/VTB.png'} alt='VTB' width='150' height='50'/>\r\n                </Link>\r\n              </div>\r\n              <div className='vr'></div>\r\n\r\n              <div className='topPage'><Link to={`/profile/${user.id}`} className=\"topbarLink\">{localUser.username}</Link>\r\n\r\n              </div>\r\n\r\n              {\r\n                localUser.isAdmin\r\n                    ? <div className='vr'></div>\r\n                    :''\r\n              }\r\n\r\n              {\r\n                localUser.isAdmin\r\n                    ?\r\n                  <div className='topPage'>\r\n                    <Link to='/Reports' className=\"topbarLink\"><span className='link'>Отчеты</span></Link>\r\n                  </div>\r\n                    : ''\r\n              }\r\n\r\n              <div className='vr'></div>\r\n\r\n              <div className='topPage'>\r\n                <Link to='/Information' className=\"topbarLink\">?</Link>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"search\">\r\n              <input onKeyPress={handleKeyPress} value={searchValue} onChange={(e) => setSearchValue(e.target.value)}\r\n                     type=\"search\" name=\"\" placeholder=\"поиск пользователя\" className=\"input\"/>\r\n              <button onClick={handleClick} value={searchValue} onChange={(e) => setSearchValue(e.target.value)}\r\n                      type=\"submit\" className=\"submit\"/>\r\n            </div>\r\n\r\n{/*            <div className=\"notification\">\r\n              <div onClick={togglePopup} className='image-container'>\r\n                <img src='../images/bell.png' className=\"message\"/>\r\n                {notificationCount.length > 0 && <div className=\"notification-badge\">{notificationCount.length}</div>}\r\n              </div>\r\n              {isOpen && (\r\n                  <div className=\"notification-popup\">\r\n                    {allUsers.map((user, id) => (\r\n                        <MessagePost key={id} user={user} />\r\n                    ))}\r\n                  </div>\r\n              )}\r\n            </div>*/}\r\n            <div className=\"exit\">\r\n              <ExitToApp onClick={logOut}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {isBlock\r\n            ? <Modal active={handleClick} setActive={setIsBlock} >\r\n              <h1><p align=\"center\">Поиск</p></h1>\r\n              <h4>Найдено: {findUsers.length}</h4>\r\n              <hr/>\r\n              <form>\r\n                <div>\r\n                  {findUsers.map((user) => <SearchBlock user={user} />)}\r\n                </div>\r\n                <button className=\"button\" type=\"submit\" onClick={() => setIsBlock(false)}>\r\n                  Закрыть\r\n                </button>\r\n              </form>\r\n            </Modal>\r\n            : <></>\r\n        }\r\n      </div>\r\n  )\r\n}\r\n","D:\\time_app\\client\\src\\components\\Sidebar\\Sidebar.jsx",[],"D:\\time_app\\client\\src\\components\\Pagination\\Pagination.jsx",[],"D:\\time_app\\client\\src\\components\\Feed\\Feed.jsx",["230"],"import Staff from '../Staff/Staff'\r\nimport './Feed.css'\r\nimport React from \"react\";\r\n\r\nexport default function Feed() {\r\n  return (\r\n\r\n    <div className='feed'>\r\n      <div>\r\n          <h4 className='h1'>Сервис находится в тестовом режиме  ➜ <a className=\"a4\" href=\"https://sfera.vtb.ru/knowledge/pages?id=110481\" target=\"_blank\">Нашли ошибку? Пиши в комментариях!</a></h4>\r\n      </div>\r\n      <div className=\"feedWrapper\">\r\n\r\n        <Staff/>\r\n      </div>\r\n\r\n        <div className=\"circle-container\">\r\n            <div className=\"circle\">\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","D:\\time_app\\client\\src\\components\\ReportsInfo\\RepostsInfo.jsx",[],"D:\\time_app\\client\\src\\components\\Home\\Home.jsx",[],"D:\\time_app\\client\\src\\components\\Status\\Status.jsx",["231","232","233","234"],"import {useEffect, useRef, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {CircularProgress} from '@material-ui/core'\r\nimport Modal from '../Templates/Modal/Modal'\r\nimport './Status.css'\r\n\r\nconst moment = require('moment');\r\nconst usersStatuses = {\r\n  0: '',\r\n  1: 'start',\r\n  2: 'end',\r\n  3: 'sick_leave',\r\n  4: 'deleted',\r\n  5: 'vacation',\r\n  6: 'time_off',\r\n  7: 'other'\r\n}\r\n\r\nfunction findStatus(k) {\r\n  for (let i in usersStatuses) {\r\n    if (i == k) {\r\n      return usersStatuses[i]\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Status() {\r\n  const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n  const [places, setplaces] = useState([])\r\n  const [office, setoffice] = useState([])\r\n  const [workplace, setworkplace] = useState([])\r\n  const [place, setPlace] = useState([])\r\n  const [err, setErr] = useState('')\r\n  const [user, setUser] = useState([])\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [error, setError] = useState('')\r\n  const [modalActive, setModalActive] = useState(false)\r\n  const [modalActiveReserve, setModalActiveReserve] = useState(false)\r\n  const [modalName, setModalName] = useState()\r\n  const modalComment = useRef()\r\n  const PlaceRef = useRef()\r\n  const DataTime = useRef()\r\n  const Offices = useRef()\r\n\r\n\r\n  // получение данных пользователя о работе\r\n  useEffect(() => {\r\n\r\n\r\n    const fetchUser = async () => {\r\n\r\n      const res = await axios.get('/api/user/' + localUser._id)\r\n      setUser(res.data)\r\n\r\n      const work = await axios.get('/api/workplace_logs_get/' + localUser._id)\r\n      const filter = work.data.filter(element => element.is_canceled !== true)\r\n      setworkplace(filter)\r\n\r\n      const offices = await axios.get('/api/office_get/')\r\n      const officesMap = offices.data.map(element => element.location)\r\n      setoffice(officesMap)\r\n\r\n\r\n      const date = moment().format('YYYY-MM-DD')\r\n      if (DataTime.current) {\r\n        DataTime.current.value = date;\r\n      }\r\n\r\n      if (\r\n          !Offices.current || Offices.current.value === '' ||\r\n          !PlaceRef.current || PlaceRef.current.value === '' ||\r\n          !DataTime.current || DataTime.current.value === ''\r\n      ) {\r\n        const off = 1;\r\n\r\n        const add = {\r\n          date: date,\r\n          office: off\r\n        };\r\n\r\n        const places = await axios.post('/api/workplaces/', add);\r\n        setplaces(places.data);\r\n      }\r\n      if (Offices.current) {\r\n        if (Offices.current.value === null) {\r\n          Offices.current.value = '';\r\n        } else {\r\n\r\n          const add = {\r\n            date: date,\r\n            office: Offices.current.value\r\n          };\r\n\r\n          const places = await axios.post('/api/workplaces/', add)\r\n          setplaces(places.data)\r\n        }\r\n        if (places && places.length > 0) {\r\n          const placeMap = places.map(element => element.location_res);\r\n          setPlace(placeMap);\r\n        } else {\r\n          setPlace([]); // Установите пустой массив, если нет данных\r\n        }\r\n      }\r\n    }\r\n    fetchUser()\r\n  }, [localUser._id])\r\n\r\n  // начало работы.\r\n  const handlerStart = async (e) => {\r\n    e.preventDefault()\r\n    if (+modalName === 0 && modalComment.current.value === '') {\r\n      setError('Заполните комментарий')\r\n      return\r\n    }\r\n    if (+modalName !== 0 && +modalName !== 1) {\r\n      setError('Заполните состояние здоровья')\r\n    } else {\r\n      setIsFetching(true)\r\n\r\n      const newPost = {\r\n        userId: localUser._id,\r\n        typework_id: 1,\r\n        status: 1,\r\n        healthStart: +modalName,\r\n        commentStart: modalComment.current.value || '-',\r\n        workStart: new Date(Date.now())\r\n      }\r\n      try {\r\n        const res = await axios.post(\"/api/post/\", newPost)\r\n        /*await axios.post(\"/api/status/\")*/\r\n        /*await axios.put('/api/user/'+user._id, {status:1, userId: user._id})*/\r\n        localStorage.setItem('user', JSON.stringify({...localUser, status: 1}))\r\n        window.location.reload()\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // конец работы\r\n  const handlerEnd = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (+modalName === 0 && modalComment.current.value === '') {\r\n      setError('Заполните комментарий');\r\n      return;\r\n    }\r\n\r\n    if (+modalName !== 0 && +modalName !== 1) {\r\n      setError('Заполните состояние здоровья');\r\n    } else {\r\n      setIsFetching(true);\r\n\r\n      try {\r\n        const res = await axios.get('/api/vacation?id=' + localUser._id);\r\n        const date = moment().format('DD.MM.YY')\r\n        let newstatus;\r\n\r\n        if (res.data.length > 0 && date >= res.data[0]['workdate'] && date <= res.data[0]['worked']) {\r\n          newstatus = res.data[0]['typework_id']\r\n        } else {\r\n          newstatus = 2\r\n        }\r\n\r\n        const newPost = {\r\n          userId: localUser._id,\r\n          typework_id: 1,\r\n          status: newstatus,\r\n          healthEnd: +modalName,\r\n          commentEnd: modalComment.current.value || '-',\r\n          workEnd: new Date(Date.now())\r\n        };\r\n\r\n        await axios.put(\"/api/post/\", newPost);\r\n        /*await axios.put('/api/user/'+user._id, {status:2, userId: user._id})*/\r\n        localStorage.setItem('user', JSON.stringify({...localUser, status: 2}));\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const handleName = e => {\r\n    setModalName(e.target.value)\r\n  }\r\n\r\n  const clickReserve = async () => {\r\n    setErr('')\r\n    if (PlaceRef.current.value === '' || DataTime.current.value === '') {\r\n\r\n    } else {\r\n      const space = PlaceRef.current.value.toString()\r\n      const wp_id = space.split('(')\r\n      const ww = wp_id[0].split(\"^\")\r\n      if (wp_id[1]) {\r\n        setErr('Место занято')\r\n      } else {\r\n        const reservePlace = {\r\n          user_id: localUser._id,\r\n          wp_id: ww[0],\r\n          office: Offices.current.value,\r\n          booking_date: DataTime.current.value,\r\n          is_canceled: false\r\n        }\r\n        await axios.post(\"/api/workplace_logs/\", reservePlace)\r\n      }\r\n      const add = {\r\n        date: DataTime.current.value,\r\n        office: Offices.current.value\r\n      }\r\n      const places = await axios.post('/api/workplaces/', add)\r\n      setplaces(places.data)\r\n    }\r\n    const work = await axios.get('/api/workplace_logs_get/' + localUser._id)\r\n    const filter = work.data.filter(element => element.is_canceled !== true)\r\n    setworkplace(filter)\r\n\r\n  }\r\n\r\n\r\n  const DataClick = async () => {\r\n    const date = moment().format('YYYY-MM-DD');\r\n    if (DataTime.current.value < date) {\r\n      DataTime.current.value = date\r\n      setErr('Не актуальная дата')\r\n    } else {\r\n      setErr('')\r\n    }\r\n    const add = {\r\n      date: DataTime.current.value,\r\n      office: Offices.current.value\r\n    }\r\n    const places = await axios.post('/api/workplaces/', add)\r\n    setplaces(places.data)\r\n  }\r\n\r\n  const clickOffice = async () => {\r\n\r\n    setErr('')\r\n    const date = moment().format('YYYY-MM-DD');\r\n    if (DataTime.current.value === '') {\r\n      DataTime.current.value = date\r\n    } else {\r\n      const add = {\r\n        date: DataTime.current.value,\r\n        office: Offices.current.value\r\n      }\r\n      const places = await axios.post('/api/workplaces/', add)\r\n      setplaces(places.data)\r\n      const placeMap = places.data.map(element => element.location_res)\r\n      setPlace(placeMap)\r\n    }\r\n  }\r\n\r\n  const clickPlace = async () => {\r\n    setErr('')\r\n    if (DataTime.current.value === '' || PlaceRef.current.value === '') {\r\n    } else {\r\n      const add = {\r\n        date: DataTime.current.value,\r\n        office: Offices.current.value\r\n      }\r\n      const places = await axios.post('/api/workplaces/', add)\r\n      setplaces(places.data)\r\n      const placeMap = places.data.map(element => element.location_res)\r\n      setPlace(placeMap)\r\n    }\r\n  }\r\n\r\n\r\n  const clearPlace = async () => {\r\n    setErr('')\r\n\r\n    const date = moment().format('YYYY-MM-DD');\r\n\r\n    const is_canceled = {\r\n      user_id: localUser._id,\r\n      canceled: true,\r\n      date: date\r\n    }\r\n\r\n    await axios.post('/api/workplace_logs_clear/', is_canceled)\r\n    const work = await axios.get('/api/workplace_logs_get/' + localUser._id)\r\n\r\n    const filter = work.data.filter(element => element.is_canceled !== true)\r\n    setworkplace(filter)\r\n\r\n    const add = {\r\n      date: DataTime.current.value,\r\n      office: Offices.current.value\r\n    }\r\n    const places = await axios.post('/api/workplaces/', add)\r\n    setplaces(places.data)\r\n    const placeMap = places.data.map(element => element.location_res)\r\n    setPlace(placeMap)\r\n\r\n  }\r\n\r\n  const deletePlace = async (e) => {\r\n    setErr('')\r\n    e.preventDefault()\r\n\r\n    const is_canceled = {\r\n      user_id: localUser._id,\r\n      id: e.target.value,\r\n      canceled: true\r\n    }\r\n\r\n    await axios.post('/api/workplace_logs_post/', is_canceled)\r\n    const work = await axios.get('/api/workplace_logs_get/' + localUser._id)\r\n    const filter = work.data.filter(element => element.is_canceled !== true)\r\n    const add = {\r\n      date: DataTime.current.value,\r\n      office: Offices.current.value\r\n    }\r\n    const places = await axios.post('/api/workplaces/', add)\r\n    setplaces(places.data)\r\n    setworkplace(filter)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n      <>\r\n        <table border=\"0\">\r\n          <tr>\r\n            <td>\r\n              <button type='submit' onClick={() => setModalActive(true)}\r\n                      className={'statusBtn ' + (findStatus(user.status))}>\r\n                {isFetching\r\n                    ? <CircularProgress style={{color: 'white', size: '20px', width: '20px', height: '20px'}}/>\r\n                    : user.status !== 1\r\n                        ? 'Начать'\r\n                        : 'Закончить'\r\n                }\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button type='submit' onClick={() => setModalActiveReserve(true)} className='statusBtn'>\r\n                <h5>Зарезервировать место</h5>\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n\r\n        <Modal active={modalActive} setActive={setModalActive}>\r\n          <h1>Изменение информации:</h1>\r\n          <hr/>\r\n          {error && <div className='modalError'>{error}</div>}\r\n          <form className=\"modalLoginBox\" onSubmit={user.status === 1 ? handlerEnd : handlerStart}>\r\n            <div className='statusCheckbox'>\r\n              <label htmlFor='sickLeave'>\r\n                <input\r\n                    type='radio'\r\n                    value={1}\r\n                    id='sickLeave'\r\n                    name='sickLeave'\r\n                    onChange={handleName}\r\n                    checked={+modalName === 1}\r\n                />Здоров</label>\r\n              <label htmlFor='vacation'>\r\n                <input\r\n                    type='radio'\r\n                    value={0}\r\n                    id='vacation'\r\n                    name='vacation'\r\n                    onChange={handleName}\r\n                    checked={+modalName === 0}\r\n                />Болен</label>\r\n            </div>\r\n            <input\r\n                placeholder=\"Комментарий\"\r\n                className=\"ModalInputStatus\"\r\n                ref={modalComment}\r\n            />\r\n            <button className=\"ModalButton\" type=\"submit\" disabled={isFetching}>\r\n              {user.status !== 1\r\n                  ? 'Начать'\r\n                  : 'Закончить'\r\n              }\r\n            </button>\r\n          </form>\r\n        </Modal>\r\n        <Modal active={modalActiveReserve} setActive={setModalActiveReserve}>\r\n          <h1 style={{textAlign: 'center'}}>Зарезервировать рабочее место</h1>\r\n\r\n          <br/>\r\n          {err &&\r\n          <div className='modalError'>\r\n            {err}\r\n          </div>\r\n          }\r\n          <hr/>\r\n          <br/>\r\n          <div className='flex'>\r\n            <div>\r\n              <label style={{fontWeight: \"bold\"}}>Дата: </label><input\r\n                type='date'\r\n                className=\"ModalInputDate\"\r\n                ref={DataTime}\r\n                onChange={DataClick}\r\n            />\r\n            </div>\r\n\r\n            <div style={{width: '50px'}}></div>\r\n\r\n            <div><label style={{fontWeight: \"bold\"}}>Офис: </label>\r\n\r\n              <select ref={Offices} onClick={clickOffice} className='selectwork'>\r\n\r\n                {office.map((work, id) => <option key={id} title={work} value={id + 1}>{work}</option>)}\r\n\r\n              </select>\r\n            </div>\r\n\r\n            <div style={{width: '50px'}}></div>\r\n\r\n            <div><label style={{fontWeight: \"bold\"}}>Место: </label>\r\n\r\n              <select ref={PlaceRef} onClick={clickPlace} className='selectwork'>\r\n\r\n                {places.map((work, id) => <option key={id} title={work.workplace_id}\r\n                                                  value={work.workplace_id + \"^\" + work.location_res}>{work.location_res}</option>)}\r\n\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <br/>\r\n          <button className=\"ModalButton\" onClick={clickReserve} type=\"submit\" disabled={isFetching}>\r\n            Зарезервировать место\r\n          </button>\r\n          <br/>\r\n          <br/>\r\n          <hr/>\r\n\r\n          <div className='divreserve'>\r\n            {workplace.map((array, id) =>\r\n                <div className='place'>Дата: {array.booking_date} Место: {array.place} Офис:{array.location}\r\n                  <button className='placeButton' key={id} value={array.id} onClick={deletePlace}>Снять резерв</button>\r\n                </div>)}\r\n          </div>\r\n          <br/>\r\n          <br/>\r\n          <button onClick={clearPlace} className=\"ModalButton\">Отменить все места</button>\r\n          <br/><br/>\r\n        </Modal>\r\n      </>\r\n  )\r\n}\r\n","D:\\time_app\\client\\src\\components\\SearchBlock\\SearchBlock.jsx",["235","236","237","238","239"],"import {Link} from 'react-router-dom'\r\nimport './SearchBlock.css'\r\nimport {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst usersStatuses = {0: '', 1: 'start', 2: 'end', 3: 'sick_leave', 4: 'deleted' ,5: 'vacation', 6: 'time_off', 7: 'other'}\r\nfunction findStatus(k){\r\n    for(let i in usersStatuses){\r\n        if(i == k){\r\n            return usersStatuses[i]\r\n        }\r\n    }\r\n}\r\n\r\nexport default function SearchBlock({user}) {\r\n    const [nominations, setNominations] = useState([])\r\n    const [admin, setAdmin] = useState()\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState('')\r\n    const [dateStart, setDateStart] = useState()\r\n    const [dateEnd, setDateEnd] = useState()\r\n\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n    const usersStatuses = {\r\n        0: '',\r\n        1: 'start',\r\n        2: 'end',\r\n        3: 'sick_leave',\r\n        4: 'deleted',\r\n        5: 'vacation',\r\n        6: 'time_off',\r\n        7: 'other'\r\n    }\r\n\r\n    function findStatus(k) {\r\n        for (let i in usersStatuses) {\r\n            if (i == k) {\r\n                return usersStatuses[i]\r\n            }\r\n        }\r\n    }\r\n\r\n    // Проверка, если пользователь в отпуске или на больничном, то вывод даты начала и конца\r\n    useEffect(() => {\r\n\r\n        const fetchUser = async () => {\r\n            const users = await axios.get('/api/user/' + user.id)\r\n            const res = await axios.get('/api/vacation?id=' + user.id);\r\n            const post = await axios.get('/api/post?type=1&id=' + user.id);\r\n            setNominations(users.data.nomination_status)\r\n\r\n            if (users.data.isadmin !== true) {\r\n                setAdmin('');\r\n            } else {\r\n                setAdmin('*');\r\n            }\r\n\r\n\r\n            if (res.data.length === 0) {\r\n                setDateStart('')\r\n                setDateEnd('')\r\n            } else {\r\n                setDateStart(res.data[0].workdate)\r\n                setDateEnd(res.data[0].worked)\r\n            }\r\n\r\n\r\n\r\n            if (post.data.length === 0) {\r\n                setDate('')\r\n                setTime('')\r\n            } else {\r\n                setDate(post.data[0].workdate)\r\n                setTime(post.data[0].workend)\r\n            }\r\n        }\r\n\r\n        if (user.status === 1 || user.status === 2 || user.status === 3\r\n            || user.status === 5 || user.status === 6 || user.status === 7)\r\n        {\r\n            fetchUser()\r\n        }\r\n\r\n    }, [user.id])\r\n\r\n\r\n    const images = {\r\n        '1': { src: '../images/1.png', title: 'Тучка' },\r\n        '2': { src: '../images/2.png', title: 'Аркадий Паровозов' },\r\n        '3': { src: '../images/3.png', title: 'И так сойдет' },\r\n        '4': { src: '../images/4.png', title: 'Портной' },\r\n        '5': { src: '../images/5.png', title: 'Мама обезьянка' },\r\n        '6': { src: '../images/6.png', title: 'Кот Матроскин' },\r\n        '7': { src: '../images/7.png', title: 'Крот' },\r\n        '8': { src: '../images/8.png', title: 'Птица говорун(голосуем только среди дежурных)' },\r\n        '9': { src: '../images/9.png', title: 'Хома(Голосуем среди коллег из внедрения)' },\r\n        '10': { src: '../images/10.png', title: 'Симка и нолик' }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"searchBlockContainer\">\r\n                    <Link to={`/profile/${user.id}`} className='name'\r\n                          onClick={() => window.location.href = `/profile/${user.id}`}>\r\n                        <div className={'employee ' + (findStatus(user.status))}>\r\n                            <div className=\"angry-grid\">\r\n                                <div id=\"item-0\">\r\n                                    <span className='searchName'>{user.user_name}{localUser.isAdmin ? admin:''}</span>\r\n                                </div>\r\n                                <div id=\"item-1\">\r\n\r\n                                    {user.status === 5 && <div className='vacationText'>Отпуск:{dateStart}-{dateEnd}</div>}\r\n                                    {user.status === 6 && <div className='vacationText'>Отгул:{dateStart}-{dateEnd}</div>}\r\n                                    {user.status === 7 && <div className='vacationText'>Другая причина:{dateStart}-{dateEnd}</div>}\r\n                                    {user.status === 3 && <div className='vacationText'>Больничный:{dateStart}-{dateEnd}</div>}\r\n                                    {user.status === 2 && <div className='vacationText'>{date} {time}</div>}\r\n\r\n                                </div>\r\n                                <div id=\"item-2\">\r\n\r\n                                    {Object.keys(images).map((key, id) => (\r\n                                        (user.nomination_status === key || user.nomination_status === parseInt(key) || nominations===key || nominations===parseInt(key)) &&\r\n\r\n                                        <img\r\n                                            key={id}\r\n                                            src={images[key].src}\r\n                                            title={images[key].title}\r\n                                            alt={`Image for ${key}`}\r\n                                        />\r\n\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","D:\\time_app\\client\\src\\components\\ProfileInfo\\ProfileInfo.jsx",["240","241","242","243","244","245","246","247","248","249","250"],"D:\\time_app\\client\\src\\components\\VacationPost\\VacationPost.jsx",[],"D:\\time_app\\client\\src\\components\\InfoPost\\InfoPost.jsx",[],"D:\\time_app\\client\\src\\pages\\ReportsNominations\\ReportsNominations.jsx",["251","252","253","254","255","256","257","258","259","260","261"],"import Topbar from '../../components/Topbar/Topbar'\r\nimport '../ReportsNominations/ReportsNominations.css'\r\nimport React, {useRef, useState,useMemo} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport { CSVLink } from 'react-csv';\r\nimport axios from \"axios\";\r\nimport RepostInfoNominations from \"../../components/RepostInfoNominations/RepostInfoNominations\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\n\r\n\r\nexport default function ReportsNominations() {\r\n    const [sortConfig, setSortConfig] = useState({ key: 'Кто', direction: 'ascending' });\r\n    const [sortConfig1, setSortConfig1] = useState({ key: 'Номинант', direction: 'ascending' });\r\n    const [sortConfig2, setSortConfig2] = useState({ key: 'nominations_name', direction: 'ascending' });\r\n    const [sortConfig3, setSortConfig3] = useState({ key: 'date', direction: 'ascending' });\r\n\r\n\r\n    const [error, setError] = useState('')\r\n    const historyStartWork = useRef(null)\r\n    const historyEndWork = useRef(null)\r\n    const [isFilter, setIsFilter] = useState(false)\r\n    const [posts, setPosts] = useState([])\r\n    const [isOpen, setisOpen] = useState(false)\r\n    const username = useParams()\r\n\r\n\r\n\r\n\r\n    const handleClick = async () => {\r\n        const start = historyStartWork.current.value\r\n        const end = historyEndWork.current.value\r\n        if (start === \"\" || end === \"\") {\r\n            setError('Введите дату')\r\n        } else {\r\n            if (start !== '' || end !== '') {\r\n                setError('Выберите дату')\r\n            }\r\n            if (end < start) {\r\n                setError('Конечная дата меньше начальной')\r\n            } else {\r\n\r\n                const filter = {\r\n                    startDateNomination: historyStartWork.current.value,\r\n                    endDateNomination: historyEndWork.current.value,\r\n                }\r\n                setError('')\r\n\r\n                const fill = async () => {\r\n                    const res = await axios.post('/api/post/Reports', filter)\r\n                    setPosts(res.data)\r\n                    setError('')\r\n                }\r\n                fill()\r\n            }\r\n        }\r\n    }\r\n    const handleClickCancel = async () => {\r\n        setError('')\r\n        setIsFilter(false)\r\n        historyStartWork.current.value = ''\r\n        historyEndWork.current.value = ''\r\n    }\r\n\r\n\r\n    const requestSort = (key) => {\r\n        if (historyStartWork.current.value !== '' && historyEndWork.current.value !== '') {\r\n            let direction = 'ascending';\r\n            if (sortConfig.key === key && sortConfig.direction === 'ascending' ||\r\n                sortConfig1.key === key && sortConfig1.direction === 'ascending' ||\r\n                sortConfig2.key === key && sortConfig2.direction === 'ascending' ||\r\n                sortConfig3.key === key && sortConfig3.direction === 'ascending'\r\n            ) {\r\n                direction = 'descending';\r\n            }\r\n            setSortConfig({ key, direction });\r\n            setSortConfig1({ key, direction });\r\n            setSortConfig2({ key, direction });\r\n            setSortConfig3({ key, direction });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const sortedPosts = useMemo(() => {\r\n        const sortablePosts = [...posts];\r\n        if (sortConfig !== null) {\r\n            sortablePosts.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                setisOpen(true)\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return sortablePosts;\r\n    }, [posts, sortConfig]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='Reports'>\r\n                <div className=\"ReportsContainer\">\r\n                    <h2 className='ReportsMainText'>Отчет по номинациям</h2>\r\n                    {error && <div className='errorHistoryInfo'>{error}</div>}\r\n                    <hr/>\r\n                    <br/>\r\n                    <div style={{display:'flex'}}>\r\n                        <div>\r\n                    <input\r\n                        type='date'\r\n                        placeholder=\"Начало работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyStartWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    />\r\n                        </div>\r\n                        <div>\r\n                            —  <input\r\n                        type='date'\r\n                        placeholder=\"Конец работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyEndWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    />\r\n                        </div>\r\n                    <div>\r\n                    <button className=\"historyButton\" onClick={handleClick}>Найти</button>\r\n                    </div>\r\n                        <div>\r\n                        <button className=\"historyButton\" onClick={handleClickCancel}>Сбросить</button>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n\r\n                    </div>\r\n                    {isOpen && <div>\r\n                        <CSVLink data={posts} filename={\"nominations.csv\"}>Download CSV</CSVLink>\r\n                    </div>\r\n                    }\r\n                    <br/>\r\n                    <hr/>\r\n                    <br/>\r\n                    <tr>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('Кто')}>\r\n                            Кто голосовал {sortConfig.key === 'Кто' && (\r\n                            <span className=\"column\">{sortConfig.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('Номинант')}>\r\n                            Номинировал {sortConfig1.key === 'Номинант' && (\r\n                            <span className=\"column1\">{sortConfig1.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('nominations_name')}>\r\n                            Имя номинации {sortConfig2.key === 'nominations_name' && (\r\n                            <span className=\"column2\">{sortConfig2.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('date')}>\r\n                            Дата голосования {sortConfig3.key === 'date' && (\r\n                            <span className=\"column3\">{sortConfig3.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                    </tr>\r\n\r\n                    {\r\n                        sortedPosts.map((posts, id) => <RepostInfoNominations key={id} posts={posts} username={username}/>)\r\n                    }\r\n\r\n\r\n{/*{                   <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}\r\n                                currentPage={currentPage}/>}*/}\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","D:\\time_app\\client\\src\\pages\\ReportsHistory\\ReportsHistory.jsx",["262","263","264","265","266","267","268","269","270","271","272","273","274"],"\r\nimport React, {useMemo, useRef, useState} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport RepostsInfo from \"../../components/ReportsInfo/RepostsInfo\";\r\nimport Pagination from \"../../components/Pagination/Pagination\";\r\nimport '../ReportsHistory/ReportsHistory.css'\r\nexport default function ReportsHistory() {\r\n    const [sortConfig, setSortConfig] = useState({ key: 'user_name', direction: 'ascending' });\r\n    const [sortConfig1, setSortConfig1] = useState({ key: 'workstart', direction: 'ascending' });\r\n    const [sortConfig2, setSortConfig2] = useState({ key: 'workend', direction: 'ascending' });\r\n    const [sortConfig3, setSortConfig3] = useState({ key: 'worklong', direction: 'ascending' });\r\n    const [sortConfig4, setSortConfig4] = useState({ key: 'comment', direction: 'ascending' });\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postsPerPage] = useState(30)\r\n\r\n    const lastPostIndex = currentPage * postsPerPage\r\n    const firstPostIndex = lastPostIndex - postsPerPage\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [error, setError] = useState('')\r\n    const historyStartWork = useRef(null)\r\n    const historyEndWork = useRef(null)\r\n    const [isFilter, setIsFilter] = useState(false)\r\n    const [posts, setPosts] = useState([])\r\n    const currentlyPosts = posts.slice(firstPostIndex, lastPostIndex)\r\n    const username = useParams()\r\n\r\n\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber)\r\n\r\n\r\n    const handleClick = async () => {\r\n        const start = historyStartWork.current.value\r\n        const end = historyEndWork.current.value\r\n        if (start === \"\" || end === \"\") {\r\n            setError('Введите дату')\r\n        } else {\r\n            if (start !== '' || end !== '') {\r\n                setError('Выберите дату')\r\n            }\r\n            if (end < start) {\r\n                setError('Конечная дата меньше начальной')\r\n            } else {\r\n\r\n                const filter = {\r\n                    startdate: historyStartWork.current.value,\r\n                    enddate: historyEndWork.current.value,\r\n                }\r\n                setError('')\r\n\r\n                const fill = async () => {\r\n                    const res = await axios.post('/api/post/Reports', filter)\r\n                    setPosts(res.data)\r\n                    setError('')\r\n                    setIsOpen(true)\r\n                }\r\n                fill()\r\n            }\r\n        }\r\n    }\r\n    const handleClickCancel = async () => {\r\n        setError('')\r\n        setIsFilter(false)\r\n        historyStartWork.current.value = ''\r\n        historyEndWork.current.value = ''\r\n    }\r\n\r\n\r\n    const requestSort = (key) => {\r\n        if (historyStartWork.current.value !== '' && historyEndWork.current.value !== '') {\r\n            let direction = 'ascending';\r\n            if (sortConfig.key === key && sortConfig.direction === 'ascending' ||\r\n                sortConfig1.key === key && sortConfig1.direction === 'ascending' ||\r\n                sortConfig2.key === key && sortConfig2.direction === 'ascending' ||\r\n                sortConfig3.key === key && sortConfig3.direction === 'ascending' ||\r\n                sortConfig4.key === key && sortConfig4.direction === 'ascending'\r\n            ) {\r\n                direction = 'descending';\r\n            }\r\n            setSortConfig({ key, direction });\r\n            setSortConfig1({ key, direction });\r\n            setSortConfig2({ key, direction });\r\n            setSortConfig3({ key, direction });\r\n            setSortConfig4({ key, direction });\r\n        }\r\n    }\r\n\r\n    const sortedPosts = useMemo(() => {\r\n        const sortablePosts = [...posts];\r\n        if (sortConfig !== null) {\r\n            sortablePosts.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortablePosts;\r\n    }, [posts, sortConfig]);\r\n\r\n    const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className='Reports'>\r\n                <div className=\"ReportsContainer\">\r\n                    <h2 className='ReportsMainText'>Отчет по истории</h2>\r\n                    {error && <div className='errorHistoryInfo'>{error}</div>}\r\n                    <hr/>\r\n                    <br/>\r\n                    <div style={{display:'flex'}}>\r\n                        <div >\r\n                    <input\r\n                        type='date'\r\n                        placeholder=\"Начало работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyStartWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    /></div>\r\n                        <div>\r\n                            —  <input\r\n                        type='date'\r\n                        placeholder=\"Конец работы\"\r\n                        className=\"ModalInput\"\r\n                        ref={historyEndWork}\r\n                        style={{'marginRight': '10px'}}\r\n                    />\r\n                        </div>\r\n                    <div>\r\n                    <button className=\"historyButton\" onClick={handleClick}>Найти</button>\r\n                    </div>\r\n                        <div>\r\n                    <button className=\"historyButton\" onClick={handleClickCancel}>Сбросить</button>\r\n                    </div>\r\n                    </div>\r\n                    <br/>\r\n                    <hr/>\r\n                    <br/>\r\n                    <tr>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('user_name')}>\r\n                            ФИО {sortConfig.key === 'user_name' && (\r\n                            <span className='user_name'>{sortConfig.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('workstart')}>\r\n                            Начало {sortConfig1.key === 'workstart' && (\r\n                            <span className='workstart'>{sortConfig1.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('workend')}>\r\n                            Конец {sortConfig2.key === 'workend' && (\r\n                            <span className=\"workend\">{sortConfig2.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('worklong')}>\r\n                            Длительность {sortConfig3.key === 'worklong' && (\r\n                            <span className=\"worklong\">{sortConfig3.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                        <td className=\"historyinfoNumber\" onClick={() => requestSort('comment')}>\r\n                            Комментарий {sortConfig4.key === 'comment' && (\r\n                            <span className=\"comment\">{sortConfig4.direction === 'ascending' ? '▼' : '▲'}</span>\r\n                        )}\r\n                        </td>\r\n                    </tr>\r\n                    {\r\n                        currentPosts.map((posts, id) => <RepostsInfo key={id} posts={posts} username={username}/>)\r\n                    }\r\n\r\n                    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate}\r\n                                currentPage={currentPage}/>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","D:\\time_app\\client\\src\\components\\RepostInfoNominations\\RepostInfoNominations.jsx",[],"D:\\time_app\\client\\src\\components\\MessagePost\\MessagePost.jsx",[],"D:\\time_app\\client\\src\\components\\VacanciesView\\VacanciesView.jsx",["275","276","277","278","279","280","281"],"import React, {useEffect,useState} from 'react'\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport ModalVacancies from \"../Templates/ModalVacancies/ModalVacancies\"\r\nimport axios from \"axios\";\r\nimport './VacanciesView.css'\r\nimport VacanciesItem from \"../VacanciesItem/VacanciesItem\";\r\nimport Topbar from \"../Topbar/Topbar\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport VacanciesAdd from \"../VacanciesAdd/VacanciesAdd\";\r\n\r\n\r\nfunction VacanciesView(departId) {\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const [vacancies, setVacancies] = useState([])\r\n    const [isAddingVacancies, setIsAddingVacancies] = useState(false)\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n    const [status, setStatus] = useState([])\r\n    const [company, setCompany] = useState([])\r\n    const [projectIds, setProjectIds] = useState([]);\r\n    const [filteredVacancies, setFilteredVacancies] = useState([]);\r\n    const [activeFilters, setActiveFilters] = useState({\r\n\r\n        company: [],\r\n        status: [],\r\n        project: [],\r\n        department: null,\r\n        startDate: null,\r\n        endDate: null\r\n\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        const VacanciesView = async () => {\r\n\r\n            const statuses = await axios.get('/api/Vacations/?status=status')\r\n            const companies = await axios.get('/api/Vacations/?company=company')\r\n            setCompany(companies.data)\r\n            setStatus(statuses.data)\r\n\r\n            const vacancies_function = {\r\n                departId: localUser.departmentId,\r\n                user_id: localUser._id\r\n            }\r\n\r\n            const getVacancies = await axios.post('/api/Vacations_function/', vacancies_function)\r\n            setVacancies(getVacancies.data[0].get_vacancies);\r\n            const fetchedVacancies = getVacancies.data[0].get_vacancies;\r\n            const uniqueProjectIds = new Set();\r\n\r\n            fetchedVacancies.forEach(department => {\r\n                department.vacancies.forEach(vacancy => {\r\n                    if (vacancy.project_id !== undefined && vacancy.project_id !== null) {\r\n                        uniqueProjectIds.add(vacancy.project_id);\r\n                    }\r\n                });\r\n            });\r\n            const sortedProjectIds = Array.from(uniqueProjectIds).sort((a, b) => a - b);\r\n            const sortedUniqueProjectIds = new Set(sortedProjectIds);\r\n            setProjectIds(sortedUniqueProjectIds);\r\n\r\n        }\r\n        VacanciesView()\r\n    }, [departId])\r\n\r\n\r\n    useEffect(() => {\r\n        applyFilters(activeFilters);\r\n    }, [vacancies, activeFilters]);\r\n\r\n    const clickAdd = () => {\r\n        setIsAddingVacancies(true)\r\n    }\r\n\r\n    const clickBackButton = () => {\r\n        setIsAddingVacancies(false)\r\n    }\r\n\r\n    const handleClickFilter = (type, value) => {\r\n        setActiveFilters(prevFilters => {\r\n            let newFilters;\r\n            if (type === 'status') {\r\n                newFilters = {\r\n                    ...prevFilters,\r\n                    status: prevFilters.status.includes(value)\r\n                        ? prevFilters.status.filter(status => status !== value)\r\n                        : [...prevFilters.status, value]\r\n                };\r\n            } else if (type === 'company') {\r\n                newFilters = {\r\n                    ...prevFilters,\r\n                    company: prevFilters.company.includes(value)\r\n                        ? prevFilters.company.filter(company => company !== value)\r\n                        : [...prevFilters.company, value]\r\n                };\r\n            } else if (type === 'department') {\r\n                newFilters = {\r\n                    ...prevFilters,\r\n                    department: prevFilters.department === value ? null : value\r\n                };\r\n            } else if (type === 'project') {\r\n                newFilters = {\r\n                    ...prevFilters,\r\n                    project: prevFilters.project.includes(value)\r\n                        ? prevFilters.project.filter(project => project !== value)\r\n                        : [value]\r\n                };\r\n            }\r\n            return newFilters;\r\n        });\r\n    };\r\n\r\n    const handleDateChange = (type, value) => {\r\n        if (type === 'startDate') {\r\n            setStartDate(value);\r\n        } else if (type === 'endDate') {\r\n            setEndDate(value);\r\n        }\r\n    };\r\n\r\n\r\n    const applyFilters = (filters) => {\r\n        let filtered = vacancies;\r\n\r\n        if (filtered) {\r\n            if (filters.department) {\r\n                filtered = filtered.filter(department => department.department_id === parseInt(filters.department));\r\n            }\r\n\r\n            if (filters.company.length > 0) {\r\n                filtered = filtered.filter(department =>\r\n                    department.vacancies.some(vacancy => filters.company.includes(vacancy.company_name))\r\n                ).map(department => ({\r\n                    ...department,\r\n                    vacancies: department.vacancies.filter(vacancy => filters.company.includes(vacancy.company_name))\r\n                }));\r\n            }\r\n\r\n            if (filters.status.length > 0) {\r\n                filtered = filtered.filter(department =>\r\n                    department.vacancies.some(vacancy => filters.status.includes(vacancy.status_name))\r\n                ).map(department => ({\r\n                    ...department,\r\n                    vacancies: department.vacancies.filter(vacancy => filters.status.includes(vacancy.status_name))\r\n                }));\r\n            }\r\n\r\n            if (filters.project.length > 0) {\r\n                console.log('Filtering by project:', filters.project);\r\n                filtered = filtered.filter(department =>\r\n                    department.vacancies.some(vacancy => filters.project.includes(String(vacancy.project_id)))\r\n                ).map(department => ({\r\n                    ...department,\r\n                    vacancies: department.vacancies.filter(vacancy => filters.project.includes(String(vacancy.project_id)))\r\n                }));\r\n                console.log('Filtered by project:', filtered);\r\n            }\r\n\r\n            if (filters.startDate || filters.endDate) {\r\n                filtered = filtered.map(department => ({\r\n                    ...department,\r\n                    vacancies: department.vacancies.filter(vacancy => {\r\n                        const vacancyDate = new Date(vacancy.create_date);\r\n                        const startDate = filters.startDate ? new Date(filters.startDate) : null;\r\n                        const endDate = filters.endDate ? new Date(filters.endDate) : null;\r\n                        return (!startDate || vacancyDate >= startDate) && (!endDate || vacancyDate <= endDate);\r\n                    })\r\n                })).filter(department => department.vacancies.length > 0);\r\n            }\r\n        }\r\n\r\n        setFilteredVacancies(filtered);\r\n    };\r\n\r\n\r\n    const handleCombinedFilter = () => {\r\n        setActiveFilters(prevFilters => {\r\n            const newFilters = {\r\n                ...prevFilters,\r\n                startDate: startDate || null,\r\n                endDate: endDate || null\r\n            };\r\n            applyFilters(newFilters);\r\n            return newFilters;\r\n        });\r\n    };\r\n\r\n    const reset = () => {\r\n        setActiveFilters({\r\n            company: [],\r\n            status: [],\r\n            project:[],\r\n            department: null,\r\n            startDate: null,\r\n            endDate: null\r\n        });\r\n        setStartDate('');\r\n        setEndDate('');\r\n        setFilteredVacancies(vacancies);\r\n    };\r\n\r\n\r\n    const getColorByStatusId = (statusId) => {\r\n        switch (Number(statusId)) {\r\n            case 20:\r\n                return 'Reserve'; //  Резерв Установите Белый цвет для статуса 1\r\n            case 30:\r\n                return 'Selection'; // Подбор Установите желтый цвет для статуса 2\r\n            case 50:\r\n                return 'Securely'; // Обеспеченно Установите зелёный цвет для статуса 3\r\n            case 10:\r\n                return 'Liquidated'; // Ликвидированно Установите белый прозрачный цвет для статуса 4\r\n            case 40:\r\n                return 'Finalist'; //  Финалист Установите красный цвет для статуса 5\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n                <div className='Vacations'>\r\n                    {isAddingVacancies ?\r\n                        <button className='btnStaff' onClick={clickBackButton}>Назад</button>:''\r\n                    }\r\n                    {isAddingVacancies ? (\r\n                        <VacanciesAdd/>\r\n                    ) : (\r\n                        <>\r\n                            <div className=\"VacationsContainerTop\">\r\n\r\n                                <div>\r\n                                    <button className='btnStaff' onClick={() => window.location.href = `/department/${localUser.departmentId}`}>Назад</button>\r\n                                    <button className='btnStaff' onClick={clickAdd}>Добавить вакансию</button>\r\n                                </div>\r\n                                <div style={{padding:'20px'}}>\r\n                                <h2>Вакансии</h2>\r\n                                <div>\r\n                                    <input\r\n                                        type='date'\r\n                                        placeholder=\"Выберите дату\"\r\n                                        className=\"ModalInput\"\r\n                                        style={{marginRight: '10px'}}\r\n                                        value={startDate}\r\n                                        onChange={(e) => handleDateChange('startDate', e.target.value)}\r\n                                    />\r\n                                    —\r\n                                    <input\r\n                                        type='date'\r\n                                        placeholder=\"Выберите дату\"\r\n                                        className=\"ModalInput\"\r\n                                        style={{marginRight: '10px'}}\r\n                                        value={endDate}\r\n                                        onChange={(e) => handleDateChange('endDate', e.target.value)}\r\n                                    />\r\n                                    <button className=\"filterButton\" onClick={handleCombinedFilter}>Поиск</button>\r\n                                    <button className=\"filterButton\" onClick={reset}>Сбросить</button>\r\n                                </div>\r\n                                <br/>\r\n                                <div>\r\n                                    <div style={{display:'flex'}}>\r\n                                        <div>\r\n                                            <select\r\n                                                className=\"ModalInputUpdateSelect\"\r\n                                                onChange={(e) => handleClickFilter('department', e.target.value)}\r\n                                            >\r\n                                                {vacancies.map((dep, index) => (\r\n                                                    <option\r\n                                                        key={index}\r\n                                                        value={dep.department_id}\r\n                                                    >\r\n                                                        {dep.department}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                        <div style={{paddingLeft:'20px',paddingTop:'5px'}}>Проект:</div>\r\n                                       <div>\r\n                                               <select\r\n                                                   className='ModalInputUpdateSelect'\r\n                                                   onChange={(e) => handleClickFilter('project', e.target.value)}\r\n\r\n                                               >\r\n                                                   {projectIds.map((projectId, id) => (\r\n                                                       <option\r\n                                                           key={id}\r\n                                                           value={projectId}\r\n                                                       >\r\n                                                           {projectId}\r\n                                                       </option>\r\n                                                   ))}\r\n\r\n                                               </select>\r\n\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <br/>\r\n                                    <div>\r\n                                        {company.map((company, id) => (\r\n                                            <button\r\n                                                key={id}\r\n                                                className='filtersButton'\r\n                                                onClick={() => handleClickFilter('company', company.name)}\r\n                                                style={{\r\n                                                    boxShadow: activeFilters.company.includes(company.name) ? \"0 0 1px rgba(0,0,0,.5) inset, 0 2px 3px rgba(0,0,0,.5) inset, 0 1px 1px rgba(255,255,255,.1)\" : \"\",\r\n                                                    background: activeFilters.company.includes(company.name) ? 'gray' : '#1775ee',\r\n                                                    opacity: activeFilters.company.includes(company.name) ? '1' : ''\r\n                                                }}\r\n                                            >\r\n                                                {company.name}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                    <br/>\r\n                                    <div>\r\n                                        {status.map((status, id) => (\r\n                                            <button\r\n                                                key={id}\r\n                                                className={'filtersButton' + getColorByStatusId(status.id)}\r\n                                                onClick={() => handleClickFilter('status', status.name)}\r\n                                                style={{\r\n                                                    boxShadow: activeFilters.status.includes(status.name) ? \"0 0 1px rgba(0,0,0,.5) inset, 0 2px 3px rgba(0,0,0,.5) inset, 0 1px 1px rgba(255,255,255,.1)\" : \"\",\r\n                                                    background: activeFilters.status.includes(status.name) ? 'gray' : '',\r\n                                                    opacity: activeFilters.status.includes(status.name) ? '1' : ''\r\n                                                }}\r\n                                            >\r\n                                                {status.name}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {\r\n                                filteredVacancies.map(vac => (\r\n                                    <div className='VacationsContainer' key={vac.id}>\r\n                                        <VacanciesItem vac={vac} key={vac.department} status={status}\r\n                                                       department={vac.department} vacancies={vac.vacancies}/>\r\n                                    </div>\r\n                                ))\r\n\r\n                            }\r\n\r\n\r\n                            {/*                               {\r\n                                   filteredData.map(vac => (\r\n                                        <div className='VacationsContainer' key={vac.id}>\r\n                                            <VacanciesItem vac={vac} key={vac.department} status={status} department={vac.department} vacancies={vac.vacancies}/>\r\n                                        </div>\r\n                                    ))\r\n\r\n                                }*/}\r\n                        </>\r\n                    )}\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default VacanciesView","D:\\time_app\\client\\src\\components\\VacanciesAdd\\VacanciesAdd.jsx",["282"],"import React, {useEffect, useRef, useState} from \"react\";\r\n\r\nimport './VacanciesAdd.css'\r\nimport axios from \"axios\";\r\n\r\nfunction VacanciesAdd() {\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [deps, setDeps] = useState([])\r\n    const [userId, setUserId] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messageITC, setMessageITC] = useState('')\r\n    const [isView, setIsView] = useState(false)\r\n    const [vacancies, setVacancies] = useState([])\r\n    const [status, setStatus] = useState([])\r\n    const [company, setCompany] = useState([])\r\n    const [checkVal, setCheckVal] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n    const NameVacationRef=useRef()\r\n    const TeamRef = useRef()\r\n    const StatusRef = useRef()\r\n    const CodeVacations = useRef()\r\n    const Company = useRef()\r\n    const Description = useRef()\r\n    const CodeProject = useRef()\r\n    const Grade = useRef()\r\n\r\n\r\n\r\n    const handleSearchChange = (e) => {\r\n        setSearchQuery(e.target.value);\r\n    };\r\n\r\n\r\n\r\n    const changeVal = () => {\r\n        setCheckVal(!checkVal)\r\n    }\r\n    useEffect(() => {\r\n        const getDeps = async () => {\r\n            const departament = await axios.get('/api/departments/')\r\n            setDeps(departament.data)\r\n\r\n\r\n\r\n            const statuses = await axios.get('/api/Vacations/?status=status')\r\n            statuses.data.unshift(statuses.data.splice(statuses.data.findIndex(status => status.name === \"Резерв\"), 1)[0]);\r\n            setStatus(statuses.data)\r\n\r\n\r\n            const companies = await axios.get('/api/Vacations/?company=company')\r\n            setCompany(companies.data)\r\n            const user = await axios.get('/api/user')\r\n            setUsers(user.data)\r\n\r\n            const vacancies_function={\r\n                departId: localUser.departmentId,\r\n                user_id: localUser._id\r\n            }\r\n            const getVacancies = await axios.post('/api/Vacations_function/',vacancies_function)\r\n            setVacancies(getVacancies.data)\r\n        }\r\n\r\n\r\n        getDeps()\r\n    }, [])\r\n\r\n\r\n    const handleUserClick = (userName,userId) => {\r\n        setUserId(userId)\r\n        setSearchTerm(userName)\r\n        setFilteredUsers([])\r\n    }\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const [filteredUsers, setFilteredUsers] = useState([]);\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        const term = e.target.value;\r\n        setSearchTerm(term);\r\n        const filtered = users.filter(user =>\r\n            user.user_name && user.user_name.toLowerCase().includes(term.toLowerCase())\r\n        );\r\n        if (term === '') {\r\n            setFilteredUsers([])\r\n        } else {\r\n            setFilteredUsers(filtered);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const clickHandler = async () => {\r\n\r\n        const codeVacation = CodeVacations.current.value.toLowerCase().trim();\r\n\r\n        // Проверяем, есть ли уже вакансия с таким кодом\r\n        const existingVacancy = vacancies.some(({ get_vacancies }) =>\r\n            get_vacancies.some(({ vacancies }) =>\r\n                vacancies.some(vacancy =>\r\n                    vacancy.vacancy_code && vacancy.vacancy_code.toLowerCase() === codeVacation\r\n                )\r\n            )\r\n        );\r\n\r\n        if (existingVacancy) {\r\n            setMessageITC('Такая ИТС уже существует');\r\n            setError('');\r\n            setMessage('');\r\n            return;\r\n        }\r\n\r\n        let userNameToSend = '';\r\n        if (searchTerm !== '') {\r\n            userNameToSend = userId;\r\n        }\r\n        const Vacations = {\r\n            namevacancies: NameVacationRef.current.value,\r\n            description: Description.current.value,\r\n            team_id: TeamRef.current.value,\r\n            status_id: StatusRef.current.value,\r\n            codeVacations: codeVacation.toUpperCase(),\r\n            codeProject: CodeProject.current.value,\r\n            company_id: Company.current.value,\r\n            grade: Grade.current.value,\r\n            is_checked: checkVal,\r\n            userName: userNameToSend\r\n        };\r\n\r\n        if (\r\n            NameVacationRef.current.value === '' ||\r\n            Description.current.value === '' ||\r\n            TeamRef.current.value === '' ||\r\n            StatusRef.current.value === '' ||\r\n            codeVacation === '' ||\r\n            CodeProject.current.value === '' ||\r\n            Grade.current.value === '' ||\r\n            Company.current.value === ''\r\n        ) {\r\n            setError('Заполните поле');\r\n            setIsView(true);\r\n        } else {\r\n            const res = await axios.post('/api/Vacations/', Vacations);\r\n            if (res.status === 200) {\r\n                setError('');\r\n                setMessage('Вакансия добавлена');\r\n                const vacancies_function={\r\n                    departId: localUser.departmentId,\r\n                    user_id: localUser._id\r\n                }\r\n                const getVacancies = await axios.post('/api/Vacations_function/',vacancies_function)\r\n                setVacancies(getVacancies.data)\r\n            }\r\n        }\r\n    };\r\n\r\n    const clearInput = () => {\r\n        Description.current.value = ''\r\n        NameVacationRef.current.value=''\r\n        CodeVacations.current.value=''\r\n        CodeProject.current.value=''\r\n        Grade.current.value=''\r\n        setSearchTerm('')\r\n        setFilteredUsers([])\r\n        setSearchQuery('')\r\n        setMessage('')\r\n        setError('')\r\n    }\r\n\r\n\r\n\r\n    function handleClickSubmit() {\r\n        setMessageITC('')\r\n        setError('')\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <div className=\"VacationsMainAdd\">\r\n                <h2 style={{textAlign:'center'}}>Добавить вакансию</h2>\r\n                {\r\n                    !error && isView && message && !messageITC &&\r\n                    <div className='error'>Добавленно</div>\r\n                }\r\n                {\r\n                    message && !error && !isView && !messageITC &&\r\n                    <div className='error'>Добавленно</div>\r\n                }\r\n                {\r\n                    error && isView && !messageITC &&\r\n                    <div className='error'>Заполните все поля</div>\r\n                }\r\n                {\r\n                    messageITC && !message &&\r\n                    <div className='error'>{messageITC}</div>\r\n                }\r\n                <div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabelName\">Наименование вакансии</div>\r\n                    <input ref={NameVacationRef} type='text' placeholder='Наименование вакансии' className='InputVacation' onMouseDown={handleClickSubmit}/>\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabel\">Описание вакансии</div>\r\n                    <textarea ref={Description} placeholder='Описание вакансии' className='InputVacationAdd' onMouseDown={handleClickSubmit}/>\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabel\">Подразделение</div>\r\n                    <select ref={TeamRef} className='InputVacation' onMouseDown={handleClickSubmit}>\r\n                        {deps.map((dep, name) => <option selected={dep.id === localUser.departmentId} key={name}\r\n                                                         value={dep.id}>{dep.department_name}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabel\">Статус</div>\r\n                    <select ref={StatusRef} className='InputVacation' onMouseDown={handleClickSubmit}>\r\n                        {status.map((status, id) => <option key={id} value={status.id}>{status.name}</option>)}\r\n                    </select>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"InputLabel\">Код вакансии</div>\r\n                    <input ref={CodeVacations}\r\n                           value={searchQuery}\r\n                           onChange={handleSearchChange}\r\n                           type='text'\r\n                           placeholder='Код вакансии'\r\n                           className='InputVacation'\r\n                           onMouseDown={handleClickSubmit}/>\r\n                </div>\r\n\r\n\r\n\r\n                <div className='inputDiv'>\r\n                    <div className=\"InputLabel\">Имя сотрудника</div>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Имя сотрудника'\r\n                        className='InputVacation'\r\n                        value={searchTerm}\r\n                        onChange={handleInputChange}\r\n                        onMouseDown={handleClickSubmit}\r\n                    />\r\n                    <div className='divSelect'>\r\n                        {filteredUsers.length > 0 && (\r\n                            <div>\r\n                                {filteredUsers.map((user, index) => (\r\n                                    <div className='selectNameDiv' key={index} value={user.id} onClick={() => handleUserClick(user.user_name, user.id)}>\r\n                                        {user.user_name}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"InputLabel\">Компания</div>\r\n                    <select ref={Company} className='InputVacation' onMouseDown={handleClickSubmit}>\r\n                        <option value=''>Компания</option>\r\n                        {company.map((company, name) => <option key={name} value={company.id}>{company.name}</option>)}\r\n                    </select>\r\n\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabel\">Код проекта</div>\r\n                    <input ref={CodeProject} type='number' placeholder='Код проекта(текущий бюджет=0)' className='InputVacation' onMouseDown={handleClickSubmit}/>\r\n                </div>\r\n                <div>\r\n                    <div className=\"InputLabel\">Грейд</div>\r\n                    <input ref={Grade} type='number' placeholder='Грейд' className='InputVacation' onMouseDown={handleClickSubmit}/>\r\n                </div>\r\n                <div style={{marginTop:'20px'}}>\r\n                    <label style={{paddingRight:'10px'}}>Нужна вакансия после завершения проекта?</label>\r\n                    <label htmlFor='Vacation'>\r\n                        <input\r\n                            type='radio'\r\n                            value={true}\r\n                            id='Vacation'\r\n                            name='VacationTrue'\r\n                            checked={!checkVal}\r\n                            onChange={changeVal}\r\n                        />Да</label>\r\n                    <label htmlFor='Vacation1'>\r\n                        <input\r\n                            type='radio'\r\n                            value={false}\r\n                            id='Vacation'\r\n                            name='VacationFalse'\r\n                            checked={checkVal}\r\n                            onChange={changeVal}\r\n                        />Нет</label>\r\n                </div>\r\n                <div style={{textAlign:'center',paddingTop:\"20px\"}}>\r\n                    <button className=\"filterButton\" onClick={clickHandler}>Сохранить</button>\r\n                    <button className=\"filterButton\" onClick={clearInput}>Сбросить</button>\r\n                    {/*<button className=\"filterButton\" onClick={() => window.location.href = `/department/${depsId.depsId}`} >Выход</button>*/}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default VacanciesAdd","D:\\time_app\\client\\src\\components\\VacanciesItem\\VacanciesItem.jsx",["283","284","285","286","287","288","289","290","291","292","293"],"import \"./VcanciesItem.css\"\r\nimport moment from \"moment\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Link} from 'react-router-dom'\r\nimport axios from \"axios\";\r\nimport ModalVacancies from \"../Templates/ModalVacancies/ModalVacancies\";\r\n\r\n\r\nconst VacanciesItem =({department,vacancies,status})=> {\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n\r\n    const [selectDep, setSelectDep] = useState(\"\")\r\n\r\n    const [company, setCompany] = useState([])\r\n    const [selectCompany, setSelectCompany] = useState([])\r\n\r\n\r\n    const [selectItc, setSelectItc] = useState([])\r\n\r\n    const [projectItem, setProjectItem] = useState([])\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    const [plannedReleaseDate, setPlannedReleaseDate] = useState([])\r\n\r\n    const [vacanciesId, setVacanciesId] = useState(\"\")\r\n\r\n    const [modalVacations, setModalVacations] = useState(false)\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const [old_user, setOld_user] = useState(\"\")\r\n\r\n    const [inputValueDescription, setInputValueDescription] = useState(\"\")\r\n\r\n    const [inputValueStatuses, setInputValueStatuses] = useState(\"\")\r\n\r\n    const [inputValueGrade, setInputValueGrade] = useState(\"\")\r\n\r\n    const [user_name, setUser_name] = useState('')\r\n\r\n    const date = moment().format('YYYY-MM-DD');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [userId, setUserId] = useState([])\r\n    const [filteredUsers, setFilteredUsers] = useState([]);\r\n    const [users, setUsers] = useState([])\r\n\r\n    const [selectedVacanciesName, setSelectedVacanciesName] = useState('');\r\n    const [selectedVacanciesStatuses, setSelectedVacanciesStatuses] = useState('');\r\n    const [selectedVacanciesDescription, setSelectedVacanciesDescription] = useState('');\r\n    const [selectedVacanciesGrade, setSelectedVacanciesGrade] = useState('');\r\n\r\n    const statusRef = useRef()\r\n    const departRef = useRef()\r\n    const companyRef = useRef()\r\n    const ITCRef = useRef()\r\n    const projectRef = useRef()\r\n    const DateReleaseRef = useRef()\r\n\r\n    const searchRef = useRef()\r\n\r\n    const [startDate, setStartDate] = useState(''); // начальная дата фильтра\r\n    const [endDate, setEndDate] = useState(''); // конечная дата фильтра\r\n\r\n    const [deps, setDeps] = useState([])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const Department = async () => {\r\n\r\n            const departs = await axios.get('/api/departments/')\r\n            setDeps(departs.data)\r\n            const company = await axios.get('/api/Vacations/?company=company')\r\n            setCompany(company.data)\r\n            const user = await axios.get('/api/user')\r\n            setUsers(user.data)\r\n\r\n        }\r\n\r\n        Department()\r\n    }, [])\r\n\r\n\r\n\r\n    const handleNameInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // Обработчик изменения значения для поля ввода с grade\r\n    const handleDescriptionInputChange = (e) => {\r\n        setInputValueDescription(e.target.value);\r\n    }\r\n\r\n    const handleGradeInputChange = (e) => {\r\n        // Проверяем, является ли введенное значение числом (включая пустое значение)\r\n        if (/^\\d*$/.test(e.target.value)) {\r\n            setInputValueGrade(e.target.value);\r\n        }\r\n    };\r\n\r\n    const selectValueStatus = () => {\r\n        setInputValueStatuses(statusRef.current.value)\r\n    }\r\n\r\n    const selectDeps = () => {\r\n        setSelectDep(departRef.current.value)\r\n    }\r\n\r\n    const companySelect = () => {\r\n        setSelectCompany(companyRef.current.value)\r\n    }\r\n\r\n    const SelectITC = () => {\r\n        setSelectItc(ITCRef.current.value)\r\n    }\r\n\r\n    const Project = (e) => {\r\n        if (/^\\d*$/.test(e.target.value)) {\r\n            setProjectItem(e.target.value);\r\n        }\r\n    }\r\n\r\n    const DataCurrent = () => {\r\n        setPlannedReleaseDate(DateReleaseRef.current.value)\r\n    }\r\n\r\n\r\n\r\n    const ChangeDataButton = async () => {\r\n\r\n        const ChangeData = {\r\n            namevacanciesId: vacanciesId,\r\n            namevacancies: inputValue,\r\n            description: inputValueDescription,\r\n            grade: inputValueGrade,\r\n            statuses: statusRef.current.value,\r\n            users: (userId.length===0 ? old_user : userId),\r\n            search: searchTerm,\r\n            old_user: old_user,\r\n            deps: selectDep,\r\n            company_id: selectCompany,\r\n            vacancy_code: selectItc,\r\n            project_id: projectItem,\r\n            planned_release_date:(plannedReleaseDate==='' ? null : plannedReleaseDate)\r\n        }\r\n        console.log('log=',ChangeData)\r\n\r\n        if (statusRef.current.value === '3' && old_user===null && userId.length<1) {\r\n            setMessage('Сотрудник не назначен')\r\n        }\r\n\r\n        else {\r\n            const res = await axios.put('/api/Vacations/', ChangeData)\r\n            setMessage('Сохранено')\r\n            window.location.reload()\r\n        }\r\n\r\n    }\r\n    const handleInputChange = (e) => {\r\n        const term = e.target.value;\r\n        if(term==='') {\r\n            setSearchTerm(null)\r\n        }\r\n        else {\r\n            setSearchTerm(term);\r\n        }\r\n        const filtered = users.filter(user =>\r\n            user.user_name && user.user_name.toLowerCase().includes(term.toLowerCase())\r\n        )\r\n\r\n        if (term === '') {\r\n            setUser_name('')\r\n        } else {\r\n            setFilteredUsers(filtered); // всегда устанавливаем filteredUsers\r\n        }\r\n    }\r\n\r\n\r\n    const handleClick = (name, grade,id,description,status_id,user_name,user_id,department_id,company_id,vacancy_code,project_id,planned_release_date) => {\r\n        if(localUser.isAdmin===true) {\r\n\r\n            if(user_name===null){\r\n                setUser_name([])\r\n            }else {\r\n                setUser_name(user_name)\r\n            }\r\n\r\n            setFilteredUsers([])\r\n            setMessage([])\r\n            setModalVacations(true);\r\n            setVacanciesId(id)\r\n            setSelectedVacanciesName(name);\r\n            setInputValue(name); // Установка начального значения для name\r\n\r\n\r\n            setSelectedVacanciesDescription(description)\r\n            setInputValueDescription(description)\r\n\r\n            setSelectedVacanciesGrade(grade);\r\n            setInputValueGrade(grade); // Установка начального значения для grade\r\n\r\n            setSelectedVacanciesStatuses(status_id)\r\n            setInputValueStatuses(status_id)\r\n\r\n            setOld_user(user_id)\r\n\r\n            setSelectDep(department_id)\r\n\r\n            setSelectCompany(company_id)\r\n\r\n            setSelectItc(vacancy_code)\r\n\r\n            setProjectItem(project_id)\r\n\r\n            setPlannedReleaseDate(planned_release_date)\r\n        }\r\n    };\r\n\r\n    const handleUserClick = (userName,userId) => {\r\n\r\n        setUserId(userId)\r\n        setSearchTerm(userName)\r\n        setFilteredUsers([])\r\n\r\n    }\r\n\r\n\r\n    const getColorByStatusId = (statusId) => {\r\n        switch (statusId) {\r\n            case 20:\r\n                return 'Reserve'; //  Резерв Установите Белый цвет для статуса 1\r\n            case 30:\r\n                return 'Selection'; // Подбор Установите желтый цвет для статуса 2\r\n            case 50:\r\n                return 'Securely'; // Обеспеченно Установите зелёный цвет для статуса 3\r\n            case 10:\r\n                return 'Liquidated'; // Ликвидированно Установите белый прозрачный цвет для статуса 4\r\n            case 40:\r\n                return 'Finalist'; //  Финалист Установите красный цвет для статуса 5\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2 className='departmentName'>{department}</h2>\r\n            <div className=\"vacancies-container\">\r\n                {vacancies.map(vac => (\r\n                    <div key={vac.id} className={\"angry-grid1\"+getColorByStatusId(vac.status_id)}\r\n                         onClick={() => handleClick(vac.name, vac.grade,vac.id,vac.description,vac.status_id,\r\n                             vac.user_name,vac.user_id,vac.department_id,vac.company_id,vac.vacancy_code,vac.project_id,vac.planned_release_date)}>\r\n\r\n                        <div id=\"cssportal-grid\">\r\n                            <div id=\"div1\"></div>\r\n                            <div id=\"div2\">{vac.user_name}</div>\r\n                            <div id=\"div3\">{date === vac.create_date ? 'NEW' : ''}</div>\r\n                            <div id=\"div4\"></div>\r\n                            <div id=\"div5\">{vac.name}</div>\r\n                            <div id=\"div6\"></div>\r\n                            <div id=\"div7\"></div>\r\n                            <div id=\"div8\">{vac.vacancy_code}</div>\r\n                            <div id=\"div9\"></div>\r\n                            <div id=\"div10\">Грейд: {vac.grade}</div>\r\n                            <div id=\"div11\">{vac.status_name}</div>\r\n                            <div id=\"div12\">Проект: {vac.project_id}</div>\r\n                            <div id=\"div13\">{vac.company_name}</div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                ))}\r\n\r\n\r\n                <ModalVacancies active={modalVacations} setActive={setModalVacations}>\r\n                    <div className='MessageItemVacancies'>\r\n                        <span >{message}</span>\r\n                    </div>\r\n                    <div>\r\n                        <input type='text' className=\"ModalInputVacancies\"\r\n                               value={inputValue}\r\n                               onChange={handleNameInputChange}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                    <textarea className='textDescription'\r\n                              value={inputValueDescription}\r\n                              onChange={handleDescriptionInputChange}\r\n                    />\r\n                    </div>\r\n                    <div>\r\n                        <span>Подразделение:</span><br/>\r\n                        <select ref={departRef}\r\n                                value={selectDep}\r\n                                onChange={selectDeps}\r\n                                className='InputVacanciesItemDeps'>\r\n                            {deps.map((dep, name) => <option key={name}\r\n                                                             value={dep.id}>{dep.department_name}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span>Статус:</span><br/>\r\n                        <select ref={statusRef}\r\n                                value={inputValueStatuses}\r\n                                onChange={selectValueStatus}\r\n                                className='InputVacanciesItemSelect'>\r\n                            {status.map((status, name) => <option key={name}\r\n                                                                  value={status.id}>{status.name}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span>Грейд:</span><br/>\r\n                        <input type='text'\r\n                               value={inputValueGrade}\r\n                               onChange={handleGradeInputChange}\r\n                               placeholder='Грейд'\r\n                               className='InputVacanciesItem'\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <span>Компания:</span><br/>\r\n                        <select ref={companyRef}\r\n                                value={selectCompany}\r\n                                onChange={companySelect}\r\n                                className='InputVacanciesItemSelect'>\r\n                            {company.map((company, name) => <option key={name} value={company.id}>{company.name}</option>)}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"container\">\r\n                        <div>\r\n\r\n                            <span>Имя сотрудника:</span><br/>\r\n                            <div className='inputDiv'>\r\n                                <input\r\n                                    type='text'\r\n                                    placeholder='Имя сотрудника'\r\n                                    value={searchTerm || user_name}\r\n                                    onChange={handleInputChange}\r\n                                    className='InputVacanciesItem'\r\n                                />\r\n\r\n                                {old_user ?<Link className='ProfileLinkVacancies' style={{paddingLeft:'10px'}} to={`/profile/${old_user}`}>Перейти в профиль</Link>:''}\r\n\r\n\r\n                                {filteredUsers.length > 0 && (\r\n                                    <div className=\"userListContainer\">\r\n                                        {filteredUsers.map((user, index) => (\r\n                                            <div className='selectNameDiv' key={index} value={user.id}\r\n                                                 onClick={() => handleUserClick(user.user_name, user.id)}>\r\n                                                {user.user_name}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                            <div>\r\n                                <span>Дата выхода:</span><br/>\r\n                                <input type='date'\r\n                                       ref={DateReleaseRef}\r\n                                       placeholder='ИТС'\r\n                                       className='InputVacanciesItem'\r\n                                       value={plannedReleaseDate || ''}\r\n                                       onChange={DataCurrent}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <span>ИТС:</span><br/>\r\n                                <input type='text'\r\n                                       ref={ITCRef}\r\n                                       value={selectItc}\r\n                                       onChange={SelectITC}\r\n                                       placeholder='ИТС'\r\n                                       className='InputVacanciesItem'\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <span>Проект:</span><br/>\r\n                                <input type='text'\r\n                                       ref={projectRef}\r\n                                       value={projectItem}\r\n                                       onChange={Project}\r\n                                       placeholder='Проект(Нет проекта=0)'\r\n                                       className='InputVacanciesItem'\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <br/>\r\n                        <div className='divHistory'>\r\n                            История\r\n                        </div>\r\n                        <br/>\r\n                        <div>\r\n                            <button className=\"ModalButton\" type=\"submit\" onClick={ChangeDataButton}>\r\n                                Сохранить\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </ModalVacancies>\r\n            </div>\r\n        </>    )\r\n}\r\nexport default VacanciesItem","D:\\time_app\\client\\src\\components\\Templates\\ModalVacancies\\ModalVacancies.js",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\Skills\\Skills.jsx",["294","295","296","297","298","299","300"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport Modal from \"../../Templates/Modal/Modal\";\r\nimport './Skills.css'\r\nimport axios from \"axios\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst Skills = ({ modalActiveSkills, setModalActiveSkills}) => {\r\n\r\n    const skill = useRef()\r\n    const username = useParams()\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const [searchTermSkills, setSearchTermSkills] = useState('');\r\n    const [skillsAll, setAllSkills] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [skillId, setSkillId] = useState([])\r\n    const [userSkills, setUserSkills] = useState([])\r\n    const [filteredSkills, setFilteredSkills] = useState([]);\r\n    const [selectedNumber, setSelectedNumber] = useState(null);\r\n    const [selectedNumber2, setSelectedNumber2] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const getSkills = async () => {\r\n            const res = await axios.get('/api/user/' + username.username)\r\n            const userId=res.data.id\r\n\r\n\r\n            const getAllSkills = await axios.get('/api/Skills/')\r\n\r\n            if(getAllSkills.data[0]['get_all_skills_json']===null){\r\n                setAllSkills([])\r\n            }else {\r\n                setAllSkills(getAllSkills.data[0]['get_all_skills_json'])\r\n            }\r\n\r\n            const getUserSkills = await axios.get('/api/Skills/'+userId)\r\n\r\n            if(getUserSkills.data[0]['get_user_skills_json']===null){\r\n                setUserSkills([])\r\n            }else {\r\n                setUserSkills(getUserSkills.data[0]['get_user_skills_json'])\r\n\r\n            }\r\n\r\n        }\r\n        getSkills()\r\n    }, [])\r\n\r\n\r\n\r\n    const handleClick = (number1) => {\r\n            setSelectedNumber(number1)\r\n        console.log(`You clicked number ${number1}`);\r\n    };\r\n    const handleClick2 = (number2) => {\r\n        setSelectedNumber2(number2)\r\n        console.log(`You clicked number ${number2}`);\r\n    };\r\n\r\n\r\n    const handleInputChangeSkills = (e) => {\r\n        const termCities = e.target.value;\r\n        setSearchTermSkills(termCities);\r\n        const filtered = skillsAll.filter(skill =>\r\n            skill.name && skill.name.toLowerCase().includes(termCities.toLowerCase())\r\n        );\r\n        if (termCities === '') {\r\n            setFilteredSkills([])\r\n        } else {\r\n            setFilteredSkills(filtered);\r\n        }\r\n    }\r\n\r\n\r\n    const handleSkillsClick = (id,name) => {\r\n        setFilteredSkills([])\r\n        setSkillId(id)\r\n        setSearchTermSkills(name)\r\n    }\r\n\r\n    const ButtonAddSkills = async () => {\r\n        setSelectedNumber(null)\r\n\r\n        if (skillId.length === 0) {\r\n            setError('Выберите умение')\r\n        } else if (selectedNumber == null) {\r\n            setError('Укажите уровень от 1 до 5')\r\n        } else if (skillId.length === 0 && selectedNumber > 0) {\r\n            setError('Выберите умение')\r\n        } else {\r\n\r\n            const addSkills = {\r\n                user_id: username.username,\r\n                skill_id: skillId,\r\n                self_grade: selectedNumber\r\n            }\r\n\r\n            if(skillId.length>0 || selectedNumber !== null || skillId.length === 0 && selectedNumber > 0 )\r\n            {\r\n                setError('')\r\n            }\r\n            const getSkills = await axios.post('/api/Skills/', addSkills)\r\n\r\n            const res = await axios.get('/api/user/' + username.username)\r\n            const userId = res.data.id\r\n            const getUserSkills = await axios.get('/api/Skills/' + userId)\r\n\r\n            if (getUserSkills.data[0]['get_user_skills_json'] === null) {\r\n                setUserSkills([])\r\n            } else {\r\n                setUserSkills(getUserSkills.data[0]['get_user_skills_json'])\r\n            }\r\n        }\r\n    }\r\n\r\n    const SkillDelete= async (e) => {\r\n        const skill_id=e.target.value\r\n        const not_active_skill = {\r\n            is_active:false,\r\n            skill_id:skill_id\r\n        }\r\n        const DeleteSkills = await axios.post('/api/Skills/',not_active_skill)\r\n        const res = await axios.get('/api/user/' + username.username)\r\n        const userId = res.data.id\r\n        const getUserSkills = await axios.get('/api/Skills/' + userId)\r\n\r\n        if (getUserSkills.data[0]['get_user_skills_json'] === null) {\r\n            setUserSkills([])\r\n        } else {\r\n            setUserSkills(getUserSkills.data[0]['get_user_skills_json'])\r\n        }\r\n    }\r\n\r\n    const changeGrade = async (event, id) => {\r\n        const { name, value } = event.target;\r\n        const changeGrade = {\r\n            user_id: username.username,\r\n            skill_id: id\r\n        }\r\n        if (name === 'gradeSelf' && value !== undefined) {\r\n            changeGrade.newGradeSelf = value;\r\n        } else if (name === 'gradeHead' && value !== undefined) {\r\n            changeGrade.newGradeHead = value;\r\n        }\r\n        await axios.post('/api/Skills/', changeGrade);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Modal active={modalActiveSkills} setActive={setModalActiveSkills}>\r\n                <h1>Навыки:</h1>\r\n                <div className='error'>{error}</div>\r\n                <br/>\r\n\r\n                <div className='modalError'>\r\n\r\n                </div>\r\n\r\n                <hr/>\r\n                <br/>\r\n                <div className='flex'>\r\n                    <div>\r\n                        <div>\r\n                            <label style={{fontWeight: \"bold\"}}>Выберите умение:</label>\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Начните вводить умение\"\r\n                                ref={skill}\r\n                                className=\"registerInput\"\r\n                                value={searchTermSkills}\r\n                                onChange={handleInputChangeSkills}\r\n                            />\r\n\r\n                            <div>\r\n                                {filteredSkills.length > 0 && (\r\n                                    <div className='divSelectRegister'>\r\n                                        {filteredSkills.map((skill, id) => (\r\n                                            <div className='selectNameDiv' key={id} value={id} onClick={() => handleSkillsClick(skill.id,skill.name)}>\r\n                                                {skill.name}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div style={{width: '50px'}}></div>\r\n\r\n                    <div>\r\n                        <div>\r\n                            <label style={{fontWeight: \"bold\"}}>Оценка сотрудника:</label>\r\n                        </div>\r\n                        <div>\r\n                            <div className='MainContainer'>\r\n                                {[1, 2, 3, 4, 5].map((number1) => (\r\n                                    <div className={`WrapperContainer ${selectedNumber === number1 ? 'selected' : ''}`}\r\n                                        key={number1}\r\n                                        onClick={() => handleClick(number1)}\r\n                                    >\r\n                                        {number1}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n{/*                    <div style={{width: '50px'}}></div>\r\n                    <div>\r\n                        <div>\r\n                            <label style={{fontWeight: \"bold\"}}>Оценка руководителя:</label>\r\n                        </div>\r\n                        <div>\r\n                            <div className='MainContainer'>\r\n                                {[1, 2, 3, 4, 5].map((number2) => (\r\n                                    <div className={`WrapperContainer ${selectedNumber2 === number2 ? 'selected' : ''}`}\r\n                                         key={number2}\r\n                                         onClick={() => handleClick2(number2)}\r\n                                    >\r\n                                        {number2}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>*/}\r\n\r\n                </div>\r\n                <br/>\r\n                <button className=\"ModalButton\" type=\"submit\" onClick={ButtonAddSkills}>\r\n                    Добавить умение\r\n                </button>\r\n                <br/>\r\n                <br/>\r\n                <div className='divreserve'>\r\n                    <table className=\"skills-table\">\r\n                        <thead>\r\n                        <tr className=\"skills-header\">\r\n                            <th>Навык</th>\r\n                            <th>Оценка сотрудника</th>\r\n                            <th>Оценка руководителя</th>\r\n                            <th></th>\r\n\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {userSkills.map((array, id) => (\r\n                            <tr className=\"skill-item\" key={id}>\r\n                                <td>\r\n                                    {array.name}\r\n                                </td>\r\n                                <td>\r\n\r\n                                    <select\r\n                                        name='gradeSelf'\r\n                                        defaultValue={array.self_grade}\r\n                                        onChange={(event) => changeGrade(event, array.id)}\r\n                                    >\r\n                                        {[1, 2, 3, 4, 5].map(number => (\r\n                                            <option key={number} value={number}>{number}</option>\r\n                                        ))}\r\n                                    </select>\r\n                               </td>\r\n                                <td>\r\n                                    <select\r\n                                    name='gradeHead'\r\n                                    defaultValue={array.head_grade}\r\n                                    disabled={!localUser.isAdmin}\r\n                                    onChange={(event) => changeGrade(event, array.id)}\r\n                                >\r\n                                    {array.head_grade === null && !localUser.isAdmin ? <option>Нет оценки</option> : ''}\r\n                                    {array.head_grade === null ? <option>Нет оценки</option> : ''}\r\n                                    {[1, 2, 3, 4, 5].map(number => (\r\n                                        <option key={number} value={number}>{number}</option>\r\n                                    ))}\r\n                                </select>\r\n                                </td>\r\n                                <td><button value={array.id} className='SkillButton' onClick={SkillDelete}>Удалить</button></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                <br/><br/>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Skills;","D:\\time_app\\client\\src\\components\\VacanciesItem\\ModalVacanciesItem\\ModalVacanciesItem.jsx",["301","302"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nconst ModalVacanciesItem =({allDateUser})=> {\r\n\r\n\r\n    useEffect(() => {\r\n        if (allDateUser) {\r\n            setInputValueVacanciesName(allDateUser.vacancies_name)\r\n            setInputValueGrade(allDateUser.grade)\r\n            setSelectDep(allDateUser.vacancies_department_id)\r\n            setInputValueDescription(allDateUser.description)\r\n            setInputValueStatuses(allDateUser.vacancies_status_id)\r\n            setSelectCompany(allDateUser.company_id)\r\n            setSelectItc(allDateUser.vacancy_code)\r\n            setProjectItem(allDateUser.project_id)\r\n            setVacanciesId(allDateUser.vacancy_id)\r\n            setOld_user(allDateUser.id)\r\n\r\n\r\n            if(allDateUser.planned_release_date!==null)\r\n            {\r\n                const date = moment(allDateUser.planned_release_date).format('YYYY-MM-DD')\r\n                setPlannedReleaseDate(date)\r\n            }\r\n        } else {\r\n\r\n        }\r\n\r\n\r\n    }, [allDateUser]);\r\n\r\n\r\n\r\n    const [status, setStatus] = useState([])\r\n    const [selectDep, setSelectDep] = useState(\"\")\r\n\r\n    const [company, setCompany] = useState([])\r\n    const [selectCompany, setSelectCompany] = useState([])\r\n\r\n\r\n    const [selectItc, setSelectItc] = useState([])\r\n\r\n    const [projectItem, setProjectItem] = useState([])\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    const [plannedReleaseDate, setPlannedReleaseDate] = useState([])\r\n\r\n    const [vacanciesId, setVacanciesId] = useState(\"\")\r\n\r\n    const [inputValueVacanciesName, setInputValueVacanciesName] = useState('')\r\n\r\n    const [old_user, setOld_user] = useState(\"\")\r\n\r\n    const [inputValueDescription, setInputValueDescription] = useState(\"\")\r\n\r\n    const [inputValueStatuses, setInputValueStatuses] = useState(\"\")\r\n\r\n    const [inputValueGrade, setInputValueGrade] = useState(\"\")\r\n\r\n    const [user_name, setUser_name] = useState('')\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [userId, setUserId] = useState([])\r\n    const [filteredUsers, setFilteredUsers] = useState([]);\r\n    const [users, setUsers] = useState([])\r\n\r\n\r\n    const statusRef = useRef()\r\n    const departRef = useRef()\r\n    const companyRef = useRef()\r\n    const ITCRef = useRef()\r\n    const projectRef = useRef()\r\n    const DateReleaseRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const Department = async () => {\r\n            const statuses = await axios.get('/api/Vacations/?status=status')\r\n            setStatus(statuses.data)\r\n            const departs = await axios.get('/api/departments/')\r\n            setDeps(departs.data)\r\n            const company = await axios.get('/api/Vacations/?company=company')\r\n            setCompany(company.data)\r\n            const user = await axios.get('/api/user')\r\n            setUsers(user.data)\r\n\r\n        }\r\n\r\n        Department()\r\n    }, [])\r\n    const [deps, setDeps] = useState([])\r\n\r\n    const handleNameInputChange = (e) => {\r\n        setInputValueVacanciesName(e.target.value)\r\n    }\r\n\r\n\r\n    // Обработчик изменения значения для поля ввода с grade\r\n    const handleDescriptionInputChange = (e) => {\r\n        setInputValueDescription(e.target.value);\r\n    }\r\n\r\n    const handleGradeInputChange = (e) => {\r\n        // Проверяем, является ли введенное значение числом (включая пустое значение)\r\n        if (/^\\d*$/.test(e.target.value)) {\r\n            setInputValueGrade(e.target.value);\r\n        }\r\n    };\r\n\r\n\r\n    const selectValue = () => {\r\n        setInputValueStatuses(statusRef.current.value)\r\n    }\r\n\r\n    const selectDeps = () => {\r\n        setSelectDep(departRef.current.value)\r\n    }\r\n\r\n    const companySelect = () => {\r\n        setSelectCompany(companyRef.current.value)\r\n    }\r\n\r\n    const SelectITC = () => {\r\n        setSelectItc(ITCRef.current.value)\r\n    }\r\n\r\n    const Project = (e) => {\r\n        if (/^\\d*$/.test(e.target.value)) {\r\n            setProjectItem(e.target.value);\r\n        }\r\n    }\r\n\r\n    const DataCurrent = () => {\r\n        setPlannedReleaseDate(DateReleaseRef.current.value)\r\n\r\n    }\r\n\r\n    const ChangeDataButton = async () => {\r\n\r\n        const ChangeData = {\r\n            namevacanciesId: vacanciesId,\r\n            namevacancies: inputValueVacanciesName,\r\n            description: inputValueDescription,\r\n            grade: inputValueGrade,\r\n            statuses: statusRef.current.value,\r\n            users: (userId.length===0 ? old_user : userId),\r\n            search: userId,\r\n            old_user: old_user,\r\n            deps: selectDep,\r\n            company_id: selectCompany,\r\n            vacancy_code: selectItc,\r\n            project_id: projectItem,\r\n            planned_release_date:DateReleaseRef.current.value.length===0 ? null :DateReleaseRef.current.value\r\n        }\r\n\r\n        if (statusRef.current.value === '3' && old_user===null && userId.length<1) {\r\n            setMessage('Сотрудник не назначен')\r\n        }\r\n\r\n\r\n        else {\r\n            const res = await axios.put('/api/Vacations/', ChangeData)\r\n            setMessage('Сохранено')\r\n            window.location.reload()\r\n        }\r\n    }\r\n    const handleInputChange = (e) => {\r\n        const term = e.target.value;\r\n        if(term==='') {\r\n            setSearchTerm(null)\r\n        }\r\n        else {\r\n            setSearchTerm(term);\r\n        }\r\n        const filtered = users.filter(user =>\r\n            user.user_name && user.user_name.toLowerCase().includes(term.toLowerCase())\r\n        )\r\n\r\n        if (term === '') {\r\n            setUser_name('')\r\n        } else {\r\n            setFilteredUsers(filtered); // всегда устанавливаем filteredUsers\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleUserClick = (userName,userId) => {\r\n\r\n        setUserId(userId)\r\n        console.log('old=',userId)\r\n        setSearchTerm(userName)\r\n        setFilteredUsers([])\r\n\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div className='MessageItemVacancies'>\r\n                    <span >{message}</span>\r\n                </div>\r\n                <div>\r\n                    <input type='text' className=\"ModalInputVacancies\"\r\n                           value={inputValueVacanciesName}\r\n                           onChange={handleNameInputChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <textarea className='textDescription'\r\n                              value={inputValueDescription}\r\n                              onChange={handleDescriptionInputChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span>Подразделение:</span><br/>\r\n                    <select ref={departRef}\r\n                            value={selectDep}\r\n                            onChange={selectDeps}\r\n                            className='InputVacanciesItemDeps'>\r\n                        {deps.map((dep, name) => <option key={name}\r\n                                                         value={dep.id}>{dep.department_name}</option>)}\r\n                    </select>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>Статус:</span><br/>\r\n                    <select ref={statusRef}\r\n                            value={inputValueStatuses}\r\n                            onChange={selectValue}\r\n                            className='InputVacanciesItemSelect'>\r\n                        {status.map((status, name) => <option key={name}\r\n                                                              value={status.id}>{status.name}</option>)}\r\n                    </select>\r\n                </div>\r\n\r\n                <div>\r\n                    <span>Грейд:</span><br/>\r\n                    <input type='text'\r\n                           value={inputValueGrade}\r\n                           onChange={handleGradeInputChange}\r\n                           placeholder='Грейд'\r\n                           className='InputVacanciesItem'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span>Компания:</span><br/>\r\n                    <select ref={companyRef}\r\n                            value={selectCompany}\r\n                            onChange={companySelect}\r\n                            className='InputVacanciesItemSelect'>\r\n                        {company.map((company, name) => <option key={name} value={company.id}>{company.name}</option>)}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div>\r\n\r\n                        <span>Имя сотрудника:</span><br/>\r\n                        <div className='inputDiv'>\r\n                            <input\r\n                                type='text'\r\n                                placeholder='Имя сотрудника'\r\n                                value={searchTerm || (allDateUser && allDateUser.user_name)}\r\n                                onChange={handleInputChange}\r\n                                className='InputVacanciesItem'\r\n                            />\r\n\r\n                            {filteredUsers.length > 0 && (\r\n                                <div className=\"userListContainer\">\r\n                                    {filteredUsers.map((user, index) => (\r\n                                        <div className='selectNameDiv' key={index} value={user.id}\r\n                                             onClick={() => handleUserClick(user.user_name, user.id)}>\r\n                                            {user.user_name}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <div>\r\n                            <span>Дата выхода:</span><br/>\r\n                            <input type='date'\r\n                                   ref={DateReleaseRef}\r\n                                   placeholder='ИТС'\r\n                                   className='InputVacanciesItem'\r\n                                   value={plannedReleaseDate}\r\n                                   onChange={DataCurrent}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <span>ИТС:</span><br/>\r\n                            <input type='text'\r\n                                   ref={ITCRef}\r\n                                   value={selectItc}\r\n                                   onChange={SelectITC}\r\n                                   placeholder='ИТС'\r\n                                   className='InputVacanciesItem'\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <span>Проект:</span><br/>\r\n                            <input type='text'\r\n                                   ref={projectRef}\r\n                                   value={projectItem}\r\n                                   onChange={Project}\r\n                                   placeholder='Проект(Нет проекта=0)'\r\n                                   className='InputVacanciesItem'\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <br/>\r\n                    <div className='divHistory'>\r\n                        История\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <button className=\"ModalButton\" type=\"submit\" onClick={ChangeDataButton}>\r\n                            Сохранить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n}\r\n\r\nexport default ModalVacanciesItem;","D:\\time_app\\client\\src\\components\\ProfileInfo\\HistoryInfo\\HistoryInfo.jsx",["303","304","305","306"],"D:\\time_app\\client\\src\\components\\Layout\\Layout.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\Editing\\Editing.jsx",["307","308","309"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport Modal from \"../../Templates/Modal/Modal\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Editing({modalActive,setModalActive}) {\r\n    const username = useParams()\r\n\r\n    const [error, setError] = useState('')\r\n\r\n    const [selectedValue, setSelectedValue] = useState('');\r\n\r\n    const [cityName, setCityName] = useState([])\r\n\r\n    const [user, setUser] = useState([])\r\n\r\n    const [nameValue, setNameValue] = useState(\"\");\r\n\r\n\r\n    const [email, setEmail] = useState([])\r\n    const [emailChange, setEmailChange] = useState([])\r\n\r\n\r\n    const [phone, setPhone] = useState([])\r\n    const [phoneChange, setPhoneChange] = useState([])\r\n\r\n\r\n    const [additional_contact, setAdditional_Contact] = useState([])\r\n    const [additional_contact_change, setAdditional_Contact_Change] = useState([])\r\n\r\n\r\n    const [distribution_group, setDistribution_Group] = useState([])\r\n    const [distribution_group_change, setDistribution_Group_Change] = useState([])\r\n\r\n\r\n    const [activity_profile, setActivity_Profile] = useState([])\r\n    const [activity_profile_change, setActivity_Profile_Change] = useState([])\r\n\r\n    const [CityPlace, setCityPlace] = useState([])\r\n    const [CityPlace_Change, setCityPlace_Change] = useState([])\r\n\r\n\r\n    const [surnameValue, setSurnameValue] = useState([])\r\n\r\n\r\n    const [options, setOptions] = useState([]);\r\n\r\n\r\n    const localUse = JSON.parse(localStorage.getItem('user'))\r\n\r\n    const modalDep = useRef()\r\n    const phoneNumber = useRef()\r\n    const additionalContact = useRef()\r\n    const distributionGroup = useRef()\r\n    const activityProfile = useRef()\r\n    const modalCity = useRef()\r\n    const modalCityPlace = useRef()\r\n\r\n\r\n    const [citiesId, setCitiesId] = useState([])\r\n    const [searchTermCities, setSearchTermCities] = useState('');\r\n    const [filteredCities, setFilteredCities] = useState([]);\r\n    const [cities, setCities] = useState([])\r\n\r\n\r\n    const handleUserClickCities = (city_name, id) => {\r\n        setCitiesId(id)\r\n        setSearchTermCities(city_name)\r\n        setFilteredCities([])\r\n    }\r\n\r\n\r\n    const handleInputChangeCities = (e) => {\r\n        const termCities = e.target.value;\r\n        setSearchTermCities(termCities);\r\n\r\n        if (termCities === '') {\r\n            setCitiesId('');\r\n            setFilteredCities([]);\r\n            setCityName('');\r\n            return; // Добавьте это, чтобы избежать выполнения нижестоящего кода при пустом termCities\r\n        }\r\n\r\n        const filtered = cities.filter(city =>\r\n            city.city_name && city.city_name.toLowerCase().includes(termCities.toLowerCase())\r\n        );\r\n        setFilteredCities(filtered);\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const getNameAndSurname = () => {\r\n            if (user.user_name) {\r\n                const [name, surname] = user.user_name.split(\" \");\r\n                setSurnameValue(surname || \"\");\r\n                setNameValue(name);\r\n            }\r\n        }\r\n\r\n        const getDeps = async () => {\r\n\r\n            const res = await axios.get('/api/department_tree_to_json/');\r\n            const data = res.data[0]['department_tree_to_json'];\r\n            const extractedOptions = extractOptions(data);\r\n            setOptions(extractedOptions);\r\n            setSelectedValue(user.department_id);\r\n        }\r\n        const extractOptions = (node) => {\r\n            let optionsList = [{ id: node.id, name: node.Name }];\r\n            if (node.Subclasses && node.Subclasses.length > 0) {\r\n                node.Subclasses.forEach(subclass => {\r\n                    optionsList = optionsList.concat(extractOptions(subclass));\r\n                });\r\n            }\r\n            return optionsList;\r\n\r\n        };\r\n\r\n        const getNameDeps = async () => {\r\n            const deps = {\r\n                user: username.username\r\n            }\r\n            const res = await axios.post('/api/departments/', deps)\r\n            setCityName(res.data[0]['city_name'])\r\n        }\r\n\r\n        const fetchUser = async () => {\r\n            const res = await axios.get('/api/user/' + username.username)\r\n            setUser(res.data)\r\n\r\n\r\n            const city = await axios.get('/api/Cities/')\r\n            setCities(city.data)\r\n        }\r\n        // Номинации\r\n\r\n        if (user && user.email && email) {\r\n            setEmail(user.email);\r\n        }\r\n        if (user && user.phone_number && phone) {\r\n            setPhone(user.phone_number);\r\n        }\r\n\r\n        if (user && user.additional_contact && additional_contact) {\r\n            setAdditional_Contact(user.additional_contact);\r\n        }\r\n\r\n        if (user && user.distribution_group && distribution_group) {\r\n            setDistribution_Group(user.distribution_group);\r\n        }\r\n        if (user && user.activity_profile && activity_profile) {\r\n            setActivity_Profile(user.activity_profile);\r\n        }\r\n        if (user && user.place_of_residence && CityPlace) {\r\n            setCityPlace(user.place_of_residence);\r\n        }\r\n\r\n        getNameAndSurname();\r\n        fetchUser()\r\n        getDeps()\r\n        getNameDeps()\r\n    }, [\r\n        user.user_name,\r\n        user.email,\r\n        user.phone_number,\r\n        user.additional_contact,\r\n        user.distribution_group,\r\n        user.activity_profile,\r\n        user.place_of_residence,\r\n        username.username\r\n    ])\r\n\r\n    const handleEmailChange = (e) => {\r\n\r\n        if (e.target.value) {\r\n            setEmail('')\r\n            setEmailChange(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setEmail('')\r\n            setEmailChange('')\r\n        }\r\n\r\n    }\r\n    const formatPhoneNumber = (value) => {\r\n        // Убираем все символы, кроме цифр\r\n        let cleaned = value.replace(/\\D/g, '');\r\n        if (cleaned.startsWith('7')) {\r\n            cleaned = cleaned.slice(1); // Удаляем ведущую 7, если она уже присутствует после +\r\n        }\r\n        // Ограничиваем длину очищенного значения до 10 цифр (XXX-XXX-XX-XX без кода страны)\r\n        cleaned = cleaned.slice(0, 10);\r\n        // Разделяем на части, добавляя дефисы\r\n        const match = cleaned.match(/^(\\d{0,3})(\\d{0,3})(\\d{0,2})(\\d{0,2})$/);\r\n        if (match) {\r\n            return '+7 ' + [match[1], match[2], match[3], match[4]].filter(Boolean).join('-');\r\n        }\r\n        return '+7 ' + cleaned;\r\n    };\r\n    const handlePhoneChange = (e) => {\r\n        if (e.target.value) {\r\n            setPhone('')\r\n            setPhoneChange(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setPhone('')\r\n            setPhoneChange('')\r\n        }\r\n        const value = e.target.value;\r\n        if (value.length < 1) {\r\n            setPhoneChange('')\r\n        } else {\r\n            const formattedValue = formatPhoneNumber(value);\r\n            setPhoneChange(formattedValue);\r\n        }\r\n    }\r\n\r\n    const additional_Contact = (e) => {\r\n        if (e.target.value) {\r\n            setAdditional_Contact('')\r\n            setAdditional_Contact_Change(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setAdditional_Contact('')\r\n            setAdditional_Contact_Change('')\r\n        }\r\n    }\r\n\r\n    const distribution_Group = (e) => {\r\n        if (e.target.value) {\r\n            setDistribution_Group('')\r\n            setDistribution_Group_Change(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setDistribution_Group('')\r\n            setDistribution_Group_Change('')\r\n        }\r\n    }\r\n\r\n    const activity_Profile = (e) => {\r\n        if (e.target.value) {\r\n            setActivity_Profile('')\r\n            setActivity_Profile_Change(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setActivity_Profile('')\r\n            setActivity_Profile_Change('')\r\n        }\r\n    }\r\n\r\n    const cityPlace = (e) => {\r\n        if (e.target.value) {\r\n            setCityPlace('')\r\n            setCityPlace_Change(e.target.value)\r\n        }\r\n        if (e.target.value === '') {\r\n            setCityPlace('')\r\n            setCityPlace_Change('')\r\n        }\r\n    }\r\n\r\n    const handleNameChange = (e) => {\r\n        setNameValue(e.target.value);\r\n    }\r\n\r\n    const handleSurnameChange = (e) => {\r\n        setSurnameValue(e.target.value)\r\n    }\r\n\r\n\r\n    // изменение данных пользователя\r\n    const handleClick = async (e) => {\r\n\r\n        const name = user.user_name\r\n        const part = name.split(' ')\r\n        e.preventDefault()\r\n        const newInfo = {\r\n            departmentId: modalDep.current.value || user.department_id,\r\n            email: (email ? email : emailChange.toUpperCase()),\r\n            username: nameValue + ' ' + surnameValue,\r\n            _id: user.id,\r\n            isAdmin: user.isadmin,\r\n            see_child: user.see_child,\r\n            status: user.status,\r\n            main_department: user.main_department,\r\n            phone_number: (phoneNumber.current.value === '' ? '' : phoneNumber.current.value),\r\n            additional_contact: additionalContact.current.value,\r\n            distribution_group: distributionGroup.current.value,\r\n            activity_profile: activityProfile.current.value,\r\n            city_id: citiesId,\r\n            cityPlaceChange:modalCityPlace.current.value\r\n        }\r\n\r\n        if (localUse._id !== username.username) {\r\n            const newInfo2 = {\r\n                departmentId: modalDep.current.value || user.department_id,\r\n                email: (email ? email : emailChange.toUpperCase()),\r\n                username: nameValue + ' ' + surnameValue,\r\n                phone_number: (phoneNumber.current.value === '' ? '' : phoneNumber.current.value),\r\n                additional_contact: additionalContact.current.value,\r\n                distribution_group: distributionGroup.current.value,\r\n                activity_profile: activityProfile.current.value,\r\n                city_id: citiesId,\r\n                _id: user.id,\r\n                cityPlaceChange:modalCityPlace.current.value\r\n            }\r\n\r\n            await axios.put('/api/user/', newInfo2)\r\n            window.location.reload()\r\n        } else {\r\n            await axios.put('/api/user/', newInfo)\r\n            delete newInfo.phone_number\r\n            delete newInfo.additional_contact\r\n            delete newInfo.distribution_group\r\n            delete newInfo.activity_profile\r\n            delete newInfo.city_id\r\n            delete newInfo.cityPlaceChange\r\n            localStorage.setItem('user', JSON.stringify({...newInfo}))\r\n            setModalActive(false)\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setSelectedValue(e.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n\r\n\r\n                <Modal active={modalActive} setActive={setModalActive}>\r\n                    <h1>Изменение информации:</h1>\r\n                    <hr/>\r\n                    {error && <div className='modalError'>{error}</div>}\r\n                    <form className=\"modalLoginBox\" onSubmit={handleClick}>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Фамилия\"\r\n                                className=\"ModalInputUpdate\"\r\n                                onChange={handleNameChange}\r\n                                value={nameValue}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Имя\"\r\n                                className=\"ModalInputUpdate\"\r\n                                onChange={handleSurnameChange}\r\n                                value={surnameValue}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Email\"\r\n                                type=\"email\"\r\n                                className=\"ModalInputUpdate\"\r\n                                onChange={handleEmailChange}\r\n                                value={email || emailChange}\r\n                                minLength={6}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Телефон\"\r\n                                type='text'\r\n                                className=\"ModalInputUpdate\"\r\n                                ref={phoneNumber}\r\n                                onChange={handlePhoneChange}\r\n                                value={phone || phoneChange}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Доп контакт(Номер телефона,ФИО,статус человека)\"\r\n                                type='text'\r\n                                className=\"ModalInputUpdate\"\r\n                                ref={additionalContact}\r\n                                onChange={additional_Contact}\r\n                                value={additional_contact || additional_contact_change}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Группа рассылки\"\r\n                                type='text'\r\n                                className=\"ModalInputUpdate\"\r\n                                ref={distributionGroup}\r\n                                onChange={distribution_Group}\r\n                                value={distribution_group || distribution_group_change}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Профиль деятельности\"\r\n                                type='text'\r\n                                className=\"ModalInputUpdate\"\r\n                                ref={activityProfile}\r\n                                onChange={activity_Profile}\r\n                                value={activity_profile || activity_profile_change}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <input\r\n                                placeholder=\"Город\"\r\n                                type='text'\r\n                                className=\"ModalInputUpdate\"\r\n                                ref={modalCity}\r\n                                value={searchTermCities || cityName}\r\n                                onChange={handleInputChangeCities}\r\n                            />\r\n                            <div>\r\n                                {filteredCities.length > 0 && (\r\n                                    <div className='divSelectRegister'>\r\n                                        {filteredCities.map((city, id) => (\r\n                                            <div className='selectNameDiv' key={id} value={city.id}\r\n                                                 onClick={() => handleUserClickCities(city.city_name, city.id)}>\r\n                                                {city.city_name}\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                )}\r\n                                <input\r\n                                    placeholder=\"Адрес фактического проживания\"\r\n                                    type='text'\r\n                                    className=\"ModalInputUpdate\"\r\n                                    ref={modalCityPlace}\r\n                                    onChange={cityPlace}\r\n                                    value={CityPlace || CityPlace_Change}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <select\r\n                                value={selectedValue} // Привязываем значение к selectedValue\r\n                                onChange={handleChange}\r\n                                ref={modalDep}\r\n                                className=\"ModalInputUpdateSelect\"\r\n                            >\r\n                                {options.map((option) => (\r\n                                    <option key={option.id} value={option.id}>\r\n                                        {option.name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <button className=\"ModalButton\" type=\"submit\">\r\n                            Изменить\r\n                        </button>\r\n                    </form>\r\n                </Modal>\r\n\r\n        )\r\n}\r\n\r\nexport default Editing;","D:\\time_app\\client\\src\\components\\ProfileInfo\\DeleteUser\\DeleteUser.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\AdminPanel.jsx",[],"D:\\time_app\\client\\src\\components\\Topbar\\Statistics\\Statistics.jsx",["310","311"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Statistics () {\r\n    const localUser = JSON.parse(localStorage.getItem('user'))\r\n    const [countAll_users, setCountAll_users] = useState(0)\r\n    const [countWorked_today, setCountWorked_today] = useState(0)\r\n    const [countWorked_yesterday, setCountWorked_yesterday] = useState(0)\r\n    const [countSickLeave_today, setCountSickLeave_today] = useState(0)\r\n    const [countSick_yesterday, setCountSick_yesterday] = useState(0)\r\n    const [countVacation_today, setCountVacation_today] = useState(0)\r\n    const [countVacation_yesterday, setCountVacation_yesterday] = useState(0)\r\n\r\n    useEffect(() => {\r\n        const typework = async () => {\r\n            const res = await axios.get('/api/typework_status/')\r\n        }\r\n\r\n        const get_statistics_all_users = async () => {\r\n            const getUsers = {\r\n                id: localUser._id\r\n            }\r\n            if (localUser.isAdmin === true) {\r\n                const res = await axios.post('/api/get_statistics_all_users', getUsers)\r\n\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['all_users']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['all_users']=0\r\n                }else{\r\n                    setCountAll_users(res.data[0]['get_statistics_all_users'][0]['all_users'].length)\r\n                }\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['not_working_today']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['not_working_today']=0\r\n                }else{\r\n                    setCountWorked_today(res.data[0]['get_statistics_all_users'][0]['not_working_today'].length)\r\n                }\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['not_worked_yesterday']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['not_worked_yesterday']=0\r\n                }else{\r\n                    setCountWorked_yesterday(res.data[0]['get_statistics_all_users'][0]['not_worked_yesterday'].length)\r\n                }\r\n\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['sick_today']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['sick_today']=0\r\n                }else {\r\n                    setCountSickLeave_today(res.data[0]['get_statistics_all_users'][0]['sick_today'].length)\r\n                }\r\n\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['sick_yesterday']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['sick_yesterday']=0\r\n                }else{\r\n                    setCountSick_yesterday(res.data[0]['get_statistics_all_users'][0]['sick_yesterday'].length)\r\n                }\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['vacation_today']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['vacation_today']=0\r\n                }else{\r\n                    setCountVacation_today(res.data[0]['get_statistics_all_users'][0]['vacation_today'].length)\r\n                }\r\n\r\n                if(res.data[0]['get_statistics_all_users'][0]['vacation_yesterday']===null){\r\n                    res.data[0]['get_statistics_all_users'][0]['vacation_yesterday']=0\r\n                }else{\r\n                    setCountVacation_yesterday(res.data[0]['get_statistics_all_users'][0]['vacation_yesterday'].length)\r\n                }\r\n            }\r\n        }\r\n        typework()\r\n        get_statistics_all_users()\r\n}, [])\r\n\r\n        return (\r\n            <div className=\"topbarCenter\">\r\n                {localUser.isAdmin ?\r\n                    <div className='statistics'>\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/all_users/`}\r\n                              title=\"Всего сотрудников\">{countAll_users}</Link> /\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/not_working_today/`}\r\n                              title=\"Сегодня не работают\">{countWorked_today}</Link> /\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/not_worked_yesterday/`}\r\n                              title=\"Вчера не работали\">{countWorked_yesterday}</Link> /\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/sick_today/`}\r\n                              title=\"Сегодня болеют\">{countSickLeave_today}</Link> /\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/sick_yesterday/`}\r\n                              title=\"Вчера болели\">{countSick_yesterday}</Link> /\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/vacation_today/`}\r\n                              title=\"Сегодня в отпуске\">{countVacation_today}</Link>/\r\n                        <Link className=\"topbarLinkCount\" onClick={() => window.location.href = `/vacation_yesterday/`}\r\n                              title=\"Вчера в отпуске\">{countVacation_yesterday}</Link>\r\n                    </div> : ''\r\n                }\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Statistics;","D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\Role\\Role.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\AdminPanel\\DictionarySkills\\DictionarySkills.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\ResetPassword\\ResetPassword.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\FinishTime\\FinishTime.jsx",[],"D:\\time_app\\client\\src\\components\\ProfileInfo\\AddNomination\\AddNomination.jsx",["312","313","314","315","316"],{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":18,"column":8,"nodeType":"323","messageId":"324","endLine":18,"endColumn":15},{"ruleId":"321","severity":1,"message":"325","line":27,"column":10,"nodeType":"323","messageId":"324","endLine":27,"endColumn":19},{"ruleId":"321","severity":1,"message":"326","line":27,"column":21,"nodeType":"323","messageId":"324","endLine":27,"endColumn":33},{"ruleId":"327","severity":1,"message":"328","line":15,"column":15,"nodeType":"329","endLine":26,"endColumn":6},{"ruleId":"321","severity":1,"message":"330","line":2,"column":8,"nodeType":"323","messageId":"324","endLine":2,"endColumn":14},{"ruleId":"321","severity":1,"message":"331","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":34},{"ruleId":"327","severity":1,"message":"332","line":191,"column":8,"nodeType":"333","endLine":191,"endColumn":39,"suggestions":"334"},{"ruleId":"321","severity":1,"message":"335","line":221,"column":15,"nodeType":"323","messageId":"324","endLine":221,"endColumn":18},{"ruleId":"336","severity":1,"message":"337","line":30,"column":13,"nodeType":"338","messageId":"339","endLine":30,"endColumn":15},{"ruleId":"327","severity":1,"message":"340","line":77,"column":6,"nodeType":"333","endLine":77,"endColumn":15,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":117,"column":23,"nodeType":"344","endLine":122,"endColumn":25},{"ruleId":"321","severity":1,"message":"345","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":19},{"ruleId":"321","severity":1,"message":"335","line":34,"column":13,"nodeType":"323","messageId":"324","endLine":34,"endColumn":16},{"ruleId":"327","severity":1,"message":"346","line":48,"column":6,"nodeType":"333","endLine":48,"endColumn":8,"suggestions":"347"},{"ruleId":"321","severity":1,"message":"348","line":92,"column":10,"nodeType":"323","messageId":"324","endLine":92,"endColumn":27},{"ruleId":"321","severity":1,"message":"349","line":95,"column":9,"nodeType":"323","messageId":"324","endLine":95,"endColumn":20},{"ruleId":"350","severity":1,"message":"351","line":10,"column":68,"nodeType":"344","messageId":"352","endLine":10,"endColumn":156,"fix":"353"},{"ruleId":"336","severity":1,"message":"337","line":21,"column":11,"nodeType":"338","messageId":"339","endLine":21,"endColumn":13},{"ruleId":"321","severity":1,"message":"354","line":33,"column":10,"nodeType":"323","messageId":"324","endLine":33,"endColumn":15},{"ruleId":"327","severity":1,"message":"355","line":107,"column":6,"nodeType":"333","endLine":107,"endColumn":21,"suggestions":"356"},{"ruleId":"321","severity":1,"message":"335","line":130,"column":15,"nodeType":"323","messageId":"324","endLine":130,"endColumn":18},{"ruleId":"321","severity":1,"message":"357","line":8,"column":10,"nodeType":"323","messageId":"324","endLine":8,"endColumn":20},{"ruleId":"336","severity":1,"message":"337","line":10,"column":14,"nodeType":"338","messageId":"339","endLine":10,"endColumn":16},{"ruleId":"336","severity":1,"message":"337","line":39,"column":19,"nodeType":"338","messageId":"339","endLine":39,"endColumn":21},{"ruleId":"327","severity":1,"message":"340","line":86,"column":8,"nodeType":"333","endLine":86,"endColumn":17,"suggestions":"358"},{"ruleId":"342","severity":1,"message":"343","line":127,"column":41,"nodeType":"344","endLine":132,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":4,"column":35,"nodeType":"323","messageId":"324","endLine":4,"endColumn":42},{"ruleId":"321","severity":1,"message":"359","line":21,"column":12,"nodeType":"323","messageId":"324","endLine":21,"endColumn":20},{"ruleId":"321","severity":1,"message":"360","line":22,"column":12,"nodeType":"323","messageId":"324","endLine":22,"endColumn":28},{"ruleId":"321","severity":1,"message":"361","line":30,"column":12,"nodeType":"323","messageId":"324","endLine":30,"endColumn":17},{"ruleId":"321","severity":1,"message":"362","line":30,"column":19,"nodeType":"323","messageId":"324","endLine":30,"endColumn":27},{"ruleId":"321","severity":1,"message":"363","line":31,"column":12,"nodeType":"323","messageId":"324","endLine":31,"endColumn":24},{"ruleId":"321","severity":1,"message":"364","line":31,"column":26,"nodeType":"323","messageId":"324","endLine":31,"endColumn":41},{"ruleId":"336","severity":1,"message":"337","line":85,"column":19,"nodeType":"338","messageId":"339","endLine":85,"endColumn":21},{"ruleId":"327","severity":1,"message":"365","line":131,"column":8,"nodeType":"333","endLine":140,"endColumn":6,"suggestions":"366"},{"ruleId":"321","severity":1,"message":"367","line":211,"column":19,"nodeType":"323","messageId":"324","endLine":211,"endColumn":22},{"ruleId":"342","severity":1,"message":"343","line":336,"column":17,"nodeType":"344","endLine":342,"endColumn":19},{"ruleId":"321","severity":1,"message":"330","line":1,"column":8,"nodeType":"323","messageId":"324","endLine":1,"endColumn":14},{"ruleId":"321","severity":1,"message":"368","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":18},{"ruleId":"321","severity":1,"message":"369","line":21,"column":12,"nodeType":"323","messageId":"324","endLine":21,"endColumn":20},{"ruleId":"370","severity":1,"message":"371","line":68,"column":40,"nodeType":"372","messageId":"373","endLine":68,"endColumn":42},{"ruleId":"370","severity":1,"message":"371","line":68,"column":80,"nodeType":"372","messageId":"373","endLine":68,"endColumn":82},{"ruleId":"370","severity":1,"message":"374","line":68,"column":80,"nodeType":"372","messageId":"373","endLine":68,"endColumn":82},{"ruleId":"370","severity":1,"message":"374","line":69,"column":41,"nodeType":"372","messageId":"373","endLine":69,"endColumn":43},{"ruleId":"370","severity":1,"message":"374","line":69,"column":82,"nodeType":"372","messageId":"373","endLine":69,"endColumn":84},{"ruleId":"370","severity":1,"message":"374","line":70,"column":41,"nodeType":"372","messageId":"373","endLine":70,"endColumn":43},{"ruleId":"370","severity":1,"message":"374","line":70,"column":82,"nodeType":"372","messageId":"373","endLine":70,"endColumn":84},{"ruleId":"370","severity":1,"message":"374","line":71,"column":41,"nodeType":"372","messageId":"373","endLine":71,"endColumn":43},{"ruleId":"321","severity":1,"message":"375","line":21,"column":12,"nodeType":"323","messageId":"324","endLine":21,"endColumn":18},{"ruleId":"321","severity":1,"message":"369","line":25,"column":12,"nodeType":"323","messageId":"324","endLine":25,"endColumn":20},{"ruleId":"321","severity":1,"message":"376","line":27,"column":11,"nodeType":"323","messageId":"324","endLine":27,"endColumn":25},{"ruleId":"370","severity":1,"message":"371","line":77,"column":40,"nodeType":"372","messageId":"373","endLine":77,"endColumn":42},{"ruleId":"370","severity":1,"message":"371","line":77,"column":80,"nodeType":"372","messageId":"373","endLine":77,"endColumn":82},{"ruleId":"370","severity":1,"message":"374","line":77,"column":80,"nodeType":"372","messageId":"373","endLine":77,"endColumn":82},{"ruleId":"370","severity":1,"message":"374","line":78,"column":41,"nodeType":"372","messageId":"373","endLine":78,"endColumn":43},{"ruleId":"370","severity":1,"message":"374","line":78,"column":82,"nodeType":"372","messageId":"373","endLine":78,"endColumn":84},{"ruleId":"370","severity":1,"message":"374","line":79,"column":41,"nodeType":"372","messageId":"373","endLine":79,"endColumn":43},{"ruleId":"370","severity":1,"message":"374","line":79,"column":82,"nodeType":"372","messageId":"373","endLine":79,"endColumn":84},{"ruleId":"370","severity":1,"message":"374","line":80,"column":41,"nodeType":"372","messageId":"373","endLine":80,"endColumn":43},{"ruleId":"370","severity":1,"message":"374","line":80,"column":82,"nodeType":"372","messageId":"373","endLine":80,"endColumn":84},{"ruleId":"370","severity":1,"message":"374","line":81,"column":41,"nodeType":"372","messageId":"373","endLine":81,"endColumn":43},{"ruleId":"321","severity":1,"message":"368","line":2,"column":8,"nodeType":"323","messageId":"324","endLine":2,"endColumn":18},{"ruleId":"321","severity":1,"message":"377","line":3,"column":8,"nodeType":"323","messageId":"324","endLine":3,"endColumn":22},{"ruleId":"321","severity":1,"message":"330","line":7,"column":8,"nodeType":"323","messageId":"324","endLine":7,"endColumn":14},{"ruleId":"321","severity":1,"message":"378","line":8,"column":8,"nodeType":"323","messageId":"324","endLine":8,"endColumn":15},{"ruleId":"327","severity":1,"message":"379","line":67,"column":8,"nodeType":"333","endLine":67,"endColumn":18,"suggestions":"380"},{"ruleId":"327","severity":1,"message":"381","line":72,"column":8,"nodeType":"333","endLine":72,"endColumn":34,"suggestions":"382"},{"ruleId":"383","severity":1,"message":"384","line":207,"column":9,"nodeType":"385","messageId":"386","endLine":219,"endColumn":10},{"ruleId":"327","severity":1,"message":"379","line":67,"column":8,"nodeType":"333","endLine":67,"endColumn":10,"suggestions":"387"},{"ruleId":"321","severity":1,"message":"388","line":49,"column":12,"nodeType":"323","messageId":"324","endLine":49,"endColumn":33},{"ruleId":"321","severity":1,"message":"389","line":50,"column":12,"nodeType":"323","messageId":"324","endLine":50,"endColumn":37},{"ruleId":"321","severity":1,"message":"390","line":51,"column":12,"nodeType":"323","messageId":"324","endLine":51,"endColumn":40},{"ruleId":"321","severity":1,"message":"391","line":52,"column":12,"nodeType":"323","messageId":"324","endLine":52,"endColumn":34},{"ruleId":"321","severity":1,"message":"392","line":61,"column":11,"nodeType":"323","messageId":"324","endLine":61,"endColumn":20},{"ruleId":"321","severity":1,"message":"393","line":63,"column":12,"nodeType":"323","messageId":"324","endLine":63,"endColumn":21},{"ruleId":"321","severity":1,"message":"394","line":63,"column":23,"nodeType":"323","messageId":"324","endLine":63,"endColumn":35},{"ruleId":"321","severity":1,"message":"395","line":64,"column":12,"nodeType":"323","messageId":"324","endLine":64,"endColumn":19},{"ruleId":"321","severity":1,"message":"396","line":64,"column":21,"nodeType":"323","messageId":"324","endLine":64,"endColumn":31},{"ruleId":"321","severity":1,"message":"335","line":155,"column":19,"nodeType":"323","messageId":"324","endLine":155,"endColumn":22},{"ruleId":"383","severity":1,"message":"384","line":231,"column":9,"nodeType":"385","messageId":"386","endLine":243,"endColumn":10},{"ruleId":"321","severity":1,"message":"397","line":19,"column":12,"nodeType":"323","messageId":"324","endLine":19,"endColumn":27},{"ruleId":"327","severity":1,"message":"398","line":47,"column":8,"nodeType":"333","endLine":47,"endColumn":10,"suggestions":"399"},{"ruleId":"321","severity":1,"message":"400","line":55,"column":11,"nodeType":"323","messageId":"324","endLine":55,"endColumn":23},{"ruleId":"370","severity":1,"message":"374","line":98,"column":60,"nodeType":"372","messageId":"373","endLine":98,"endColumn":62},{"ruleId":"370","severity":1,"message":"374","line":98,"column":84,"nodeType":"372","messageId":"373","endLine":98,"endColumn":86},{"ruleId":"321","severity":1,"message":"401","line":102,"column":19,"nodeType":"323","messageId":"324","endLine":102,"endColumn":28},{"ruleId":"321","severity":1,"message":"402","line":122,"column":15,"nodeType":"323","messageId":"324","endLine":122,"endColumn":27},{"ruleId":"321","severity":1,"message":"403","line":64,"column":12,"nodeType":"323","messageId":"324","endLine":64,"endColumn":21},{"ruleId":"321","severity":1,"message":"335","line":165,"column":19,"nodeType":"323","messageId":"324","endLine":165,"endColumn":22},{"ruleId":"321","severity":1,"message":"404","line":35,"column":22,"nodeType":"323","messageId":"324","endLine":35,"endColumn":33},{"ruleId":"327","severity":1,"message":"405","line":57,"column":8,"nodeType":"333","endLine":57,"endColumn":18,"suggestions":"406"},{"ruleId":"327","severity":1,"message":"407","line":135,"column":8,"nodeType":"333","endLine":135,"endColumn":18,"suggestions":"408"},{"ruleId":"321","severity":1,"message":"409","line":148,"column":15,"nodeType":"323","messageId":"324","endLine":148,"endColumn":25},{"ruleId":"321","severity":1,"message":"410","line":9,"column":19,"nodeType":"323","messageId":"324","endLine":9,"endColumn":27},{"ruleId":"327","severity":1,"message":"411","line":164,"column":8,"nodeType":"333","endLine":173,"endColumn":6,"suggestions":"412"},{"ruleId":"321","severity":1,"message":"413","line":277,"column":15,"nodeType":"323","messageId":"324","endLine":277,"endColumn":19},{"ruleId":"321","severity":1,"message":"335","line":17,"column":19,"nodeType":"323","messageId":"324","endLine":17,"endColumn":22},{"ruleId":"327","severity":1,"message":"414","line":75,"column":4,"nodeType":"333","endLine":75,"endColumn":6,"suggestions":"415"},{"ruleId":"321","severity":1,"message":"363","line":8,"column":12,"nodeType":"323","messageId":"324","endLine":8,"endColumn":24},{"ruleId":"327","severity":1,"message":"398","line":26,"column":8,"nodeType":"333","endLine":26,"endColumn":10,"suggestions":"416"},{"ruleId":"321","severity":1,"message":"335","line":33,"column":15,"nodeType":"323","messageId":"324","endLine":33,"endColumn":18},{"ruleId":"321","severity":1,"message":"335","line":51,"column":15,"nodeType":"323","messageId":"324","endLine":51,"endColumn":18},{"ruleId":"342","severity":1,"message":"343","line":110,"column":33,"nodeType":"344","endLine":110,"endColumn":134},"no-native-reassign",["417"],"no-negated-in-lhs",["418"],"no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'Topbar' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'checked', 'isJob', 'localUser._id', 'localUser.departmentId', 'localUser.isAdmin', and 'localUser.main_department'. Either include them or remove the dependency array. You can also do a functional update 'setIsJob(i => ...)' if you only need 'isJob' in the 'setIsJob' call.","ArrayExpression",["419"],"'res' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user.status'. Either include it or remove the dependency array.",["420"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'MessagePost' is defined but never used.","React Hook useEffect has a missing dependency: 'localUser._id'. Either include it or remove the dependency array.",["421"],"'notificationCount' is assigned a value but never used.","'togglePopup' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"422","text":"423"},"'place' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'places'. Either include it or remove the dependency array.",["424"],"'findStatus' is defined but never used.",["425"],"'timeZone' is assigned a value but never used.","'searchTermCities' is assigned a value but never used.","'check' is assigned a value but never used.","'setCheck' is assigned a value but never used.","'checkedItems' is assigned a value but never used.","'setCheckedItems' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'images', 'localUser', 'user.nomination_status', and 'username'. Either include them or remove the dependency array.",["426"],"'str' is assigned a value but never used.","'Pagination' is defined but never used.","'isFilter' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","'isOpen' is assigned a value but never used.","'currentlyPosts' is assigned a value but never used.","'ModalVacancies' is defined but never used.","'Sidebar' is defined but never used.","React Hook useEffect has missing dependencies: 'localUser._id' and 'localUser.departmentId'. Either include them or remove the dependency array.",["427"],"React Hook useEffect has a missing dependency: 'applyFilters'. Either include it or remove the dependency array.",["428"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["429"],"'selectedVacanciesName' is assigned a value but never used.","'selectedVacanciesStatuses' is assigned a value but never used.","'selectedVacanciesDescription' is assigned a value but never used.","'selectedVacanciesGrade' is assigned a value but never used.","'searchRef' is assigned a value but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'selectedNumber2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'username.username'. Either include it or remove the dependency array.",["430"],"'handleClick2' is assigned a value but never used.","'getSkills' is assigned a value but never used.","'DeleteSkills' is assigned a value but never used.","'user_name' is assigned a value but never used.","'setNewPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserpost'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has a missing dependency: 'fetchUservacation'. Either include it or remove the dependency array.",["432"],"'currentDay' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CityPlace', 'activity_profile', 'additional_contact', 'distribution_group', 'email', 'phone', and 'user'. Either include them or remove the dependency array.",["433"],"'part' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'localUser._id' and 'localUser.isAdmin'. Either include them or remove the dependency array.",["434"],["435"],"no-global-assign","no-unsafe-negation",{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},[330,330]," rel=\"noreferrer\"",{"desc":"442","fix":"443"},{"desc":"438","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"453","fix":"463"},"Update the dependencies array to be: [checked, departId, isJob, localUser._id, localUser.departmentId, localUser.isAdmin, localUser.main_department, user.main_department]",{"range":"464","text":"465"},"Update the dependencies array to be: [user.id, user.status]",{"range":"466","text":"467"},"Update the dependencies array to be: [localUser._id]",{"range":"468","text":"469"},"Update the dependencies array to be: [localUser._id, places]",{"range":"470","text":"471"},{"range":"472","text":"467"},"Update the dependencies array to be: [user.user_name, user.email, user.phone_number, user.additional_contact, user.distribution_group, user.activity_profile, user.place_of_residence, username.username, images, user.nomination_status, username, localUser]",{"range":"473","text":"474"},"Update the dependencies array to be: [departId, localUser._id, localUser.departmentId]",{"range":"475","text":"476"},"Update the dependencies array to be: [vacancies, activeFilters, applyFilters]",{"range":"477","text":"478"},"Update the dependencies array to be: [localUser._id, localUser.departmentId]",{"range":"479","text":"480"},"Update the dependencies array to be: [username.username]",{"range":"481","text":"482"},"Update the dependencies array to be: [fetchUserpost, username]",{"range":"483","text":"484"},"Update the dependencies array to be: [fetchUservacation, username]",{"range":"485","text":"486"},"Update the dependencies array to be: [user.user_name, user.email, user.phone_number, user.additional_contact, user.distribution_group, user.activity_profile, user.place_of_residence, username.username, user, email, phone, additional_contact, distribution_group, activity_profile, CityPlace]",{"range":"487","text":"488"},"Update the dependencies array to be: [localUser._id, localUser.isAdmin]",{"range":"489","text":"490"},{"range":"491","text":"482"},[8825,8856],"[checked, departId, isJob, localUser._id, localUser.departmentId, localUser.isAdmin, localUser.main_department, user.main_department]",[1971,1980],"[user.id, user.status]",[1438,1440],"[localUser._id]",[3033,3048],"[localUser._id, places]",[2478,2487],[4380,4614],"[user.user_name, user.email, user.phone_number, user.additional_contact, user.distribution_group, user.activity_profile, user.place_of_residence, username.username, images, user.nomination_status, username, localUser]",[2540,2550],"[departId, localUser._id, localUser.departmentId]",[2625,2651],"[vacancies, activeFilters, applyFilters]",[2191,2193],"[localUser._id, localUser.departmentId]",[1669,1671],"[username.username]",[1977,1987],"[fetchUserpost, username]",[4529,4539],"[fetchUservacation, username]",[5156,5399],"[user.user_name, user.email, user.phone_number, user.additional_contact, user.distribution_group, user.activity_profile, user.place_of_residence, username.username, user, email, phone, additional_contact, distribution_group, activity_profile, CityPlace]",[3558,3560],"[localUser._id, localUser.isAdmin]",[728,730]]